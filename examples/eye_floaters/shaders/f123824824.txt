#version 310 es
#if defined(GL_EXT_control_flow_attributes)
#extension GL_EXT_control_flow_attributes : require
#define SPIRV_CROSS_FLATTEN [[flatten]]
#define SPIRV_CROSS_BRANCH [[dont_flatten]]
#define SPIRV_CROSS_UNROLL [[unroll]]
#define SPIRV_CROSS_LOOP [[dont_unroll]]
#else
#define SPIRV_CROSS_FLATTEN
#define SPIRV_CROSS_BRANCH
#define SPIRV_CROSS_UNROLL
#define SPIRV_CROSS_LOOP
#endif
precision mediump float;
precision highp int;

struct MaterialInfo
{
    ivec4 hasBasicTex;
    highp vec4 albedoFactor;
    highp float metallicFactor;
    highp float roughnessFactor;
    highp float occlusionFactor;
    highp float normalScale;
    highp vec3 emissiveFactor;
    highp float t2;
    highp vec4 normalMaskWeights;
    ivec4 hasPbrTex;
    ivec4 options;
};

struct LightInfo
{
    highp vec3 color;
    int type;
    highp vec3 direction;
    highp float falloffRadius;
    highp vec3 posWorld;
    highp float intensity;
    highp vec2 inOutCutoff;
    ivec2 t1;
};

struct CameraInfo
{
    highp vec3 posWorld;
    highp float t0;
    highp vec2 nearFarPlane;
    highp vec2 t1;
    highp mat4 bgMatrix;
};

layout(binding = 3, std140) uniform type_materialInfo
{
    MaterialInfo materialInfo;
} materialInfo;

layout(binding = 4, std140) uniform type_lightInfo
{
    LightInfo lightInfo[6];
} lightInfo;

layout(binding = 5, std140) uniform type_cameraInfo
{
    layout(row_major) CameraInfo cameraInfo;
} cameraInfo;

layout(binding = 0) uniform highp sampler2D SPIRV_Cross_Combined_normalTex_linear_sampler;
layout(binding = 1) uniform highp sampler2D SPIRV_Cross_Combined_normalMaskTex_linear_sampler;
layout(binding = 2) uniform highp sampler2D SPIRV_Cross_Combined_occlusionTex_linear_sampler;

layout(location = 0) in highp vec2 in_var_TEXCOORD;
layout(location = 1) in highp vec3 in_var_NORMAL;
layout(location = 2) in highp vec4 in_var_TANGENT;
layout(location = 3) in highp vec3 in_var_POSITION0;
layout(location = 0) out highp vec4 out_var_SV_Target0;

vec3 _67;

void main()
{
    highp vec3 _90;
    if (materialInfo.materialInfo.hasBasicTex.x == 1234)
    {
        _90 = vec3(in_var_TEXCOORD, 0.5);
    }
    else
    {
        _90 = in_var_NORMAL;
    }
    highp vec3 _91 = normalize(_90);
    highp vec3 _99 = vec4(normalize(in_var_TANGENT.xyz), in_var_TANGENT.w).xyz;
    highp vec4 _113 = texture(SPIRV_Cross_Combined_normalTex_linear_sampler, in_var_TEXCOORD);
    highp vec4 _121 = texture(SPIRV_Cross_Combined_normalMaskTex_linear_sampler, in_var_TEXCOORD);
    highp float _122 = dot(_121, materialInfo.materialInfo.normalMaskWeights);
    highp float _123 = isnan(1.0) ? _122 : (isnan(_122) ? 1.0 : min(_122, 1.0));
    highp vec3 _128 = normalize(mat3(_99, cross(_91, _99) * in_var_TANGENT.w, _91) * ((((_113.xyz * 2.0) - vec3(1.0)) * vec3(materialInfo.materialInfo.normalScale, materialInfo.materialInfo.normalScale, 1.0)) * vec3(_123, _123, 1.0)));
    highp vec3 _132 = normalize(cameraInfo.cameraInfo.posWorld - in_var_POSITION0);
    highp vec4 _137 = texture(SPIRV_Cross_Combined_occlusionTex_linear_sampler, in_var_TEXCOORD);
    highp float _140 = materialInfo.materialInfo.occlusionFactor * (_137.x - 1.0) + 1.0;
    highp vec3 _230;
    highp vec3 _231;
    SPIRV_CROSS_BRANCH
    if (lightInfo.lightInfo[0u].type >= 0)
    {
        highp vec3 _228;
        highp vec3 _229;
        SPIRV_CROSS_BRANCH
        if (lightInfo.lightInfo[0u].type == 0)
        {
            _228 = _67;
            _229 = (materialInfo.materialInfo.albedoFactor.xyz * _140) * lightInfo.lightInfo[0u].color;
        }
        else
        {
            highp vec3 _214;
            highp float _215;
            SPIRV_CROSS_BRANCH
            if (lightInfo.lightInfo[0u].type == 1)
            {
                _214 = normalize(-lightInfo.lightInfo[0u].direction);
                _215 = 1.0;
            }
            else
            {
                highp vec3 _212;
                highp float _213;
                if (lightInfo.lightInfo[0u].type == 2)
                {
                    highp vec3 _177 = lightInfo.lightInfo[0u].posWorld - in_var_POSITION0;
                    highp vec3 _178 = normalize(_177);
                    highp float _179 = 1.0 / lightInfo.lightInfo[0u].falloffRadius;
                    highp float _180 = dot(_177, _177);
                    highp float _182 = (_180 * _179) * _179;
                    highp float _184 = (-_182) * _182 + 1.0;
                    highp float _185 = isnan(0.0) ? _184 : (isnan(_184) ? 0.0 : max(_184, 0.0));
                    _212 = _178;
                    _213 = ((_185 * _185) / (isnan(9.9999997473787516355514526367188e-05) ? _180 : (isnan(_180) ? 9.9999997473787516355514526367188e-05 : max(_180, 9.9999997473787516355514526367188e-05)))) * smoothstep(lightInfo.lightInfo[0u].inOutCutoff.y, lightInfo.lightInfo[0u].inOutCutoff.x, dot(lightInfo.lightInfo[0u].direction, -_178));
                }
                else
                {
                    highp vec3 _210;
                    highp float _211;
                    if (lightInfo.lightInfo[0u].type == 3)
                    {
                        highp vec3 _198 = lightInfo.lightInfo[0u].posWorld - in_var_POSITION0;
                        highp float _200 = 1.0 / lightInfo.lightInfo[0u].falloffRadius;
                        highp float _201 = dot(_198, _198);
                        highp float _203 = (_201 * _200) * _200;
                        highp float _205 = (-_203) * _203 + 1.0;
                        highp float _206 = isnan(0.0) ? _205 : (isnan(_205) ? 0.0 : max(_205, 0.0));
                        _210 = normalize(_198);
                        _211 = (_206 * _206) / (isnan(9.9999997473787516355514526367188e-05) ? _201 : (isnan(_201) ? 9.9999997473787516355514526367188e-05 : max(_201, 9.9999997473787516355514526367188e-05)));
                    }
                    else
                    {
                        _210 = _67;
                        _211 = 1.0;
                    }
                    _212 = _210;
                    _213 = _211;
                }
                _214 = _212;
                _215 = _213;
            }
            highp float _218 = dot(_128, _214);
            highp float _220 = dot(normalize(_214 + _132), _128);
            _228 = _214;
            _229 = (((materialInfo.materialInfo.albedoFactor.xyz * lightInfo.lightInfo[0u].color) * (pow(isnan(_220) ? 0.0 : (isnan(0.0) ? _220 : max(0.0, _220)), 16.0) * 0.5 + (isnan(0.0) ? _218 : (isnan(_218) ? 0.0 : max(_218, 0.0))))) * _215) * lightInfo.lightInfo[0u].intensity;
        }
        _230 = _228;
        _231 = _229;
    }
    else
    {
        _230 = _67;
        _231 = vec3(0.0);
    }
    highp vec3 _322;
    highp vec3 _323;
    SPIRV_CROSS_BRANCH
    if (lightInfo.lightInfo[1u].type >= 0)
    {
        highp vec3 _319;
        highp vec3 _320;
        SPIRV_CROSS_BRANCH
        if (lightInfo.lightInfo[1u].type == 0)
        {
            _319 = _230;
            _320 = (materialInfo.materialInfo.albedoFactor.xyz * _140) * lightInfo.lightInfo[1u].color;
        }
        else
        {
            highp vec3 _303;
            highp float _304;
            SPIRV_CROSS_BRANCH
            if (lightInfo.lightInfo[1u].type == 1)
            {
                _303 = normalize(-lightInfo.lightInfo[1u].direction);
                _304 = 1.0;
            }
            else
            {
                highp vec3 _299;
                highp float _300;
                if (lightInfo.lightInfo[1u].type == 2)
                {
                    highp vec3 _281 = lightInfo.lightInfo[1u].posWorld - in_var_POSITION0;
                    highp vec3 _282 = normalize(_281);
                    highp float _283 = 1.0 / lightInfo.lightInfo[1u].falloffRadius;
                    highp float _284 = dot(_281, _281);
                    highp float _286 = (_284 * _283) * _283;
                    highp float _288 = (-_286) * _286 + 1.0;
                    highp float _289 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
                    _299 = _282;
                    _300 = ((_289 * _289) / (isnan(9.9999997473787516355514526367188e-05) ? _284 : (isnan(_284) ? 9.9999997473787516355514526367188e-05 : max(_284, 9.9999997473787516355514526367188e-05)))) * smoothstep(lightInfo.lightInfo[1u].inOutCutoff.y, lightInfo.lightInfo[1u].inOutCutoff.x, dot(lightInfo.lightInfo[1u].direction, -_282));
                }
                else
                {
                    highp vec3 _279;
                    highp float _280;
                    if (lightInfo.lightInfo[1u].type == 3)
                    {
                        highp vec3 _267 = lightInfo.lightInfo[1u].posWorld - in_var_POSITION0;
                        highp float _269 = 1.0 / lightInfo.lightInfo[1u].falloffRadius;
                        highp float _270 = dot(_267, _267);
                        highp float _272 = (_270 * _269) * _269;
                        highp float _274 = (-_272) * _272 + 1.0;
                        highp float _275 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
                        _279 = normalize(_267);
                        _280 = (_275 * _275) / (isnan(9.9999997473787516355514526367188e-05) ? _270 : (isnan(_270) ? 9.9999997473787516355514526367188e-05 : max(_270, 9.9999997473787516355514526367188e-05)));
                    }
                    else
                    {
                        _279 = _230;
                        _280 = 1.0;
                    }
                    _299 = _279;
                    _300 = _280;
                }
                _303 = _299;
                _304 = _300;
            }
            highp float _307 = dot(_128, _303);
            highp float _309 = dot(normalize(_303 + _132), _128);
            _319 = _303;
            _320 = (((materialInfo.materialInfo.albedoFactor.xyz * lightInfo.lightInfo[1u].color) * (pow(isnan(_309) ? 0.0 : (isnan(0.0) ? _309 : max(0.0, _309)), 16.0) * 0.5 + (isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0))))) * _304) * lightInfo.lightInfo[1u].intensity;
        }
        _322 = _319;
        _323 = _231 + _320;
    }
    else
    {
        _322 = _230;
        _323 = _231;
    }
    highp vec3 _414;
    highp vec3 _415;
    SPIRV_CROSS_BRANCH
    if (lightInfo.lightInfo[2u].type >= 0)
    {
        highp vec3 _411;
        highp vec3 _412;
        SPIRV_CROSS_BRANCH
        if (lightInfo.lightInfo[2u].type == 0)
        {
            _411 = _322;
            _412 = (materialInfo.materialInfo.albedoFactor.xyz * _140) * lightInfo.lightInfo[2u].color;
        }
        else
        {
            highp vec3 _395;
            highp float _396;
            SPIRV_CROSS_BRANCH
            if (lightInfo.lightInfo[2u].type == 1)
            {
                _395 = normalize(-lightInfo.lightInfo[2u].direction);
                _396 = 1.0;
            }
            else
            {
                highp vec3 _391;
                highp float _392;
                if (lightInfo.lightInfo[2u].type == 2)
                {
                    highp vec3 _373 = lightInfo.lightInfo[2u].posWorld - in_var_POSITION0;
                    highp vec3 _374 = normalize(_373);
                    highp float _375 = 1.0 / lightInfo.lightInfo[2u].falloffRadius;
                    highp float _376 = dot(_373, _373);
                    highp float _378 = (_376 * _375) * _375;
                    highp float _380 = (-_378) * _378 + 1.0;
                    highp float _381 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
                    _391 = _374;
                    _392 = ((_381 * _381) / (isnan(9.9999997473787516355514526367188e-05) ? _376 : (isnan(_376) ? 9.9999997473787516355514526367188e-05 : max(_376, 9.9999997473787516355514526367188e-05)))) * smoothstep(lightInfo.lightInfo[2u].inOutCutoff.y, lightInfo.lightInfo[2u].inOutCutoff.x, dot(lightInfo.lightInfo[2u].direction, -_374));
                }
                else
                {
                    highp vec3 _371;
                    highp float _372;
                    if (lightInfo.lightInfo[2u].type == 3)
                    {
                        highp vec3 _359 = lightInfo.lightInfo[2u].posWorld - in_var_POSITION0;
                        highp float _361 = 1.0 / lightInfo.lightInfo[2u].falloffRadius;
                        highp float _362 = dot(_359, _359);
                        highp float _364 = (_362 * _361) * _361;
                        highp float _366 = (-_364) * _364 + 1.0;
                        highp float _367 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
                        _371 = normalize(_359);
                        _372 = (_367 * _367) / (isnan(9.9999997473787516355514526367188e-05) ? _362 : (isnan(_362) ? 9.9999997473787516355514526367188e-05 : max(_362, 9.9999997473787516355514526367188e-05)));
                    }
                    else
                    {
                        _371 = _322;
                        _372 = 1.0;
                    }
                    _391 = _371;
                    _392 = _372;
                }
                _395 = _391;
                _396 = _392;
            }
            highp float _399 = dot(_128, _395);
            highp float _401 = dot(normalize(_395 + _132), _128);
            _411 = _395;
            _412 = (((materialInfo.materialInfo.albedoFactor.xyz * lightInfo.lightInfo[2u].color) * (pow(isnan(_401) ? 0.0 : (isnan(0.0) ? _401 : max(0.0, _401)), 16.0) * 0.5 + (isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0))))) * _396) * lightInfo.lightInfo[2u].intensity;
        }
        _414 = _411;
        _415 = _323 + _412;
    }
    else
    {
        _414 = _322;
        _415 = _323;
    }
    highp vec3 _506;
    highp vec3 _507;
    SPIRV_CROSS_BRANCH
    if (lightInfo.lightInfo[3u].type >= 0)
    {
        highp vec3 _503;
        highp vec3 _504;
        SPIRV_CROSS_BRANCH
        if (lightInfo.lightInfo[3u].type == 0)
        {
            _503 = _414;
            _504 = (materialInfo.materialInfo.albedoFactor.xyz * _140) * lightInfo.lightInfo[3u].color;
        }
        else
        {
            highp vec3 _487;
            highp float _488;
            SPIRV_CROSS_BRANCH
            if (lightInfo.lightInfo[3u].type == 1)
            {
                _487 = normalize(-lightInfo.lightInfo[3u].direction);
                _488 = 1.0;
            }
            else
            {
                highp vec3 _483;
                highp float _484;
                if (lightInfo.lightInfo[3u].type == 2)
                {
                    highp vec3 _465 = lightInfo.lightInfo[3u].posWorld - in_var_POSITION0;
                    highp vec3 _466 = normalize(_465);
                    highp float _467 = 1.0 / lightInfo.lightInfo[3u].falloffRadius;
                    highp float _468 = dot(_465, _465);
                    highp float _470 = (_468 * _467) * _467;
                    highp float _472 = (-_470) * _470 + 1.0;
                    highp float _473 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
                    _483 = _466;
                    _484 = ((_473 * _473) / (isnan(9.9999997473787516355514526367188e-05) ? _468 : (isnan(_468) ? 9.9999997473787516355514526367188e-05 : max(_468, 9.9999997473787516355514526367188e-05)))) * smoothstep(lightInfo.lightInfo[3u].inOutCutoff.y, lightInfo.lightInfo[3u].inOutCutoff.x, dot(lightInfo.lightInfo[3u].direction, -_466));
                }
                else
                {
                    highp vec3 _463;
                    highp float _464;
                    if (lightInfo.lightInfo[3u].type == 3)
                    {
                        highp vec3 _451 = lightInfo.lightInfo[3u].posWorld - in_var_POSITION0;
                        highp float _453 = 1.0 / lightInfo.lightInfo[3u].falloffRadius;
                        highp float _454 = dot(_451, _451);
                        highp float _456 = (_454 * _453) * _453;
                        highp float _458 = (-_456) * _456 + 1.0;
                        highp float _459 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
                        _463 = normalize(_451);
                        _464 = (_459 * _459) / (isnan(9.9999997473787516355514526367188e-05) ? _454 : (isnan(_454) ? 9.9999997473787516355514526367188e-05 : max(_454, 9.9999997473787516355514526367188e-05)));
                    }
                    else
                    {
                        _463 = _414;
                        _464 = 1.0;
                    }
                    _483 = _463;
                    _484 = _464;
                }
                _487 = _483;
                _488 = _484;
            }
            highp float _491 = dot(_128, _487);
            highp float _493 = dot(normalize(_487 + _132), _128);
            _503 = _487;
            _504 = (((materialInfo.materialInfo.albedoFactor.xyz * lightInfo.lightInfo[3u].color) * (pow(isnan(_493) ? 0.0 : (isnan(0.0) ? _493 : max(0.0, _493)), 16.0) * 0.5 + (isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0))))) * _488) * lightInfo.lightInfo[3u].intensity;
        }
        _506 = _503;
        _507 = _415 + _504;
    }
    else
    {
        _506 = _414;
        _507 = _415;
    }
    highp vec3 _598;
    highp vec3 _599;
    SPIRV_CROSS_BRANCH
    if (lightInfo.lightInfo[4u].type >= 0)
    {
        highp vec3 _595;
        highp vec3 _596;
        SPIRV_CROSS_BRANCH
        if (lightInfo.lightInfo[4u].type == 0)
        {
            _595 = _506;
            _596 = (materialInfo.materialInfo.albedoFactor.xyz * _140) * lightInfo.lightInfo[4u].color;
        }
        else
        {
            highp vec3 _579;
            highp float _580;
            SPIRV_CROSS_BRANCH
            if (lightInfo.lightInfo[4u].type == 1)
            {
                _579 = normalize(-lightInfo.lightInfo[4u].direction);
                _580 = 1.0;
            }
            else
            {
                highp vec3 _575;
                highp float _576;
                if (lightInfo.lightInfo[4u].type == 2)
                {
                    highp vec3 _557 = lightInfo.lightInfo[4u].posWorld - in_var_POSITION0;
                    highp vec3 _558 = normalize(_557);
                    highp float _559 = 1.0 / lightInfo.lightInfo[4u].falloffRadius;
                    highp float _560 = dot(_557, _557);
                    highp float _562 = (_560 * _559) * _559;
                    highp float _564 = (-_562) * _562 + 1.0;
                    highp float _565 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
                    _575 = _558;
                    _576 = ((_565 * _565) / (isnan(9.9999997473787516355514526367188e-05) ? _560 : (isnan(_560) ? 9.9999997473787516355514526367188e-05 : max(_560, 9.9999997473787516355514526367188e-05)))) * smoothstep(lightInfo.lightInfo[4u].inOutCutoff.y, lightInfo.lightInfo[4u].inOutCutoff.x, dot(lightInfo.lightInfo[4u].direction, -_558));
                }
                else
                {
                    highp vec3 _555;
                    highp float _556;
                    if (lightInfo.lightInfo[4u].type == 3)
                    {
                        highp vec3 _543 = lightInfo.lightInfo[4u].posWorld - in_var_POSITION0;
                        highp float _545 = 1.0 / lightInfo.lightInfo[4u].falloffRadius;
                        highp float _546 = dot(_543, _543);
                        highp float _548 = (_546 * _545) * _545;
                        highp float _550 = (-_548) * _548 + 1.0;
                        highp float _551 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
                        _555 = normalize(_543);
                        _556 = (_551 * _551) / (isnan(9.9999997473787516355514526367188e-05) ? _546 : (isnan(_546) ? 9.9999997473787516355514526367188e-05 : max(_546, 9.9999997473787516355514526367188e-05)));
                    }
                    else
                    {
                        _555 = _506;
                        _556 = 1.0;
                    }
                    _575 = _555;
                    _576 = _556;
                }
                _579 = _575;
                _580 = _576;
            }
            highp float _583 = dot(_128, _579);
            highp float _585 = dot(normalize(_579 + _132), _128);
            _595 = _579;
            _596 = (((materialInfo.materialInfo.albedoFactor.xyz * lightInfo.lightInfo[4u].color) * (pow(isnan(_585) ? 0.0 : (isnan(0.0) ? _585 : max(0.0, _585)), 16.0) * 0.5 + (isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0))))) * _580) * lightInfo.lightInfo[4u].intensity;
        }
        _598 = _595;
        _599 = _507 + _596;
    }
    else
    {
        _598 = _506;
        _599 = _507;
    }
    highp vec3 _689;
    SPIRV_CROSS_BRANCH
    if (lightInfo.lightInfo[5u].type >= 0)
    {
        highp vec3 _687;
        SPIRV_CROSS_BRANCH
        if (lightInfo.lightInfo[5u].type == 0)
        {
            _687 = (materialInfo.materialInfo.albedoFactor.xyz * _140) * lightInfo.lightInfo[5u].color;
        }
        else
        {
            highp vec3 _671;
            highp float _672;
            SPIRV_CROSS_BRANCH
            if (lightInfo.lightInfo[5u].type == 1)
            {
                _671 = normalize(-lightInfo.lightInfo[5u].direction);
                _672 = 1.0;
            }
            else
            {
                highp vec3 _667;
                highp float _668;
                if (lightInfo.lightInfo[5u].type == 2)
                {
                    highp vec3 _649 = lightInfo.lightInfo[5u].posWorld - in_var_POSITION0;
                    highp vec3 _650 = normalize(_649);
                    highp float _651 = 1.0 / lightInfo.lightInfo[5u].falloffRadius;
                    highp float _652 = dot(_649, _649);
                    highp float _654 = (_652 * _651) * _651;
                    highp float _656 = (-_654) * _654 + 1.0;
                    highp float _657 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
                    _667 = _650;
                    _668 = ((_657 * _657) / (isnan(9.9999997473787516355514526367188e-05) ? _652 : (isnan(_652) ? 9.9999997473787516355514526367188e-05 : max(_652, 9.9999997473787516355514526367188e-05)))) * smoothstep(lightInfo.lightInfo[5u].inOutCutoff.y, lightInfo.lightInfo[5u].inOutCutoff.x, dot(lightInfo.lightInfo[5u].direction, -_650));
                }
                else
                {
                    highp vec3 _647;
                    highp float _648;
                    if (lightInfo.lightInfo[5u].type == 3)
                    {
                        highp vec3 _635 = lightInfo.lightInfo[5u].posWorld - in_var_POSITION0;
                        highp float _637 = 1.0 / lightInfo.lightInfo[5u].falloffRadius;
                        highp float _638 = dot(_635, _635);
                        highp float _640 = (_638 * _637) * _637;
                        highp float _642 = (-_640) * _640 + 1.0;
                        highp float _643 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
                        _647 = normalize(_635);
                        _648 = (_643 * _643) / (isnan(9.9999997473787516355514526367188e-05) ? _638 : (isnan(_638) ? 9.9999997473787516355514526367188e-05 : max(_638, 9.9999997473787516355514526367188e-05)));
                    }
                    else
                    {
                        _647 = _598;
                        _648 = 1.0;
                    }
                    _667 = _647;
                    _668 = _648;
                }
                _671 = _667;
                _672 = _668;
            }
            highp float _675 = dot(_128, _671);
            highp float _677 = dot(normalize(_671 + _132), _128);
            _687 = (((materialInfo.materialInfo.albedoFactor.xyz * lightInfo.lightInfo[5u].color) * (pow(isnan(_677) ? 0.0 : (isnan(0.0) ? _677 : max(0.0, _677)), 16.0) * 0.5 + (isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0))))) * _672) * lightInfo.lightInfo[5u].intensity;
        }
        _689 = _599 + _687;
    }
    else
    {
        _689 = _599;
    }
    out_var_SV_Target0 = vec4(_689, materialInfo.materialInfo.albedoFactor.w);
}

