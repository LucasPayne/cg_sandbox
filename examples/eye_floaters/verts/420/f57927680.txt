#version 420
layout(triangles, equal_spacing, ccw) in;

// option for generating comparison figures between quadratic and linear
uniform int linear_mode;

in TCS_OUT {
    vec3 position;
    float value;
} tes_in[];

out TES_OUT {
    vec2 plane_position;
    vec3 barycentric;
    float value;
} tes_out;

// Basis functions
float p0(in float x, in float y, in float z)
{
    return x - 2*x*y - 2*x*z;
}
float p1(in float x, in float y, in float z)
{
    return y - 2*y*z - 2*y*x;
}
float p2(in float x, in float y, in float z)
{
    return z - 2*z*x - 2*z*y;
}
float p3(in float x, in float y, in float z)
{
    return 4*x*y;
}
float p4(in float x, in float y, in float z)
{
    return 4*y*z;
}
float p5(in float x, in float y, in float z)
{
    return 4*z*x;
}

void main(void)
{
    float x = gl_TessCoord.x;
    float y = gl_TessCoord.y;
    float z = gl_TessCoord.z;
    tes_out.barycentric = vec3(x,y,z);


    float p[6];
    if (linear_mode == 1) {
        p[0] = x;
        p[1] = y;
        p[2] = z;
        p[3] = 0;
        p[4] = 0;
        p[5] = 0;
    } else {
        p[0] = p0(x,y,z);
        p[1] = p1(x,y,z);
        p[2] = p2(x,y,z);
        p[3] = p3(x,y,z);
        p[4] = p4(x,y,z);
        p[5] = p5(x,y,z);
    }
    vec2 plane_pos =   x*tes_in[0].position.xz
                     + y*tes_in[1].position.xz
                     + z*tes_in[2].position.xz;
    float value = 0.f;
    for (int i = 0; i < 6; i++) {
        value += tes_in[i].value * p[i];
    }
    tes_out.value = value;
    tes_out.plane_position = plane_pos;

    // Visualizing error
    gl_Position = vec4(1.25 * vec2(0.61 * 0.5*(plane_pos.x-1), 0.5*(plane_pos.y-1)) + vec2(-0.1, 0.5), 0,1);
    // Computing error
    // gl_Position = vec4(plane_pos, 0,1);
}

