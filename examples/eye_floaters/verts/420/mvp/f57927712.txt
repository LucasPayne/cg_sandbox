#version 420
layout(triangles, equal_spacing, ccw) in;

// option for generating comparison figures between quadratic and linear
uniform int linear_mode;

in TCS_OUT {
    vec3 position;
    float value;
} tes_in[];

out TES_OUT {
    vec3 barycentric;
    vec3 normal;
} tes_out;

uniform mat4x4 mvp_matrix;

// Basis functions
float p0(in float x, in float y, in float z)
{
    return x - 2*x*y - 2*x*z;
}
float p1(in float x, in float y, in float z)
{
    return y - 2*y*z - 2*y*x;
}
float p2(in float x, in float y, in float z)
{
    return z - 2*z*x - 2*z*y;
}
float p3(in float x, in float y, in float z)
{
    return 4*x*y;
}
float p4(in float x, in float y, in float z)
{
    return 4*y*z;
}
float p5(in float x, in float y, in float z)
{
    return 4*z*x;
}

void main(void)
{
    float x = gl_TessCoord.x;
    float y = gl_TessCoord.y;
    float z = gl_TessCoord.z;
    tes_out.barycentric = vec3(x,y,z);


    float p[6];
    if (linear_mode == 1) {
        p[0] = x;
        p[1] = y;
        p[2] = z;
        p[3] = 0;
        p[4] = 0;
        p[5] = 0;
    } else {
        p[0] = p0(x,y,z);
        p[1] = p1(x,y,z);
        p[2] = p2(x,y,z);
        p[3] = p3(x,y,z);
        p[4] = p4(x,y,z);
        p[5] = p5(x,y,z);
    }
    vec2 plane_pos =   x*tes_in[0].position.xz
                     + y*tes_in[1].position.xz
                     + z*tes_in[2].position.xz;
    float y_pos = 0.f;
    for (int i = 0; i < 6; i++) {
        y_pos += tes_in[i].value * p[i];
    }
    vec3 pos = vec3(plane_pos.x, y_pos, plane_pos.y);
    gl_Position = mvp_matrix * vec4(pos, 1);

    // Approximate the normal.
    // (---should do this analytically.)
    float epsilon = 0.01;
    
    // Tangent 1 (x)
    if (linear_mode == 1) {
        p[0] = x+epsilon;
        p[1] = y;
        p[2] = z-epsilon;
        p[3] = 0;
        p[4] = 0;
        p[5] = 0;
    } else {
        p[0] = p0(x+epsilon,y,z-epsilon);
        p[1] = p1(x+epsilon,y,z-epsilon);
        p[2] = p2(x+epsilon,y,z-epsilon);
        p[3] = p3(x+epsilon,y,z-epsilon);
        p[4] = p4(x+epsilon,y,z-epsilon);
        p[5] = p5(x+epsilon,y,z-epsilon);
    }
    float tangent_1_y = 0.f;
    for (int i = 0; i < 6; i++) {
        tangent_1_y += tes_in[i].value * p[i];
    }
    vec2 tangent_1_plane_pos =   (x+epsilon)*tes_in[0].position.xz
                               + y*tes_in[1].position.xz
                               + (z-epsilon)*tes_in[2].position.xz;
    vec3 tangent_1_pos = vec3(tangent_1_plane_pos.x, tangent_1_y, tangent_1_plane_pos.y);
    
    // Tangent 2 (y)
    if (linear_mode == 1) {
        p[0] = x;
        p[1] = y+epsilon;
        p[2] = z-epsilon;
        p[3] = 0;
        p[4] = 0;
        p[5] = 0;
    } else {
        p[0] = p0(x,y+epsilon,z-epsilon);
        p[1] = p1(x,y+epsilon,z-epsilon);
        p[2] = p2(x,y+epsilon,z-epsilon);
        p[3] = p3(x,y+epsilon,z-epsilon);
        p[4] = p4(x,y+epsilon,z-epsilon);
        p[5] = p5(x,y+epsilon,z-epsilon);
    }
    float tangent_2_y = 0.f;
    for (int i = 0; i < 6; i++) {
        tangent_2_y += tes_in[i].value * p[i];
    }
    vec2 tangent_2_plane_pos =   x*tes_in[0].position.xz
                               + (y+epsilon)*tes_in[1].position.xz
                               + (z-epsilon)*tes_in[2].position.xz;
    vec3 tangent_2_pos = vec3(tangent_2_plane_pos.x, tangent_2_y, tangent_2_plane_pos.y);

    // Normal approximation
    tes_out.normal = normalize(cross(tangent_1_pos - pos, tangent_2_pos - pos));
}

