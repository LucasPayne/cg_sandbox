#include "interactive_graphics_context.h"
namespace IGC {

// Input events generated by the platform code need to be dispatched to relevant objects (Contexts),
// which are made globally available. These *_event functions are the entry point for input, and are
// called by platform code.
std::vector<Context *> g_contexts;
void keyboard_event(KeyboardEvent e)
{
    for (Context *context : g_contexts) {
        for (Callbacks *callbacks : context->m_callbacks) {
            callbacks->keyboard_handler(e);
        }
    }
}
void mouse_event(MouseEvent e)
{
    for (Context *context : g_contexts) {
        for (Callbacks *callbacks : context->m_callbacks) {
            callbacks->mouse_handler(e);
        }
    }
}

Context::Context(const std::string &name)
{
    g_contexts.push_back(this);
    Platform::WindowReference window = Platform::create_window(name);
}

void Context::add_callbacks(Callbacks &callbacks)
{
    m_callbacks.push_back(&callbacks);
}
void Context::enter_loop()
{
    
    for (Callbacks *callbacks : m_callbacks) {
        callbacks->loop();
    }
}
void Context::close()
{
    
}


} // end namespace IGC

