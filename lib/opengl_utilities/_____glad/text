
void glCullFace(GLenum mode) {
    glad_glCullFace(GLenum mode);
    gl_check_error();
}
void glFrontFace(GLenum mode) {
    glad_glFrontFace(GLenum mode);
    gl_check_error();
}
void glHint(GLenum target, GLenum mode) {
    glad_glHint(GLenum target, GLenum mode);
    gl_check_error();
}
void glLineWidth(GLfloat width) {
    glad_glLineWidth(GLfloat width);
    gl_check_error();
}
void glPointSize(GLfloat size) {
    glad_glPointSize(GLfloat size);
    gl_check_error();
}
void glPolygonMode(GLenum face, GLenum mode) {
    glad_glPolygonMode(GLenum face, GLenum mode);
    gl_check_error();
}
void glScissor(GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glScissor(GLint x, GLint y, GLsizei width, GLsizei height);
    gl_check_error();
}
void glTexParameterf(GLenum target, GLenum pname, GLfloat param) {
    glad_glTexParameterf(GLenum target, GLenum pname, GLfloat param);
    gl_check_error();
}
void glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params) {
    glad_glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glTexParameteri(GLenum target, GLenum pname, GLint param) {
    glad_glTexParameteri(GLenum target, GLenum pname, GLint param);
    gl_check_error();
}
void glTexParameteriv(GLenum target, GLenum pname, const GLint *params) {
    glad_glTexParameteriv(GLenum target, GLenum pname, const GLint *params);
    gl_check_error();
}
void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) {
    glad_glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) {
    glad_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glDrawBuffer(GLenum buf) {
    glad_glDrawBuffer(GLenum buf);
    gl_check_error();
}
void glClear(GLbitfield mask) {
    glad_glClear(GLbitfield mask);
    gl_check_error();
}
void glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    glad_glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
    gl_check_error();
}
void glClearStencil(GLint s) {
    glad_glClearStencil(GLint s);
    gl_check_error();
}
void glClearDepth(GLdouble depth) {
    glad_glClearDepth(GLdouble depth);
    gl_check_error();
}
void glStencilMask(GLuint mask) {
    glad_glStencilMask(GLuint mask);
    gl_check_error();
}
void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
    glad_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
    gl_check_error();
}
void glDepthMask(GLboolean flag) {
    glad_glDepthMask(GLboolean flag);
    gl_check_error();
}
void glDisable(GLenum cap) {
    glad_glDisable(GLenum cap);
    gl_check_error();
}
void glEnable(GLenum cap) {
    glad_glEnable(GLenum cap);
    gl_check_error();
}
void glFinish(void) {
    glad_glFinish(void);
    gl_check_error();
}
void glFlush(void) {
    glad_glFlush(void);
    gl_check_error();
}
void glBlendFunc(GLenum sfactor, GLenum dfactor) {
    glad_glBlendFunc(GLenum sfactor, GLenum dfactor);
    gl_check_error();
}
void glLogicOp(GLenum opcode) {
    glad_glLogicOp(GLenum opcode);
    gl_check_error();
}
void glStencilFunc(GLenum func, GLint ref, GLuint mask) {
    glad_glStencilFunc(GLenum func, GLint ref, GLuint mask);
    gl_check_error();
}
void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass) {
    glad_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass);
    gl_check_error();
}
void glDepthFunc(GLenum func) {
    glad_glDepthFunc(GLenum func);
    gl_check_error();
}
void glPixelStoref(GLenum pname, GLfloat param) {
    glad_glPixelStoref(GLenum pname, GLfloat param);
    gl_check_error();
}
void glPixelStorei(GLenum pname, GLint param) {
    glad_glPixelStorei(GLenum pname, GLint param);
    gl_check_error();
}
void glReadBuffer(GLenum src) {
    glad_glReadBuffer(GLenum src);
    gl_check_error();
}
void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels) {
    glad_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
    gl_check_error();
}
void glGetBooleanv(GLenum pname, GLboolean *data) {
    glad_glGetBooleanv(GLenum pname, GLboolean *data);
    gl_check_error();
}
void glGetDoublev(GLenum pname, GLdouble *data) {
    glad_glGetDoublev(GLenum pname, GLdouble *data);
    gl_check_error();
}
GLenum glGetError(void) {
    auto val = glad_glGetError(void);
    gl_check_error();
    return val;
}
void glGetFloatv(GLenum pname, GLfloat *data) {
    glad_glGetFloatv(GLenum pname, GLfloat *data);
    gl_check_error();
}
void glGetIntegerv(GLenum pname, GLint *data) {
    glad_glGetIntegerv(GLenum pname, GLint *data);
    gl_check_error();
}
const GLubyte * glGetString(GLenum name) {
    auto val = glad_glGetString(GLenum name);
    gl_check_error();
    return val;
}
void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void *pixels) {
    glad_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
    gl_check_error();
}
void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params) {
    glad_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetTexParameteriv(GLenum target, GLenum pname, GLint *params) {
    glad_glGetTexParameteriv(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params) {
    glad_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params) {
    glad_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params);
    gl_check_error();
}
GLboolean glIsEnabled(GLenum cap) {
    auto val = glad_glIsEnabled(GLenum cap);
    gl_check_error();
    return val;
}
void glDepthRange(GLdouble n, GLdouble f) {
    glad_glDepthRange(GLdouble n, GLdouble f);
    gl_check_error();
}
void glViewport(GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glViewport(GLint x, GLint y, GLsizei width, GLsizei height);
    gl_check_error();
}
void glNewList(GLuint list, GLenum mode) {
    glad_glNewList(GLuint list, GLenum mode);
    gl_check_error();
}
void glEndList(void) {
    glad_glEndList(void);
    gl_check_error();
}
void glCallList(GLuint list) {
    glad_glCallList(GLuint list);
    gl_check_error();
}
void glCallLists(GLsizei n, GLenum type, const void *lists) {
    glad_glCallLists(GLsizei n, GLenum type, const void *lists);
    gl_check_error();
}
void glDeleteLists(GLuint list, GLsizei range) {
    glad_glDeleteLists(GLuint list, GLsizei range);
    gl_check_error();
}
GLuint glGenLists(GLsizei range) {
    auto val = glad_glGenLists(GLsizei range);
    gl_check_error();
    return val;
}
void glListBase(GLuint base) {
    glad_glListBase(GLuint base);
    gl_check_error();
}
void glBegin(GLenum mode) {
    glad_glBegin(GLenum mode);
    gl_check_error();
}
void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap) {
    glad_glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
    gl_check_error();
}
void glColor3b(GLbyte red, GLbyte green, GLbyte blue) {
    glad_glColor3b(GLbyte red, GLbyte green, GLbyte blue);
    gl_check_error();
}
void glColor3bv(const GLbyte *v) {
    glad_glColor3bv(const GLbyte *v);
    gl_check_error();
}
void glColor3d(GLdouble red, GLdouble green, GLdouble blue) {
    glad_glColor3d(GLdouble red, GLdouble green, GLdouble blue);
    gl_check_error();
}
void glColor3dv(const GLdouble *v) {
    glad_glColor3dv(const GLdouble *v);
    gl_check_error();
}
void glColor3f(GLfloat red, GLfloat green, GLfloat blue) {
    glad_glColor3f(GLfloat red, GLfloat green, GLfloat blue);
    gl_check_error();
}
void glColor3fv(const GLfloat *v) {
    glad_glColor3fv(const GLfloat *v);
    gl_check_error();
}
void glColor3i(GLint red, GLint green, GLint blue) {
    glad_glColor3i(GLint red, GLint green, GLint blue);
    gl_check_error();
}
void glColor3iv(const GLint *v) {
    glad_glColor3iv(const GLint *v);
    gl_check_error();
}
void glColor3s(GLshort red, GLshort green, GLshort blue) {
    glad_glColor3s(GLshort red, GLshort green, GLshort blue);
    gl_check_error();
}
void glColor3sv(const GLshort *v) {
    glad_glColor3sv(const GLshort *v);
    gl_check_error();
}
void glColor3ub(GLubyte red, GLubyte green, GLubyte blue) {
    glad_glColor3ub(GLubyte red, GLubyte green, GLubyte blue);
    gl_check_error();
}
void glColor3ubv(const GLubyte *v) {
    glad_glColor3ubv(const GLubyte *v);
    gl_check_error();
}
void glColor3ui(GLuint red, GLuint green, GLuint blue) {
    glad_glColor3ui(GLuint red, GLuint green, GLuint blue);
    gl_check_error();
}
void glColor3uiv(const GLuint *v) {
    glad_glColor3uiv(const GLuint *v);
    gl_check_error();
}
void glColor3us(GLushort red, GLushort green, GLushort blue) {
    glad_glColor3us(GLushort red, GLushort green, GLushort blue);
    gl_check_error();
}
void glColor3usv(const GLushort *v) {
    glad_glColor3usv(const GLushort *v);
    gl_check_error();
}
void glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) {
    glad_glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
    gl_check_error();
}
void glColor4bv(const GLbyte *v) {
    glad_glColor4bv(const GLbyte *v);
    gl_check_error();
}
void glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) {
    glad_glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
    gl_check_error();
}
void glColor4dv(const GLdouble *v) {
    glad_glColor4dv(const GLdouble *v);
    gl_check_error();
}
void glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    glad_glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
    gl_check_error();
}
void glColor4fv(const GLfloat *v) {
    glad_glColor4fv(const GLfloat *v);
    gl_check_error();
}
void glColor4i(GLint red, GLint green, GLint blue, GLint alpha) {
    glad_glColor4i(GLint red, GLint green, GLint blue, GLint alpha);
    gl_check_error();
}
void glColor4iv(const GLint *v) {
    glad_glColor4iv(const GLint *v);
    gl_check_error();
}
void glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha) {
    glad_glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha);
    gl_check_error();
}
void glColor4sv(const GLshort *v) {
    glad_glColor4sv(const GLshort *v);
    gl_check_error();
}
void glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) {
    glad_glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
    gl_check_error();
}
void glColor4ubv(const GLubyte *v) {
    glad_glColor4ubv(const GLubyte *v);
    gl_check_error();
}
void glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha) {
    glad_glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);
    gl_check_error();
}
void glColor4uiv(const GLuint *v) {
    glad_glColor4uiv(const GLuint *v);
    gl_check_error();
}
void glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha) {
    glad_glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);
    gl_check_error();
}
void glColor4usv(const GLushort *v) {
    glad_glColor4usv(const GLushort *v);
    gl_check_error();
}
void glEdgeFlag(GLboolean flag) {
    glad_glEdgeFlag(GLboolean flag);
    gl_check_error();
}
void glEdgeFlagv(const GLboolean *flag) {
    glad_glEdgeFlagv(const GLboolean *flag);
    gl_check_error();
}
void glEnd(void) {
    glad_glEnd(void);
    gl_check_error();
}
void glIndexd(GLdouble c) {
    glad_glIndexd(GLdouble c);
    gl_check_error();
}
void glIndexdv(const GLdouble *c) {
    glad_glIndexdv(const GLdouble *c);
    gl_check_error();
}
void glIndexf(GLfloat c) {
    glad_glIndexf(GLfloat c);
    gl_check_error();
}
void glIndexfv(const GLfloat *c) {
    glad_glIndexfv(const GLfloat *c);
    gl_check_error();
}
void glIndexi(GLint c) {
    glad_glIndexi(GLint c);
    gl_check_error();
}
void glIndexiv(const GLint *c) {
    glad_glIndexiv(const GLint *c);
    gl_check_error();
}
void glIndexs(GLshort c) {
    glad_glIndexs(GLshort c);
    gl_check_error();
}
void glIndexsv(const GLshort *c) {
    glad_glIndexsv(const GLshort *c);
    gl_check_error();
}
void glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz) {
    glad_glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz);
    gl_check_error();
}
void glNormal3bv(const GLbyte *v) {
    glad_glNormal3bv(const GLbyte *v);
    gl_check_error();
}
void glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz) {
    glad_glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz);
    gl_check_error();
}
void glNormal3dv(const GLdouble *v) {
    glad_glNormal3dv(const GLdouble *v);
    gl_check_error();
}
void glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz) {
    glad_glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz);
    gl_check_error();
}
void glNormal3fv(const GLfloat *v) {
    glad_glNormal3fv(const GLfloat *v);
    gl_check_error();
}
void glNormal3i(GLint nx, GLint ny, GLint nz) {
    glad_glNormal3i(GLint nx, GLint ny, GLint nz);
    gl_check_error();
}
void glNormal3iv(const GLint *v) {
    glad_glNormal3iv(const GLint *v);
    gl_check_error();
}
void glNormal3s(GLshort nx, GLshort ny, GLshort nz) {
    glad_glNormal3s(GLshort nx, GLshort ny, GLshort nz);
    gl_check_error();
}
void glNormal3sv(const GLshort *v) {
    glad_glNormal3sv(const GLshort *v);
    gl_check_error();
}
void glRasterPos2d(GLdouble x, GLdouble y) {
    glad_glRasterPos2d(GLdouble x, GLdouble y);
    gl_check_error();
}
void glRasterPos2dv(const GLdouble *v) {
    glad_glRasterPos2dv(const GLdouble *v);
    gl_check_error();
}
void glRasterPos2f(GLfloat x, GLfloat y) {
    glad_glRasterPos2f(GLfloat x, GLfloat y);
    gl_check_error();
}
void glRasterPos2fv(const GLfloat *v) {
    glad_glRasterPos2fv(const GLfloat *v);
    gl_check_error();
}
void glRasterPos2i(GLint x, GLint y) {
    glad_glRasterPos2i(GLint x, GLint y);
    gl_check_error();
}
void glRasterPos2iv(const GLint *v) {
    glad_glRasterPos2iv(const GLint *v);
    gl_check_error();
}
void glRasterPos2s(GLshort x, GLshort y) {
    glad_glRasterPos2s(GLshort x, GLshort y);
    gl_check_error();
}
void glRasterPos2sv(const GLshort *v) {
    glad_glRasterPos2sv(const GLshort *v);
    gl_check_error();
}
void glRasterPos3d(GLdouble x, GLdouble y, GLdouble z) {
    glad_glRasterPos3d(GLdouble x, GLdouble y, GLdouble z);
    gl_check_error();
}
void glRasterPos3dv(const GLdouble *v) {
    glad_glRasterPos3dv(const GLdouble *v);
    gl_check_error();
}
void glRasterPos3f(GLfloat x, GLfloat y, GLfloat z) {
    glad_glRasterPos3f(GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glRasterPos3fv(const GLfloat *v) {
    glad_glRasterPos3fv(const GLfloat *v);
    gl_check_error();
}
void glRasterPos3i(GLint x, GLint y, GLint z) {
    glad_glRasterPos3i(GLint x, GLint y, GLint z);
    gl_check_error();
}
void glRasterPos3iv(const GLint *v) {
    glad_glRasterPos3iv(const GLint *v);
    gl_check_error();
}
void glRasterPos3s(GLshort x, GLshort y, GLshort z) {
    glad_glRasterPos3s(GLshort x, GLshort y, GLshort z);
    gl_check_error();
}
void glRasterPos3sv(const GLshort *v) {
    glad_glRasterPos3sv(const GLshort *v);
    gl_check_error();
}
void glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    gl_check_error();
}
void glRasterPos4dv(const GLdouble *v) {
    glad_glRasterPos4dv(const GLdouble *v);
    gl_check_error();
}
void glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    gl_check_error();
}
void glRasterPos4fv(const GLfloat *v) {
    glad_glRasterPos4fv(const GLfloat *v);
    gl_check_error();
}
void glRasterPos4i(GLint x, GLint y, GLint z, GLint w) {
    glad_glRasterPos4i(GLint x, GLint y, GLint z, GLint w);
    gl_check_error();
}
void glRasterPos4iv(const GLint *v) {
    glad_glRasterPos4iv(const GLint *v);
    gl_check_error();
}
void glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w) {
    glad_glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
    gl_check_error();
}
void glRasterPos4sv(const GLshort *v) {
    glad_glRasterPos4sv(const GLshort *v);
    gl_check_error();
}
void glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) {
    glad_glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
    gl_check_error();
}
void glRectdv(const GLdouble *v1, const GLdouble *v2) {
    glad_glRectdv(const GLdouble *v1, const GLdouble *v2);
    gl_check_error();
}
void glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) {
    glad_glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
    gl_check_error();
}
void glRectfv(const GLfloat *v1, const GLfloat *v2) {
    glad_glRectfv(const GLfloat *v1, const GLfloat *v2);
    gl_check_error();
}
void glRecti(GLint x1, GLint y1, GLint x2, GLint y2) {
    glad_glRecti(GLint x1, GLint y1, GLint x2, GLint y2);
    gl_check_error();
}
void glRectiv(const GLint *v1, const GLint *v2) {
    glad_glRectiv(const GLint *v1, const GLint *v2);
    gl_check_error();
}
void glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2) {
    glad_glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
    gl_check_error();
}
void glRectsv(const GLshort *v1, const GLshort *v2) {
    glad_glRectsv(const GLshort *v1, const GLshort *v2);
    gl_check_error();
}
void glTexCoord1d(GLdouble s) {
    glad_glTexCoord1d(GLdouble s);
    gl_check_error();
}
void glTexCoord1dv(const GLdouble *v) {
    glad_glTexCoord1dv(const GLdouble *v);
    gl_check_error();
}
void glTexCoord1f(GLfloat s) {
    glad_glTexCoord1f(GLfloat s);
    gl_check_error();
}
void glTexCoord1fv(const GLfloat *v) {
    glad_glTexCoord1fv(const GLfloat *v);
    gl_check_error();
}
void glTexCoord1i(GLint s) {
    glad_glTexCoord1i(GLint s);
    gl_check_error();
}
void glTexCoord1iv(const GLint *v) {
    glad_glTexCoord1iv(const GLint *v);
    gl_check_error();
}
void glTexCoord1s(GLshort s) {
    glad_glTexCoord1s(GLshort s);
    gl_check_error();
}
void glTexCoord1sv(const GLshort *v) {
    glad_glTexCoord1sv(const GLshort *v);
    gl_check_error();
}
void glTexCoord2d(GLdouble s, GLdouble t) {
    glad_glTexCoord2d(GLdouble s, GLdouble t);
    gl_check_error();
}
void glTexCoord2dv(const GLdouble *v) {
    glad_glTexCoord2dv(const GLdouble *v);
    gl_check_error();
}
void glTexCoord2f(GLfloat s, GLfloat t) {
    glad_glTexCoord2f(GLfloat s, GLfloat t);
    gl_check_error();
}
void glTexCoord2fv(const GLfloat *v) {
    glad_glTexCoord2fv(const GLfloat *v);
    gl_check_error();
}
void glTexCoord2i(GLint s, GLint t) {
    glad_glTexCoord2i(GLint s, GLint t);
    gl_check_error();
}
void glTexCoord2iv(const GLint *v) {
    glad_glTexCoord2iv(const GLint *v);
    gl_check_error();
}
void glTexCoord2s(GLshort s, GLshort t) {
    glad_glTexCoord2s(GLshort s, GLshort t);
    gl_check_error();
}
void glTexCoord2sv(const GLshort *v) {
    glad_glTexCoord2sv(const GLshort *v);
    gl_check_error();
}
void glTexCoord3d(GLdouble s, GLdouble t, GLdouble r) {
    glad_glTexCoord3d(GLdouble s, GLdouble t, GLdouble r);
    gl_check_error();
}
void glTexCoord3dv(const GLdouble *v) {
    glad_glTexCoord3dv(const GLdouble *v);
    gl_check_error();
}
void glTexCoord3f(GLfloat s, GLfloat t, GLfloat r) {
    glad_glTexCoord3f(GLfloat s, GLfloat t, GLfloat r);
    gl_check_error();
}
void glTexCoord3fv(const GLfloat *v) {
    glad_glTexCoord3fv(const GLfloat *v);
    gl_check_error();
}
void glTexCoord3i(GLint s, GLint t, GLint r) {
    glad_glTexCoord3i(GLint s, GLint t, GLint r);
    gl_check_error();
}
void glTexCoord3iv(const GLint *v) {
    glad_glTexCoord3iv(const GLint *v);
    gl_check_error();
}
void glTexCoord3s(GLshort s, GLshort t, GLshort r) {
    glad_glTexCoord3s(GLshort s, GLshort t, GLshort r);
    gl_check_error();
}
void glTexCoord3sv(const GLshort *v) {
    glad_glTexCoord3sv(const GLshort *v);
    gl_check_error();
}
void glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
    glad_glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
    gl_check_error();
}
void glTexCoord4dv(const GLdouble *v) {
    glad_glTexCoord4dv(const GLdouble *v);
    gl_check_error();
}
void glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
    glad_glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
    gl_check_error();
}
void glTexCoord4fv(const GLfloat *v) {
    glad_glTexCoord4fv(const GLfloat *v);
    gl_check_error();
}
void glTexCoord4i(GLint s, GLint t, GLint r, GLint q) {
    glad_glTexCoord4i(GLint s, GLint t, GLint r, GLint q);
    gl_check_error();
}
void glTexCoord4iv(const GLint *v) {
    glad_glTexCoord4iv(const GLint *v);
    gl_check_error();
}
void glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q) {
    glad_glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);
    gl_check_error();
}
void glTexCoord4sv(const GLshort *v) {
    glad_glTexCoord4sv(const GLshort *v);
    gl_check_error();
}
void glVertex2d(GLdouble x, GLdouble y) {
    glad_glVertex2d(GLdouble x, GLdouble y);
    gl_check_error();
}
void glVertex2dv(const GLdouble *v) {
    glad_glVertex2dv(const GLdouble *v);
    gl_check_error();
}
void glVertex2f(GLfloat x, GLfloat y) {
    glad_glVertex2f(GLfloat x, GLfloat y);
    gl_check_error();
}
void glVertex2fv(const GLfloat *v) {
    glad_glVertex2fv(const GLfloat *v);
    gl_check_error();
}
void glVertex2i(GLint x, GLint y) {
    glad_glVertex2i(GLint x, GLint y);
    gl_check_error();
}
void glVertex2iv(const GLint *v) {
    glad_glVertex2iv(const GLint *v);
    gl_check_error();
}
void glVertex2s(GLshort x, GLshort y) {
    glad_glVertex2s(GLshort x, GLshort y);
    gl_check_error();
}
void glVertex2sv(const GLshort *v) {
    glad_glVertex2sv(const GLshort *v);
    gl_check_error();
}
void glVertex3d(GLdouble x, GLdouble y, GLdouble z) {
    glad_glVertex3d(GLdouble x, GLdouble y, GLdouble z);
    gl_check_error();
}
void glVertex3dv(const GLdouble *v) {
    glad_glVertex3dv(const GLdouble *v);
    gl_check_error();
}
void glVertex3f(GLfloat x, GLfloat y, GLfloat z) {
    glad_glVertex3f(GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glVertex3fv(const GLfloat *v) {
    glad_glVertex3fv(const GLfloat *v);
    gl_check_error();
}
void glVertex3i(GLint x, GLint y, GLint z) {
    glad_glVertex3i(GLint x, GLint y, GLint z);
    gl_check_error();
}
void glVertex3iv(const GLint *v) {
    glad_glVertex3iv(const GLint *v);
    gl_check_error();
}
void glVertex3s(GLshort x, GLshort y, GLshort z) {
    glad_glVertex3s(GLshort x, GLshort y, GLshort z);
    gl_check_error();
}
void glVertex3sv(const GLshort *v) {
    glad_glVertex3sv(const GLshort *v);
    gl_check_error();
}
void glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    gl_check_error();
}
void glVertex4dv(const GLdouble *v) {
    glad_glVertex4dv(const GLdouble *v);
    gl_check_error();
}
void glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    gl_check_error();
}
void glVertex4fv(const GLfloat *v) {
    glad_glVertex4fv(const GLfloat *v);
    gl_check_error();
}
void glVertex4i(GLint x, GLint y, GLint z, GLint w) {
    glad_glVertex4i(GLint x, GLint y, GLint z, GLint w);
    gl_check_error();
}
void glVertex4iv(const GLint *v) {
    glad_glVertex4iv(const GLint *v);
    gl_check_error();
}
void glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w) {
    glad_glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w);
    gl_check_error();
}
void glVertex4sv(const GLshort *v) {
    glad_glVertex4sv(const GLshort *v);
    gl_check_error();
}
void glClipPlane(GLenum plane, const GLdouble *equation) {
    glad_glClipPlane(GLenum plane, const GLdouble *equation);
    gl_check_error();
}
void glColorMaterial(GLenum face, GLenum mode) {
    glad_glColorMaterial(GLenum face, GLenum mode);
    gl_check_error();
}
void glFogf(GLenum pname, GLfloat param) {
    glad_glFogf(GLenum pname, GLfloat param);
    gl_check_error();
}
void glFogfv(GLenum pname, const GLfloat *params) {
    glad_glFogfv(GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glFogi(GLenum pname, GLint param) {
    glad_glFogi(GLenum pname, GLint param);
    gl_check_error();
}
void glFogiv(GLenum pname, const GLint *params) {
    glad_glFogiv(GLenum pname, const GLint *params);
    gl_check_error();
}
void glLightf(GLenum light, GLenum pname, GLfloat param) {
    glad_glLightf(GLenum light, GLenum pname, GLfloat param);
    gl_check_error();
}
void glLightfv(GLenum light, GLenum pname, const GLfloat *params) {
    glad_glLightfv(GLenum light, GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glLighti(GLenum light, GLenum pname, GLint param) {
    glad_glLighti(GLenum light, GLenum pname, GLint param);
    gl_check_error();
}
void glLightiv(GLenum light, GLenum pname, const GLint *params) {
    glad_glLightiv(GLenum light, GLenum pname, const GLint *params);
    gl_check_error();
}
void glLightModelf(GLenum pname, GLfloat param) {
    glad_glLightModelf(GLenum pname, GLfloat param);
    gl_check_error();
}
void glLightModelfv(GLenum pname, const GLfloat *params) {
    glad_glLightModelfv(GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glLightModeli(GLenum pname, GLint param) {
    glad_glLightModeli(GLenum pname, GLint param);
    gl_check_error();
}
void glLightModeliv(GLenum pname, const GLint *params) {
    glad_glLightModeliv(GLenum pname, const GLint *params);
    gl_check_error();
}
void glLineStipple(GLint factor, GLushort pattern) {
    glad_glLineStipple(GLint factor, GLushort pattern);
    gl_check_error();
}
void glMaterialf(GLenum face, GLenum pname, GLfloat param) {
    glad_glMaterialf(GLenum face, GLenum pname, GLfloat param);
    gl_check_error();
}
void glMaterialfv(GLenum face, GLenum pname, const GLfloat *params) {
    glad_glMaterialfv(GLenum face, GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glMateriali(GLenum face, GLenum pname, GLint param) {
    glad_glMateriali(GLenum face, GLenum pname, GLint param);
    gl_check_error();
}
void glMaterialiv(GLenum face, GLenum pname, const GLint *params) {
    glad_glMaterialiv(GLenum face, GLenum pname, const GLint *params);
    gl_check_error();
}
void glPolygonStipple(const GLubyte *mask) {
    glad_glPolygonStipple(const GLubyte *mask);
    gl_check_error();
}
void glShadeModel(GLenum mode) {
    glad_glShadeModel(GLenum mode);
    gl_check_error();
}
void glTexEnvf(GLenum target, GLenum pname, GLfloat param) {
    glad_glTexEnvf(GLenum target, GLenum pname, GLfloat param);
    gl_check_error();
}
void glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params) {
    glad_glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glTexEnvi(GLenum target, GLenum pname, GLint param) {
    glad_glTexEnvi(GLenum target, GLenum pname, GLint param);
    gl_check_error();
}
void glTexEnviv(GLenum target, GLenum pname, const GLint *params) {
    glad_glTexEnviv(GLenum target, GLenum pname, const GLint *params);
    gl_check_error();
}
void glTexGend(GLenum coord, GLenum pname, GLdouble param) {
    glad_glTexGend(GLenum coord, GLenum pname, GLdouble param);
    gl_check_error();
}
void glTexGendv(GLenum coord, GLenum pname, const GLdouble *params) {
    glad_glTexGendv(GLenum coord, GLenum pname, const GLdouble *params);
    gl_check_error();
}
void glTexGenf(GLenum coord, GLenum pname, GLfloat param) {
    glad_glTexGenf(GLenum coord, GLenum pname, GLfloat param);
    gl_check_error();
}
void glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params) {
    glad_glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glTexGeni(GLenum coord, GLenum pname, GLint param) {
    glad_glTexGeni(GLenum coord, GLenum pname, GLint param);
    gl_check_error();
}
void glTexGeniv(GLenum coord, GLenum pname, const GLint *params) {
    glad_glTexGeniv(GLenum coord, GLenum pname, const GLint *params);
    gl_check_error();
}
void glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer) {
    glad_glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer);
    gl_check_error();
}
void glSelectBuffer(GLsizei size, GLuint *buffer) {
    glad_glSelectBuffer(GLsizei size, GLuint *buffer);
    gl_check_error();
}
GLint glRenderMode(GLenum mode) {
    auto val = glad_glRenderMode(GLenum mode);
    gl_check_error();
    return val;
}
void glInitNames(void) {
    glad_glInitNames(void);
    gl_check_error();
}
void glLoadName(GLuint name) {
    glad_glLoadName(GLuint name);
    gl_check_error();
}
void glPassThrough(GLfloat token) {
    glad_glPassThrough(GLfloat token);
    gl_check_error();
}
void glPopName(void) {
    glad_glPopName(void);
    gl_check_error();
}
void glPushName(GLuint name) {
    glad_glPushName(GLuint name);
    gl_check_error();
}
void glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    glad_glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
    gl_check_error();
}
void glClearIndex(GLfloat c) {
    glad_glClearIndex(GLfloat c);
    gl_check_error();
}
void glIndexMask(GLuint mask) {
    glad_glIndexMask(GLuint mask);
    gl_check_error();
}
void glAccum(GLenum op, GLfloat value) {
    glad_glAccum(GLenum op, GLfloat value);
    gl_check_error();
}
void glPopAttrib(void) {
    glad_glPopAttrib(void);
    gl_check_error();
}
void glPushAttrib(GLbitfield mask) {
    glad_glPushAttrib(GLbitfield mask);
    gl_check_error();
}
void glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points) {
    glad_glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
    gl_check_error();
}
void glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points) {
    glad_glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
    gl_check_error();
}
void glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points) {
    glad_glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
    gl_check_error();
}
void glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points) {
    glad_glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
    gl_check_error();
}
void glMapGrid1d(GLint un, GLdouble u1, GLdouble u2) {
    glad_glMapGrid1d(GLint un, GLdouble u1, GLdouble u2);
    gl_check_error();
}
void glMapGrid1f(GLint un, GLfloat u1, GLfloat u2) {
    glad_glMapGrid1f(GLint un, GLfloat u1, GLfloat u2);
    gl_check_error();
}
void glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) {
    glad_glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
    gl_check_error();
}
void glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) {
    glad_glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
    gl_check_error();
}
void glEvalCoord1d(GLdouble u) {
    glad_glEvalCoord1d(GLdouble u);
    gl_check_error();
}
void glEvalCoord1dv(const GLdouble *u) {
    glad_glEvalCoord1dv(const GLdouble *u);
    gl_check_error();
}
void glEvalCoord1f(GLfloat u) {
    glad_glEvalCoord1f(GLfloat u);
    gl_check_error();
}
void glEvalCoord1fv(const GLfloat *u) {
    glad_glEvalCoord1fv(const GLfloat *u);
    gl_check_error();
}
void glEvalCoord2d(GLdouble u, GLdouble v) {
    glad_glEvalCoord2d(GLdouble u, GLdouble v);
    gl_check_error();
}
void glEvalCoord2dv(const GLdouble *u) {
    glad_glEvalCoord2dv(const GLdouble *u);
    gl_check_error();
}
void glEvalCoord2f(GLfloat u, GLfloat v) {
    glad_glEvalCoord2f(GLfloat u, GLfloat v);
    gl_check_error();
}
void glEvalCoord2fv(const GLfloat *u) {
    glad_glEvalCoord2fv(const GLfloat *u);
    gl_check_error();
}
void glEvalMesh1(GLenum mode, GLint i1, GLint i2) {
    glad_glEvalMesh1(GLenum mode, GLint i1, GLint i2);
    gl_check_error();
}
void glEvalPoint1(GLint i) {
    glad_glEvalPoint1(GLint i);
    gl_check_error();
}
void glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) {
    glad_glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
    gl_check_error();
}
void glEvalPoint2(GLint i, GLint j) {
    glad_glEvalPoint2(GLint i, GLint j);
    gl_check_error();
}
void glAlphaFunc(GLenum func, GLfloat ref) {
    glad_glAlphaFunc(GLenum func, GLfloat ref);
    gl_check_error();
}
void glPixelZoom(GLfloat xfactor, GLfloat yfactor) {
    glad_glPixelZoom(GLfloat xfactor, GLfloat yfactor);
    gl_check_error();
}
void glPixelTransferf(GLenum pname, GLfloat param) {
    glad_glPixelTransferf(GLenum pname, GLfloat param);
    gl_check_error();
}
void glPixelTransferi(GLenum pname, GLint param) {
    glad_glPixelTransferi(GLenum pname, GLint param);
    gl_check_error();
}
void glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values) {
    glad_glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values);
    gl_check_error();
}
void glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values) {
    glad_glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values);
    gl_check_error();
}
void glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values) {
    glad_glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values);
    gl_check_error();
}
void glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) {
    glad_glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
    gl_check_error();
}
void glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {
    glad_glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glGetClipPlane(GLenum plane, GLdouble *equation) {
    glad_glGetClipPlane(GLenum plane, GLdouble *equation);
    gl_check_error();
}
void glGetLightfv(GLenum light, GLenum pname, GLfloat *params) {
    glad_glGetLightfv(GLenum light, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetLightiv(GLenum light, GLenum pname, GLint *params) {
    glad_glGetLightiv(GLenum light, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetMapdv(GLenum target, GLenum query, GLdouble *v) {
    glad_glGetMapdv(GLenum target, GLenum query, GLdouble *v);
    gl_check_error();
}
void glGetMapfv(GLenum target, GLenum query, GLfloat *v) {
    glad_glGetMapfv(GLenum target, GLenum query, GLfloat *v);
    gl_check_error();
}
void glGetMapiv(GLenum target, GLenum query, GLint *v) {
    glad_glGetMapiv(GLenum target, GLenum query, GLint *v);
    gl_check_error();
}
void glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params) {
    glad_glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetMaterialiv(GLenum face, GLenum pname, GLint *params) {
    glad_glGetMaterialiv(GLenum face, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetPixelMapfv(GLenum map, GLfloat *values) {
    glad_glGetPixelMapfv(GLenum map, GLfloat *values);
    gl_check_error();
}
void glGetPixelMapuiv(GLenum map, GLuint *values) {
    glad_glGetPixelMapuiv(GLenum map, GLuint *values);
    gl_check_error();
}
void glGetPixelMapusv(GLenum map, GLushort *values) {
    glad_glGetPixelMapusv(GLenum map, GLushort *values);
    gl_check_error();
}
void glGetPolygonStipple(GLubyte *mask) {
    glad_glGetPolygonStipple(GLubyte *mask);
    gl_check_error();
}
void glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params) {
    glad_glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetTexEnviv(GLenum target, GLenum pname, GLint *params) {
    glad_glGetTexEnviv(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params) {
    glad_glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params);
    gl_check_error();
}
void glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params) {
    glad_glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetTexGeniv(GLenum coord, GLenum pname, GLint *params) {
    glad_glGetTexGeniv(GLenum coord, GLenum pname, GLint *params);
    gl_check_error();
}
GLboolean glIsList(GLuint list) {
    auto val = glad_glIsList(GLuint list);
    gl_check_error();
    return val;
}
void glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
    glad_glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
    gl_check_error();
}
void glLoadIdentity(void) {
    glad_glLoadIdentity(void);
    gl_check_error();
}
void glLoadMatrixf(const GLfloat *m) {
    glad_glLoadMatrixf(const GLfloat *m);
    gl_check_error();
}
void glLoadMatrixd(const GLdouble *m) {
    glad_glLoadMatrixd(const GLdouble *m);
    gl_check_error();
}
void glMatrixMode(GLenum mode) {
    glad_glMatrixMode(GLenum mode);
    gl_check_error();
}
void glMultMatrixf(const GLfloat *m) {
    glad_glMultMatrixf(const GLfloat *m);
    gl_check_error();
}
void glMultMatrixd(const GLdouble *m) {
    glad_glMultMatrixd(const GLdouble *m);
    gl_check_error();
}
void glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
    glad_glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
    gl_check_error();
}
void glPopMatrix(void) {
    glad_glPopMatrix(void);
    gl_check_error();
}
void glPushMatrix(void) {
    glad_glPushMatrix(void);
    gl_check_error();
}
void glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {
    glad_glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
    gl_check_error();
}
void glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {
    glad_glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glScaled(GLdouble x, GLdouble y, GLdouble z) {
    glad_glScaled(GLdouble x, GLdouble y, GLdouble z);
    gl_check_error();
}
void glScalef(GLfloat x, GLfloat y, GLfloat z) {
    glad_glScalef(GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glTranslated(GLdouble x, GLdouble y, GLdouble z) {
    glad_glTranslated(GLdouble x, GLdouble y, GLdouble z);
    gl_check_error();
}
void glTranslatef(GLfloat x, GLfloat y, GLfloat z) {
    glad_glTranslatef(GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glDrawArrays(GLenum mode, GLint first, GLsizei count) {
    glad_glDrawArrays(GLenum mode, GLint first, GLsizei count);
    gl_check_error();
}
void glDrawElements(GLenum mode, GLsizei count, GLenum type, const void *indices) {
    glad_glDrawElements(GLenum mode, GLsizei count, GLenum type, const void *indices);
    gl_check_error();
}
void glGetPointerv(GLenum pname, void **params) {
    glad_glGetPointerv(GLenum pname, void **params);
    gl_check_error();
}
void glPolygonOffset(GLfloat factor, GLfloat units) {
    glad_glPolygonOffset(GLfloat factor, GLfloat units);
    gl_check_error();
}
void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
    glad_glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
    gl_check_error();
}
void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
    glad_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
    gl_check_error();
}
void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
    glad_glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
    gl_check_error();
}
void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    gl_check_error();
}
void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) {
    glad_glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {
    glad_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glBindTexture(GLenum target, GLuint texture) {
    glad_glBindTexture(GLenum target, GLuint texture);
    gl_check_error();
}
void glDeleteTextures(GLsizei n, const GLuint *textures) {
    glad_glDeleteTextures(GLsizei n, const GLuint *textures);
    gl_check_error();
}
void glGenTextures(GLsizei n, GLuint *textures) {
    glad_glGenTextures(GLsizei n, GLuint *textures);
    gl_check_error();
}
GLboolean glIsTexture(GLuint texture) {
    auto val = glad_glIsTexture(GLuint texture);
    gl_check_error();
    return val;
}
void glArrayElement(GLint i) {
    glad_glArrayElement(GLint i);
    gl_check_error();
}
void glColorPointer(GLint size, GLenum type, GLsizei stride, const void *pointer) {
    glad_glColorPointer(GLint size, GLenum type, GLsizei stride, const void *pointer);
    gl_check_error();
}
void glDisableClientState(GLenum array) {
    glad_glDisableClientState(GLenum array);
    gl_check_error();
}
void glEdgeFlagPointer(GLsizei stride, const void *pointer) {
    glad_glEdgeFlagPointer(GLsizei stride, const void *pointer);
    gl_check_error();
}
void glEnableClientState(GLenum array) {
    glad_glEnableClientState(GLenum array);
    gl_check_error();
}
void glIndexPointer(GLenum type, GLsizei stride, const void *pointer) {
    glad_glIndexPointer(GLenum type, GLsizei stride, const void *pointer);
    gl_check_error();
}
void glInterleavedArrays(GLenum format, GLsizei stride, const void *pointer) {
    glad_glInterleavedArrays(GLenum format, GLsizei stride, const void *pointer);
    gl_check_error();
}
void glNormalPointer(GLenum type, GLsizei stride, const void *pointer) {
    glad_glNormalPointer(GLenum type, GLsizei stride, const void *pointer);
    gl_check_error();
}
void glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void *pointer) {
    glad_glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void *pointer);
    gl_check_error();
}
void glVertexPointer(GLint size, GLenum type, GLsizei stride, const void *pointer) {
    glad_glVertexPointer(GLint size, GLenum type, GLsizei stride, const void *pointer);
    gl_check_error();
}
GLboolean glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences) {
    auto val = glad_glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences);
    gl_check_error();
    return val;
}
void glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLfloat *priorities) {
    glad_glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLfloat *priorities);
    gl_check_error();
}
void glIndexub(GLubyte c) {
    glad_glIndexub(GLubyte c);
    gl_check_error();
}
void glIndexubv(const GLubyte *c) {
    glad_glIndexubv(const GLubyte *c);
    gl_check_error();
}
void glPopClientAttrib(void) {
    glad_glPopClientAttrib(void);
    gl_check_error();
}
void glPushClientAttrib(GLbitfield mask) {
    glad_glPushClientAttrib(GLbitfield mask);
    gl_check_error();
}
void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices) {
    glad_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
    gl_check_error();
}
void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) {
    glad_glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) {
    glad_glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    gl_check_error();
}
void glActiveTexture(GLenum texture) {
    glad_glActiveTexture(GLenum texture);
    gl_check_error();
}
void glSampleCoverage(GLfloat value, GLboolean invert) {
    glad_glSampleCoverage(GLfloat value, GLboolean invert);
    gl_check_error();
}
void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data) {
    glad_glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
    gl_check_error();
}
void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data) {
    glad_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
    gl_check_error();
}
void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data) {
    glad_glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
    gl_check_error();
}
void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) {
    glad_glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
    gl_check_error();
}
void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) {
    glad_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
    gl_check_error();
}
void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) {
    glad_glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
    gl_check_error();
}
void glGetCompressedTexImage(GLenum target, GLint level, void *img) {
    glad_glGetCompressedTexImage(GLenum target, GLint level, void *img);
    gl_check_error();
}
void glClientActiveTexture(GLenum texture) {
    glad_glClientActiveTexture(GLenum texture);
    gl_check_error();
}
void glMultiTexCoord1d(GLenum target, GLdouble s) {
    glad_glMultiTexCoord1d(GLenum target, GLdouble s);
    gl_check_error();
}
void glMultiTexCoord1dv(GLenum target, const GLdouble *v) {
    glad_glMultiTexCoord1dv(GLenum target, const GLdouble *v);
    gl_check_error();
}
void glMultiTexCoord1f(GLenum target, GLfloat s) {
    glad_glMultiTexCoord1f(GLenum target, GLfloat s);
    gl_check_error();
}
void glMultiTexCoord1fv(GLenum target, const GLfloat *v) {
    glad_glMultiTexCoord1fv(GLenum target, const GLfloat *v);
    gl_check_error();
}
void glMultiTexCoord1i(GLenum target, GLint s) {
    glad_glMultiTexCoord1i(GLenum target, GLint s);
    gl_check_error();
}
void glMultiTexCoord1iv(GLenum target, const GLint *v) {
    glad_glMultiTexCoord1iv(GLenum target, const GLint *v);
    gl_check_error();
}
void glMultiTexCoord1s(GLenum target, GLshort s) {
    glad_glMultiTexCoord1s(GLenum target, GLshort s);
    gl_check_error();
}
void glMultiTexCoord1sv(GLenum target, const GLshort *v) {
    glad_glMultiTexCoord1sv(GLenum target, const GLshort *v);
    gl_check_error();
}
void glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t) {
    glad_glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t);
    gl_check_error();
}
void glMultiTexCoord2dv(GLenum target, const GLdouble *v) {
    glad_glMultiTexCoord2dv(GLenum target, const GLdouble *v);
    gl_check_error();
}
void glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t) {
    glad_glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t);
    gl_check_error();
}
void glMultiTexCoord2fv(GLenum target, const GLfloat *v) {
    glad_glMultiTexCoord2fv(GLenum target, const GLfloat *v);
    gl_check_error();
}
void glMultiTexCoord2i(GLenum target, GLint s, GLint t) {
    glad_glMultiTexCoord2i(GLenum target, GLint s, GLint t);
    gl_check_error();
}
void glMultiTexCoord2iv(GLenum target, const GLint *v) {
    glad_glMultiTexCoord2iv(GLenum target, const GLint *v);
    gl_check_error();
}
void glMultiTexCoord2s(GLenum target, GLshort s, GLshort t) {
    glad_glMultiTexCoord2s(GLenum target, GLshort s, GLshort t);
    gl_check_error();
}
void glMultiTexCoord2sv(GLenum target, const GLshort *v) {
    glad_glMultiTexCoord2sv(GLenum target, const GLshort *v);
    gl_check_error();
}
void glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r) {
    glad_glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r);
    gl_check_error();
}
void glMultiTexCoord3dv(GLenum target, const GLdouble *v) {
    glad_glMultiTexCoord3dv(GLenum target, const GLdouble *v);
    gl_check_error();
}
void glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r) {
    glad_glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r);
    gl_check_error();
}
void glMultiTexCoord3fv(GLenum target, const GLfloat *v) {
    glad_glMultiTexCoord3fv(GLenum target, const GLfloat *v);
    gl_check_error();
}
void glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r) {
    glad_glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r);
    gl_check_error();
}
void glMultiTexCoord3iv(GLenum target, const GLint *v) {
    glad_glMultiTexCoord3iv(GLenum target, const GLint *v);
    gl_check_error();
}
void glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r) {
    glad_glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r);
    gl_check_error();
}
void glMultiTexCoord3sv(GLenum target, const GLshort *v) {
    glad_glMultiTexCoord3sv(GLenum target, const GLshort *v);
    gl_check_error();
}
void glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
    glad_glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
    gl_check_error();
}
void glMultiTexCoord4dv(GLenum target, const GLdouble *v) {
    glad_glMultiTexCoord4dv(GLenum target, const GLdouble *v);
    gl_check_error();
}
void glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
    glad_glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
    gl_check_error();
}
void glMultiTexCoord4fv(GLenum target, const GLfloat *v) {
    glad_glMultiTexCoord4fv(GLenum target, const GLfloat *v);
    gl_check_error();
}
void glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q) {
    glad_glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q);
    gl_check_error();
}
void glMultiTexCoord4iv(GLenum target, const GLint *v) {
    glad_glMultiTexCoord4iv(GLenum target, const GLint *v);
    gl_check_error();
}
void glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) {
    glad_glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
    gl_check_error();
}
void glMultiTexCoord4sv(GLenum target, const GLshort *v) {
    glad_glMultiTexCoord4sv(GLenum target, const GLshort *v);
    gl_check_error();
}
void glLoadTransposeMatrixf(const GLfloat *m) {
    glad_glLoadTransposeMatrixf(const GLfloat *m);
    gl_check_error();
}
void glLoadTransposeMatrixd(const GLdouble *m) {
    glad_glLoadTransposeMatrixd(const GLdouble *m);
    gl_check_error();
}
void glMultTransposeMatrixf(const GLfloat *m) {
    glad_glMultTransposeMatrixf(const GLfloat *m);
    gl_check_error();
}
void glMultTransposeMatrixd(const GLdouble *m) {
    glad_glMultTransposeMatrixd(const GLdouble *m);
    gl_check_error();
}
void glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
    glad_glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
    gl_check_error();
}
void glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount) {
    glad_glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
    gl_check_error();
}
void glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount) {
    glad_glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
    gl_check_error();
}
void glPointParameterf(GLenum pname, GLfloat param) {
    glad_glPointParameterf(GLenum pname, GLfloat param);
    gl_check_error();
}
void glPointParameterfv(GLenum pname, const GLfloat *params) {
    glad_glPointParameterfv(GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glPointParameteri(GLenum pname, GLint param) {
    glad_glPointParameteri(GLenum pname, GLint param);
    gl_check_error();
}
void glPointParameteriv(GLenum pname, const GLint *params) {
    glad_glPointParameteriv(GLenum pname, const GLint *params);
    gl_check_error();
}
void glFogCoordf(GLfloat coord) {
    glad_glFogCoordf(GLfloat coord);
    gl_check_error();
}
void glFogCoordfv(const GLfloat *coord) {
    glad_glFogCoordfv(const GLfloat *coord);
    gl_check_error();
}
void glFogCoordd(GLdouble coord) {
    glad_glFogCoordd(GLdouble coord);
    gl_check_error();
}
void glFogCoorddv(const GLdouble *coord) {
    glad_glFogCoorddv(const GLdouble *coord);
    gl_check_error();
}
void glFogCoordPointer(GLenum type, GLsizei stride, const void *pointer) {
    glad_glFogCoordPointer(GLenum type, GLsizei stride, const void *pointer);
    gl_check_error();
}
void glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue) {
    glad_glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue);
    gl_check_error();
}
void glSecondaryColor3bv(const GLbyte *v) {
    glad_glSecondaryColor3bv(const GLbyte *v);
    gl_check_error();
}
void glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue) {
    glad_glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue);
    gl_check_error();
}
void glSecondaryColor3dv(const GLdouble *v) {
    glad_glSecondaryColor3dv(const GLdouble *v);
    gl_check_error();
}
void glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue) {
    glad_glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue);
    gl_check_error();
}
void glSecondaryColor3fv(const GLfloat *v) {
    glad_glSecondaryColor3fv(const GLfloat *v);
    gl_check_error();
}
void glSecondaryColor3i(GLint red, GLint green, GLint blue) {
    glad_glSecondaryColor3i(GLint red, GLint green, GLint blue);
    gl_check_error();
}
void glSecondaryColor3iv(const GLint *v) {
    glad_glSecondaryColor3iv(const GLint *v);
    gl_check_error();
}
void glSecondaryColor3s(GLshort red, GLshort green, GLshort blue) {
    glad_glSecondaryColor3s(GLshort red, GLshort green, GLshort blue);
    gl_check_error();
}
void glSecondaryColor3sv(const GLshort *v) {
    glad_glSecondaryColor3sv(const GLshort *v);
    gl_check_error();
}
void glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue) {
    glad_glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue);
    gl_check_error();
}
void glSecondaryColor3ubv(const GLubyte *v) {
    glad_glSecondaryColor3ubv(const GLubyte *v);
    gl_check_error();
}
void glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue) {
    glad_glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue);
    gl_check_error();
}
void glSecondaryColor3uiv(const GLuint *v) {
    glad_glSecondaryColor3uiv(const GLuint *v);
    gl_check_error();
}
void glSecondaryColor3us(GLushort red, GLushort green, GLushort blue) {
    glad_glSecondaryColor3us(GLushort red, GLushort green, GLushort blue);
    gl_check_error();
}
void glSecondaryColor3usv(const GLushort *v) {
    glad_glSecondaryColor3usv(const GLushort *v);
    gl_check_error();
}
void glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void *pointer) {
    glad_glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void *pointer);
    gl_check_error();
}
void glWindowPos2d(GLdouble x, GLdouble y) {
    glad_glWindowPos2d(GLdouble x, GLdouble y);
    gl_check_error();
}
void glWindowPos2dv(const GLdouble *v) {
    glad_glWindowPos2dv(const GLdouble *v);
    gl_check_error();
}
void glWindowPos2f(GLfloat x, GLfloat y) {
    glad_glWindowPos2f(GLfloat x, GLfloat y);
    gl_check_error();
}
void glWindowPos2fv(const GLfloat *v) {
    glad_glWindowPos2fv(const GLfloat *v);
    gl_check_error();
}
void glWindowPos2i(GLint x, GLint y) {
    glad_glWindowPos2i(GLint x, GLint y);
    gl_check_error();
}
void glWindowPos2iv(const GLint *v) {
    glad_glWindowPos2iv(const GLint *v);
    gl_check_error();
}
void glWindowPos2s(GLshort x, GLshort y) {
    glad_glWindowPos2s(GLshort x, GLshort y);
    gl_check_error();
}
void glWindowPos2sv(const GLshort *v) {
    glad_glWindowPos2sv(const GLshort *v);
    gl_check_error();
}
void glWindowPos3d(GLdouble x, GLdouble y, GLdouble z) {
    glad_glWindowPos3d(GLdouble x, GLdouble y, GLdouble z);
    gl_check_error();
}
void glWindowPos3dv(const GLdouble *v) {
    glad_glWindowPos3dv(const GLdouble *v);
    gl_check_error();
}
void glWindowPos3f(GLfloat x, GLfloat y, GLfloat z) {
    glad_glWindowPos3f(GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glWindowPos3fv(const GLfloat *v) {
    glad_glWindowPos3fv(const GLfloat *v);
    gl_check_error();
}
void glWindowPos3i(GLint x, GLint y, GLint z) {
    glad_glWindowPos3i(GLint x, GLint y, GLint z);
    gl_check_error();
}
void glWindowPos3iv(const GLint *v) {
    glad_glWindowPos3iv(const GLint *v);
    gl_check_error();
}
void glWindowPos3s(GLshort x, GLshort y, GLshort z) {
    glad_glWindowPos3s(GLshort x, GLshort y, GLshort z);
    gl_check_error();
}
void glWindowPos3sv(const GLshort *v) {
    glad_glWindowPos3sv(const GLshort *v);
    gl_check_error();
}
void glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    glad_glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
    gl_check_error();
}
void glBlendEquation(GLenum mode) {
    glad_glBlendEquation(GLenum mode);
    gl_check_error();
}
void glGenQueries(GLsizei n, GLuint *ids) {
    glad_glGenQueries(GLsizei n, GLuint *ids);
    gl_check_error();
}
void glDeleteQueries(GLsizei n, const GLuint *ids) {
    glad_glDeleteQueries(GLsizei n, const GLuint *ids);
    gl_check_error();
}
GLboolean glIsQuery(GLuint id) {
    auto val = glad_glIsQuery(GLuint id);
    gl_check_error();
    return val;
}
void glBeginQuery(GLenum target, GLuint id) {
    glad_glBeginQuery(GLenum target, GLuint id);
    gl_check_error();
}
void glEndQuery(GLenum target) {
    glad_glEndQuery(GLenum target);
    gl_check_error();
}
void glGetQueryiv(GLenum target, GLenum pname, GLint *params) {
    glad_glGetQueryiv(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params) {
    glad_glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params) {
    glad_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params);
    gl_check_error();
}
void glBindBuffer(GLenum target, GLuint buffer) {
    glad_glBindBuffer(GLenum target, GLuint buffer);
    gl_check_error();
}
void glDeleteBuffers(GLsizei n, const GLuint *buffers) {
    glad_glDeleteBuffers(GLsizei n, const GLuint *buffers);
    gl_check_error();
}
void glGenBuffers(GLsizei n, GLuint *buffers) {
    glad_glGenBuffers(GLsizei n, GLuint *buffers);
    gl_check_error();
}
GLboolean glIsBuffer(GLuint buffer) {
    auto val = glad_glIsBuffer(GLuint buffer);
    gl_check_error();
    return val;
}
void glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage) {
    glad_glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
    gl_check_error();
}
void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data) {
    glad_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
    gl_check_error();
}
void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void *data) {
    glad_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void *data);
    gl_check_error();
}
void * glMapBuffer(GLenum target, GLenum access) {
    glad_glMapBuffer(GLenum target, GLenum access);
    gl_check_error();
}
GLboolean glUnmapBuffer(GLenum target) {
    auto val = glad_glUnmapBuffer(GLenum target);
    gl_check_error();
    return val;
}
void glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params) {
    glad_glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetBufferPointerv(GLenum target, GLenum pname, void **params) {
    glad_glGetBufferPointerv(GLenum target, GLenum pname, void **params);
    gl_check_error();
}
void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) {
    glad_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
    gl_check_error();
}
void glDrawBuffers(GLsizei n, const GLenum *bufs) {
    glad_glDrawBuffers(GLsizei n, const GLenum *bufs);
    gl_check_error();
}
void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {
    glad_glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
    gl_check_error();
}
void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) {
    glad_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
    gl_check_error();
}
void glStencilMaskSeparate(GLenum face, GLuint mask) {
    glad_glStencilMaskSeparate(GLenum face, GLuint mask);
    gl_check_error();
}
void glAttachShader(GLuint program, GLuint shader) {
    glad_glAttachShader(GLuint program, GLuint shader);
    gl_check_error();
}
void glBindAttribLocation(GLuint program, GLuint index, const GLchar *name) {
    glad_glBindAttribLocation(GLuint program, GLuint index, const GLchar *name);
    gl_check_error();
}
void glCompileShader(GLuint shader) {
    glad_glCompileShader(GLuint shader);
    gl_check_error();
}
GLuint glCreateProgram(void) {
    auto val = glad_glCreateProgram(void);
    gl_check_error();
    return val;
}
GLuint glCreateShader(GLenum type) {
    auto val = glad_glCreateShader(GLenum type);
    gl_check_error();
    return val;
}
void glDeleteProgram(GLuint program) {
    glad_glDeleteProgram(GLuint program);
    gl_check_error();
}
void glDeleteShader(GLuint shader) {
    glad_glDeleteShader(GLuint shader);
    gl_check_error();
}
void glDetachShader(GLuint program, GLuint shader) {
    glad_glDetachShader(GLuint program, GLuint shader);
    gl_check_error();
}
void glDisableVertexAttribArray(GLuint index) {
    glad_glDisableVertexAttribArray(GLuint index);
    gl_check_error();
}
void glEnableVertexAttribArray(GLuint index) {
    glad_glEnableVertexAttribArray(GLuint index);
    gl_check_error();
}
void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {
    glad_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
    gl_check_error();
}
void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {
    glad_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
    gl_check_error();
}
void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders) {
    glad_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
    gl_check_error();
}
GLint glGetAttribLocation(GLuint program, const GLchar *name) {
    auto val = glad_glGetAttribLocation(GLuint program, const GLchar *name);
    gl_check_error();
    return val;
}
void glGetProgramiv(GLuint program, GLenum pname, GLint *params) {
    glad_glGetProgramiv(GLuint program, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
    glad_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
    gl_check_error();
}
void glGetShaderiv(GLuint shader, GLenum pname, GLint *params) {
    glad_glGetShaderiv(GLuint shader, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
    glad_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
    gl_check_error();
}
void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source) {
    glad_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
    gl_check_error();
}
GLint glGetUniformLocation(GLuint program, const GLchar *name) {
    auto val = glad_glGetUniformLocation(GLuint program, const GLchar *name);
    gl_check_error();
    return val;
}
void glGetUniformfv(GLuint program, GLint location, GLfloat *params) {
    glad_glGetUniformfv(GLuint program, GLint location, GLfloat *params);
    gl_check_error();
}
void glGetUniformiv(GLuint program, GLint location, GLint *params) {
    glad_glGetUniformiv(GLuint program, GLint location, GLint *params);
    gl_check_error();
}
void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params) {
    glad_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params);
    gl_check_error();
}
void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params) {
    glad_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params) {
    glad_glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer) {
    glad_glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer);
    gl_check_error();
}
GLboolean glIsProgram(GLuint program) {
    auto val = glad_glIsProgram(GLuint program);
    gl_check_error();
    return val;
}
GLboolean glIsShader(GLuint shader) {
    auto val = glad_glIsShader(GLuint shader);
    gl_check_error();
    return val;
}
void glLinkProgram(GLuint program) {
    glad_glLinkProgram(GLuint program);
    gl_check_error();
}
void glShaderSource(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length) {
    glad_glShaderSource(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
    gl_check_error();
}
void glUseProgram(GLuint program) {
    glad_glUseProgram(GLuint program);
    gl_check_error();
}
void glUniform1f(GLint location, GLfloat v0) {
    glad_glUniform1f(GLint location, GLfloat v0);
    gl_check_error();
}
void glUniform2f(GLint location, GLfloat v0, GLfloat v1) {
    glad_glUniform2f(GLint location, GLfloat v0, GLfloat v1);
    gl_check_error();
}
void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
    glad_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
    gl_check_error();
}
void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
    glad_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
    gl_check_error();
}
void glUniform1i(GLint location, GLint v0) {
    glad_glUniform1i(GLint location, GLint v0);
    gl_check_error();
}
void glUniform2i(GLint location, GLint v0, GLint v1) {
    glad_glUniform2i(GLint location, GLint v0, GLint v1);
    gl_check_error();
}
void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2) {
    glad_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2);
    gl_check_error();
}
void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
    glad_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
    gl_check_error();
}
void glUniform1fv(GLint location, GLsizei count, const GLfloat *value) {
    glad_glUniform1fv(GLint location, GLsizei count, const GLfloat *value);
    gl_check_error();
}
void glUniform2fv(GLint location, GLsizei count, const GLfloat *value) {
    glad_glUniform2fv(GLint location, GLsizei count, const GLfloat *value);
    gl_check_error();
}
void glUniform3fv(GLint location, GLsizei count, const GLfloat *value) {
    glad_glUniform3fv(GLint location, GLsizei count, const GLfloat *value);
    gl_check_error();
}
void glUniform4fv(GLint location, GLsizei count, const GLfloat *value) {
    glad_glUniform4fv(GLint location, GLsizei count, const GLfloat *value);
    gl_check_error();
}
void glUniform1iv(GLint location, GLsizei count, const GLint *value) {
    glad_glUniform1iv(GLint location, GLsizei count, const GLint *value);
    gl_check_error();
}
void glUniform2iv(GLint location, GLsizei count, const GLint *value) {
    glad_glUniform2iv(GLint location, GLsizei count, const GLint *value);
    gl_check_error();
}
void glUniform3iv(GLint location, GLsizei count, const GLint *value) {
    glad_glUniform3iv(GLint location, GLsizei count, const GLint *value);
    gl_check_error();
}
void glUniform4iv(GLint location, GLsizei count, const GLint *value) {
    glad_glUniform4iv(GLint location, GLsizei count, const GLint *value);
    gl_check_error();
}
void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glValidateProgram(GLuint program) {
    glad_glValidateProgram(GLuint program);
    gl_check_error();
}
void glVertexAttrib1d(GLuint index, GLdouble x) {
    glad_glVertexAttrib1d(GLuint index, GLdouble x);
    gl_check_error();
}
void glVertexAttrib1dv(GLuint index, const GLdouble *v) {
    glad_glVertexAttrib1dv(GLuint index, const GLdouble *v);
    gl_check_error();
}
void glVertexAttrib1f(GLuint index, GLfloat x) {
    glad_glVertexAttrib1f(GLuint index, GLfloat x);
    gl_check_error();
}
void glVertexAttrib1fv(GLuint index, const GLfloat *v) {
    glad_glVertexAttrib1fv(GLuint index, const GLfloat *v);
    gl_check_error();
}
void glVertexAttrib1s(GLuint index, GLshort x) {
    glad_glVertexAttrib1s(GLuint index, GLshort x);
    gl_check_error();
}
void glVertexAttrib1sv(GLuint index, const GLshort *v) {
    glad_glVertexAttrib1sv(GLuint index, const GLshort *v);
    gl_check_error();
}
void glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y) {
    glad_glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
    gl_check_error();
}
void glVertexAttrib2dv(GLuint index, const GLdouble *v) {
    glad_glVertexAttrib2dv(GLuint index, const GLdouble *v);
    gl_check_error();
}
void glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y) {
    glad_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
    gl_check_error();
}
void glVertexAttrib2fv(GLuint index, const GLfloat *v) {
    glad_glVertexAttrib2fv(GLuint index, const GLfloat *v);
    gl_check_error();
}
void glVertexAttrib2s(GLuint index, GLshort x, GLshort y) {
    glad_glVertexAttrib2s(GLuint index, GLshort x, GLshort y);
    gl_check_error();
}
void glVertexAttrib2sv(GLuint index, const GLshort *v) {
    glad_glVertexAttrib2sv(GLuint index, const GLshort *v);
    gl_check_error();
}
void glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
    glad_glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
    gl_check_error();
}
void glVertexAttrib3dv(GLuint index, const GLdouble *v) {
    glad_glVertexAttrib3dv(GLuint index, const GLdouble *v);
    gl_check_error();
}
void glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
    glad_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glVertexAttrib3fv(GLuint index, const GLfloat *v) {
    glad_glVertexAttrib3fv(GLuint index, const GLfloat *v);
    gl_check_error();
}
void glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) {
    glad_glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
    gl_check_error();
}
void glVertexAttrib3sv(GLuint index, const GLshort *v) {
    glad_glVertexAttrib3sv(GLuint index, const GLshort *v);
    gl_check_error();
}
void glVertexAttrib4Nbv(GLuint index, const GLbyte *v) {
    glad_glVertexAttrib4Nbv(GLuint index, const GLbyte *v);
    gl_check_error();
}
void glVertexAttrib4Niv(GLuint index, const GLint *v) {
    glad_glVertexAttrib4Niv(GLuint index, const GLint *v);
    gl_check_error();
}
void glVertexAttrib4Nsv(GLuint index, const GLshort *v) {
    glad_glVertexAttrib4Nsv(GLuint index, const GLshort *v);
    gl_check_error();
}
void glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
    glad_glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
    gl_check_error();
}
void glVertexAttrib4Nubv(GLuint index, const GLubyte *v) {
    glad_glVertexAttrib4Nubv(GLuint index, const GLubyte *v);
    gl_check_error();
}
void glVertexAttrib4Nuiv(GLuint index, const GLuint *v) {
    glad_glVertexAttrib4Nuiv(GLuint index, const GLuint *v);
    gl_check_error();
}
void glVertexAttrib4Nusv(GLuint index, const GLushort *v) {
    glad_glVertexAttrib4Nusv(GLuint index, const GLushort *v);
    gl_check_error();
}
void glVertexAttrib4bv(GLuint index, const GLbyte *v) {
    glad_glVertexAttrib4bv(GLuint index, const GLbyte *v);
    gl_check_error();
}
void glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    gl_check_error();
}
void glVertexAttrib4dv(GLuint index, const GLdouble *v) {
    glad_glVertexAttrib4dv(GLuint index, const GLdouble *v);
    gl_check_error();
}
void glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    gl_check_error();
}
void glVertexAttrib4fv(GLuint index, const GLfloat *v) {
    glad_glVertexAttrib4fv(GLuint index, const GLfloat *v);
    gl_check_error();
}
void glVertexAttrib4iv(GLuint index, const GLint *v) {
    glad_glVertexAttrib4iv(GLuint index, const GLint *v);
    gl_check_error();
}
void glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
    glad_glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
    gl_check_error();
}
void glVertexAttrib4sv(GLuint index, const GLshort *v) {
    glad_glVertexAttrib4sv(GLuint index, const GLshort *v);
    gl_check_error();
}
void glVertexAttrib4ubv(GLuint index, const GLubyte *v) {
    glad_glVertexAttrib4ubv(GLuint index, const GLubyte *v);
    gl_check_error();
}
void glVertexAttrib4uiv(GLuint index, const GLuint *v) {
    glad_glVertexAttrib4uiv(GLuint index, const GLuint *v);
    gl_check_error();
}
void glVertexAttrib4usv(GLuint index, const GLushort *v) {
    glad_glVertexAttrib4usv(GLuint index, const GLushort *v);
    gl_check_error();
}
void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer) {
    glad_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
    gl_check_error();
}
void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
    glad_glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
    gl_check_error();
}
void glGetBooleani_v(GLenum target, GLuint index, GLboolean *data) {
    glad_glGetBooleani_v(GLenum target, GLuint index, GLboolean *data);
    gl_check_error();
}
void glGetIntegeri_v(GLenum target, GLuint index, GLint *data) {
    glad_glGetIntegeri_v(GLenum target, GLuint index, GLint *data);
    gl_check_error();
}
void glEnablei(GLenum target, GLuint index) {
    glad_glEnablei(GLenum target, GLuint index);
    gl_check_error();
}
void glDisablei(GLenum target, GLuint index) {
    glad_glDisablei(GLenum target, GLuint index);
    gl_check_error();
}
GLboolean glIsEnabledi(GLenum target, GLuint index) {
    auto val = glad_glIsEnabledi(GLenum target, GLuint index);
    gl_check_error();
    return val;
}
void glBeginTransformFeedback(GLenum primitiveMode) {
    glad_glBeginTransformFeedback(GLenum primitiveMode);
    gl_check_error();
}
void glEndTransformFeedback(void) {
    glad_glEndTransformFeedback(void);
    gl_check_error();
}
void glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
    glad_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
    gl_check_error();
}
void glBindBufferBase(GLenum target, GLuint index, GLuint buffer) {
    glad_glBindBufferBase(GLenum target, GLuint index, GLuint buffer);
    gl_check_error();
}
void glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode) {
    glad_glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
    gl_check_error();
}
void glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) {
    glad_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
    gl_check_error();
}
void glClampColor(GLenum target, GLenum clamp) {
    glad_glClampColor(GLenum target, GLenum clamp);
    gl_check_error();
}
void glBeginConditionalRender(GLuint id, GLenum mode) {
    glad_glBeginConditionalRender(GLuint id, GLenum mode);
    gl_check_error();
}
void glEndConditionalRender(void) {
    glad_glEndConditionalRender(void);
    gl_check_error();
}
void glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) {
    glad_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
    gl_check_error();
}
void glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params) {
    glad_glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params) {
    glad_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params);
    gl_check_error();
}
void glVertexAttribI1i(GLuint index, GLint x) {
    glad_glVertexAttribI1i(GLuint index, GLint x);
    gl_check_error();
}
void glVertexAttribI2i(GLuint index, GLint x, GLint y) {
    glad_glVertexAttribI2i(GLuint index, GLint x, GLint y);
    gl_check_error();
}
void glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z) {
    glad_glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z);
    gl_check_error();
}
void glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) {
    glad_glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);
    gl_check_error();
}
void glVertexAttribI1ui(GLuint index, GLuint x) {
    glad_glVertexAttribI1ui(GLuint index, GLuint x);
    gl_check_error();
}
void glVertexAttribI2ui(GLuint index, GLuint x, GLuint y) {
    glad_glVertexAttribI2ui(GLuint index, GLuint x, GLuint y);
    gl_check_error();
}
void glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z) {
    glad_glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z);
    gl_check_error();
}
void glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
    glad_glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
    gl_check_error();
}
void glVertexAttribI1iv(GLuint index, const GLint *v) {
    glad_glVertexAttribI1iv(GLuint index, const GLint *v);
    gl_check_error();
}
void glVertexAttribI2iv(GLuint index, const GLint *v) {
    glad_glVertexAttribI2iv(GLuint index, const GLint *v);
    gl_check_error();
}
void glVertexAttribI3iv(GLuint index, const GLint *v) {
    glad_glVertexAttribI3iv(GLuint index, const GLint *v);
    gl_check_error();
}
void glVertexAttribI4iv(GLuint index, const GLint *v) {
    glad_glVertexAttribI4iv(GLuint index, const GLint *v);
    gl_check_error();
}
void glVertexAttribI1uiv(GLuint index, const GLuint *v) {
    glad_glVertexAttribI1uiv(GLuint index, const GLuint *v);
    gl_check_error();
}
void glVertexAttribI2uiv(GLuint index, const GLuint *v) {
    glad_glVertexAttribI2uiv(GLuint index, const GLuint *v);
    gl_check_error();
}
void glVertexAttribI3uiv(GLuint index, const GLuint *v) {
    glad_glVertexAttribI3uiv(GLuint index, const GLuint *v);
    gl_check_error();
}
void glVertexAttribI4uiv(GLuint index, const GLuint *v) {
    glad_glVertexAttribI4uiv(GLuint index, const GLuint *v);
    gl_check_error();
}
void glVertexAttribI4bv(GLuint index, const GLbyte *v) {
    glad_glVertexAttribI4bv(GLuint index, const GLbyte *v);
    gl_check_error();
}
void glVertexAttribI4sv(GLuint index, const GLshort *v) {
    glad_glVertexAttribI4sv(GLuint index, const GLshort *v);
    gl_check_error();
}
void glVertexAttribI4ubv(GLuint index, const GLubyte *v) {
    glad_glVertexAttribI4ubv(GLuint index, const GLubyte *v);
    gl_check_error();
}
void glVertexAttribI4usv(GLuint index, const GLushort *v) {
    glad_glVertexAttribI4usv(GLuint index, const GLushort *v);
    gl_check_error();
}
void glGetUniformuiv(GLuint program, GLint location, GLuint *params) {
    glad_glGetUniformuiv(GLuint program, GLint location, GLuint *params);
    gl_check_error();
}
void glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name) {
    glad_glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name);
    gl_check_error();
}
GLint glGetFragDataLocation(GLuint program, const GLchar *name) {
    auto val = glad_glGetFragDataLocation(GLuint program, const GLchar *name);
    gl_check_error();
    return val;
}
void glUniform1ui(GLint location, GLuint v0) {
    glad_glUniform1ui(GLint location, GLuint v0);
    gl_check_error();
}
void glUniform2ui(GLint location, GLuint v0, GLuint v1) {
    glad_glUniform2ui(GLint location, GLuint v0, GLuint v1);
    gl_check_error();
}
void glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) {
    glad_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
    gl_check_error();
}
void glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
    glad_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
    gl_check_error();
}
void glUniform1uiv(GLint location, GLsizei count, const GLuint *value) {
    glad_glUniform1uiv(GLint location, GLsizei count, const GLuint *value);
    gl_check_error();
}
void glUniform2uiv(GLint location, GLsizei count, const GLuint *value) {
    glad_glUniform2uiv(GLint location, GLsizei count, const GLuint *value);
    gl_check_error();
}
void glUniform3uiv(GLint location, GLsizei count, const GLuint *value) {
    glad_glUniform3uiv(GLint location, GLsizei count, const GLuint *value);
    gl_check_error();
}
void glUniform4uiv(GLint location, GLsizei count, const GLuint *value) {
    glad_glUniform4uiv(GLint location, GLsizei count, const GLuint *value);
    gl_check_error();
}
void glTexParameterIiv(GLenum target, GLenum pname, const GLint *params) {
    glad_glTexParameterIiv(GLenum target, GLenum pname, const GLint *params);
    gl_check_error();
}
void glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params) {
    glad_glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params);
    gl_check_error();
}
void glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params) {
    glad_glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params) {
    glad_glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params);
    gl_check_error();
}
void glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value) {
    glad_glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value);
    gl_check_error();
}
void glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value) {
    glad_glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value);
    gl_check_error();
}
void glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value) {
    glad_glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value);
    gl_check_error();
}
void glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {
    glad_glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
    gl_check_error();
}
const GLubyte * glGetStringi(GLenum name, GLuint index) {
    auto val = glad_glGetStringi(GLenum name, GLuint index);
    gl_check_error();
    return val;
}
GLboolean glIsRenderbuffer(GLuint renderbuffer) {
    auto val = glad_glIsRenderbuffer(GLuint renderbuffer);
    gl_check_error();
    return val;
}
void glBindRenderbuffer(GLenum target, GLuint renderbuffer) {
    glad_glBindRenderbuffer(GLenum target, GLuint renderbuffer);
    gl_check_error();
}
void glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers) {
    glad_glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers);
    gl_check_error();
}
void glGenRenderbuffers(GLsizei n, GLuint *renderbuffers) {
    glad_glGenRenderbuffers(GLsizei n, GLuint *renderbuffers);
    gl_check_error();
}
void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
    gl_check_error();
}
void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params) {
    glad_glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
GLboolean glIsFramebuffer(GLuint framebuffer) {
    auto val = glad_glIsFramebuffer(GLuint framebuffer);
    gl_check_error();
    return val;
}
void glBindFramebuffer(GLenum target, GLuint framebuffer) {
    glad_glBindFramebuffer(GLenum target, GLuint framebuffer);
    gl_check_error();
}
void glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers) {
    glad_glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers);
    gl_check_error();
}
void glGenFramebuffers(GLsizei n, GLuint *framebuffers) {
    glad_glGenFramebuffers(GLsizei n, GLuint *framebuffers);
    gl_check_error();
}
GLenum glCheckFramebufferStatus(GLenum target) {
    auto val = glad_glCheckFramebufferStatus(GLenum target);
    gl_check_error();
    return val;
}
void glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
    glad_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    gl_check_error();
}
void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
    glad_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    gl_check_error();
}
void glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
    glad_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
    gl_check_error();
}
void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
    glad_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
    gl_check_error();
}
void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params) {
    glad_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params);
    gl_check_error();
}
void glGenerateMipmap(GLenum target) {
    glad_glGenerateMipmap(GLenum target);
    gl_check_error();
}
void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
    glad_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
    gl_check_error();
}
void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
    gl_check_error();
}
void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
    glad_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
    gl_check_error();
}
void * glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) {
    glad_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
    gl_check_error();
}
void glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) {
    glad_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
    gl_check_error();
}
void glBindVertexArray(GLuint array) {
    glad_glBindVertexArray(GLuint array);
    gl_check_error();
}
void glDeleteVertexArrays(GLsizei n, const GLuint *arrays) {
    glad_glDeleteVertexArrays(GLsizei n, const GLuint *arrays);
    gl_check_error();
}
void glGenVertexArrays(GLsizei n, GLuint *arrays) {
    glad_glGenVertexArrays(GLsizei n, GLuint *arrays);
    gl_check_error();
}
GLboolean glIsVertexArray(GLuint array) {
    auto val = glad_glIsVertexArray(GLuint array);
    gl_check_error();
    return val;
}
void glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) {
    glad_glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
    gl_check_error();
}
void glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount) {
    glad_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
    gl_check_error();
}
void glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer) {
    glad_glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer);
    gl_check_error();
}
void glPrimitiveRestartIndex(GLuint index) {
    glad_glPrimitiveRestartIndex(GLuint index);
    gl_check_error();
}
void glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
    glad_glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
    gl_check_error();
}
void glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices) {
    glad_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
    gl_check_error();
}
void glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params) {
    glad_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName) {
    glad_glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
    gl_check_error();
}
GLuint glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName) {
    auto val = glad_glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName);
    gl_check_error();
    return val;
}
void glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params) {
    glad_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName) {
    glad_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
    gl_check_error();
}
void glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) {
    glad_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
    gl_check_error();
}
void glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex) {
    glad_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
    gl_check_error();
}
void glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex) {
    glad_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
    gl_check_error();
}
void glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex) {
    glad_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
    gl_check_error();
}
void glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex) {
    glad_glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
    gl_check_error();
}
void glProvokingVertex(GLenum mode) {
    glad_glProvokingVertex(GLenum mode);
    gl_check_error();
}
GLsync glFenceSync(GLenum condition, GLbitfield flags) {
    auto val = glad_glFenceSync(GLenum condition, GLbitfield flags);
    gl_check_error();
    return val;
}
GLboolean glIsSync(GLsync sync) {
    auto val = glad_glIsSync(GLsync sync);
    gl_check_error();
    return val;
}
void glDeleteSync(GLsync sync) {
    glad_glDeleteSync(GLsync sync);
    gl_check_error();
}
GLenum glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {
    auto val = glad_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
    gl_check_error();
    return val;
}
void glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {
    glad_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
    gl_check_error();
}
void glGetInteger64v(GLenum pname, GLint64 *data) {
    glad_glGetInteger64v(GLenum pname, GLint64 *data);
    gl_check_error();
}
void glGetSynciv(GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values) {
    glad_glGetSynciv(GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values);
    gl_check_error();
}
void glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data) {
    glad_glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data);
    gl_check_error();
}
void glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params) {
    glad_glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params);
    gl_check_error();
}
void glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level) {
    glad_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level);
    gl_check_error();
}
void glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
    glad_glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
    gl_check_error();
}
void glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
    glad_glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
    gl_check_error();
}
void glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val) {
    glad_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val);
    gl_check_error();
}
void glSampleMaski(GLuint maskNumber, GLbitfield mask) {
    glad_glSampleMaski(GLuint maskNumber, GLbitfield mask);
    gl_check_error();
}
void glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name) {
    glad_glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
    gl_check_error();
}
GLint glGetFragDataIndex(GLuint program, const GLchar *name) {
    auto val = glad_glGetFragDataIndex(GLuint program, const GLchar *name);
    gl_check_error();
    return val;
}
void glGenSamplers(GLsizei count, GLuint *samplers) {
    glad_glGenSamplers(GLsizei count, GLuint *samplers);
    gl_check_error();
}
void glDeleteSamplers(GLsizei count, const GLuint *samplers) {
    glad_glDeleteSamplers(GLsizei count, const GLuint *samplers);
    gl_check_error();
}
GLboolean glIsSampler(GLuint sampler) {
    auto val = glad_glIsSampler(GLuint sampler);
    gl_check_error();
    return val;
}
void glBindSampler(GLuint unit, GLuint sampler) {
    glad_glBindSampler(GLuint unit, GLuint sampler);
    gl_check_error();
}
void glSamplerParameteri(GLuint sampler, GLenum pname, GLint param) {
    glad_glSamplerParameteri(GLuint sampler, GLenum pname, GLint param);
    gl_check_error();
}
void glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param) {
    glad_glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param);
    gl_check_error();
}
void glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param) {
    glad_glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
    gl_check_error();
}
void glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param) {
    glad_glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param);
    gl_check_error();
}
void glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param) {
    glad_glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param);
    gl_check_error();
}
void glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param) {
    glad_glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param);
    gl_check_error();
}
void glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params) {
    glad_glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params) {
    glad_glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params) {
    glad_glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params) {
    glad_glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params);
    gl_check_error();
}
void glQueryCounter(GLuint id, GLenum target) {
    glad_glQueryCounter(GLuint id, GLenum target);
    gl_check_error();
}
void glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params) {
    glad_glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params);
    gl_check_error();
}
void glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params) {
    glad_glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params);
    gl_check_error();
}
void glVertexAttribDivisor(GLuint index, GLuint divisor) {
    glad_glVertexAttribDivisor(GLuint index, GLuint divisor);
    gl_check_error();
}
void glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
    glad_glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
    gl_check_error();
}
void glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
    glad_glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
    gl_check_error();
}
void glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
    glad_glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
    gl_check_error();
}
void glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
    glad_glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
    gl_check_error();
}
void glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
    glad_glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
    gl_check_error();
}
void glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
    glad_glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
    gl_check_error();
}
void glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
    glad_glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
    gl_check_error();
}
void glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
    glad_glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
    gl_check_error();
}
void glVertexP2ui(GLenum type, GLuint value) {
    glad_glVertexP2ui(GLenum type, GLuint value);
    gl_check_error();
}
void glVertexP2uiv(GLenum type, const GLuint *value) {
    glad_glVertexP2uiv(GLenum type, const GLuint *value);
    gl_check_error();
}
void glVertexP3ui(GLenum type, GLuint value) {
    glad_glVertexP3ui(GLenum type, GLuint value);
    gl_check_error();
}
void glVertexP3uiv(GLenum type, const GLuint *value) {
    glad_glVertexP3uiv(GLenum type, const GLuint *value);
    gl_check_error();
}
void glVertexP4ui(GLenum type, GLuint value) {
    glad_glVertexP4ui(GLenum type, GLuint value);
    gl_check_error();
}
void glVertexP4uiv(GLenum type, const GLuint *value) {
    glad_glVertexP4uiv(GLenum type, const GLuint *value);
    gl_check_error();
}
void glTexCoordP1ui(GLenum type, GLuint coords) {
    glad_glTexCoordP1ui(GLenum type, GLuint coords);
    gl_check_error();
}
void glTexCoordP1uiv(GLenum type, const GLuint *coords) {
    glad_glTexCoordP1uiv(GLenum type, const GLuint *coords);
    gl_check_error();
}
void glTexCoordP2ui(GLenum type, GLuint coords) {
    glad_glTexCoordP2ui(GLenum type, GLuint coords);
    gl_check_error();
}
void glTexCoordP2uiv(GLenum type, const GLuint *coords) {
    glad_glTexCoordP2uiv(GLenum type, const GLuint *coords);
    gl_check_error();
}
void glTexCoordP3ui(GLenum type, GLuint coords) {
    glad_glTexCoordP3ui(GLenum type, GLuint coords);
    gl_check_error();
}
void glTexCoordP3uiv(GLenum type, const GLuint *coords) {
    glad_glTexCoordP3uiv(GLenum type, const GLuint *coords);
    gl_check_error();
}
void glTexCoordP4ui(GLenum type, GLuint coords) {
    glad_glTexCoordP4ui(GLenum type, GLuint coords);
    gl_check_error();
}
void glTexCoordP4uiv(GLenum type, const GLuint *coords) {
    glad_glTexCoordP4uiv(GLenum type, const GLuint *coords);
    gl_check_error();
}
void glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords) {
    glad_glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords);
    gl_check_error();
}
void glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords) {
    glad_glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords);
    gl_check_error();
}
void glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords) {
    glad_glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords);
    gl_check_error();
}
void glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords) {
    glad_glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords);
    gl_check_error();
}
void glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords) {
    glad_glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords);
    gl_check_error();
}
void glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords) {
    glad_glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords);
    gl_check_error();
}
void glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords) {
    glad_glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords);
    gl_check_error();
}
void glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords) {
    glad_glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords);
    gl_check_error();
}
void glNormalP3ui(GLenum type, GLuint coords) {
    glad_glNormalP3ui(GLenum type, GLuint coords);
    gl_check_error();
}
void glNormalP3uiv(GLenum type, const GLuint *coords) {
    glad_glNormalP3uiv(GLenum type, const GLuint *coords);
    gl_check_error();
}
void glColorP3ui(GLenum type, GLuint color) {
    glad_glColorP3ui(GLenum type, GLuint color);
    gl_check_error();
}
void glColorP3uiv(GLenum type, const GLuint *color) {
    glad_glColorP3uiv(GLenum type, const GLuint *color);
    gl_check_error();
}
void glColorP4ui(GLenum type, GLuint color) {
    glad_glColorP4ui(GLenum type, GLuint color);
    gl_check_error();
}
void glColorP4uiv(GLenum type, const GLuint *color) {
    glad_glColorP4uiv(GLenum type, const GLuint *color);
    gl_check_error();
}
void glSecondaryColorP3ui(GLenum type, GLuint color) {
    glad_glSecondaryColorP3ui(GLenum type, GLuint color);
    gl_check_error();
}
void glSecondaryColorP3uiv(GLenum type, const GLuint *color) {
    glad_glSecondaryColorP3uiv(GLenum type, const GLuint *color);
    gl_check_error();
}
void glMinSampleShading(GLfloat value) {
    glad_glMinSampleShading(GLfloat value);
    gl_check_error();
}
void glBlendEquationi(GLuint buf, GLenum mode) {
    glad_glBlendEquationi(GLuint buf, GLenum mode);
    gl_check_error();
}
void glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
    glad_glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
    gl_check_error();
}
void glBlendFunci(GLuint buf, GLenum src, GLenum dst) {
    glad_glBlendFunci(GLuint buf, GLenum src, GLenum dst);
    gl_check_error();
}
void glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
    glad_glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
    gl_check_error();
}
void glDrawArraysIndirect(GLenum mode, const void *indirect) {
    glad_glDrawArraysIndirect(GLenum mode, const void *indirect);
    gl_check_error();
}
void glDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect) {
    glad_glDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect);
    gl_check_error();
}
void glUniform1d(GLint location, GLdouble x) {
    glad_glUniform1d(GLint location, GLdouble x);
    gl_check_error();
}
void glUniform2d(GLint location, GLdouble x, GLdouble y) {
    glad_glUniform2d(GLint location, GLdouble x, GLdouble y);
    gl_check_error();
}
void glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z) {
    glad_glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z);
    gl_check_error();
}
void glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    gl_check_error();
}
void glUniform1dv(GLint location, GLsizei count, const GLdouble *value) {
    glad_glUniform1dv(GLint location, GLsizei count, const GLdouble *value);
    gl_check_error();
}
void glUniform2dv(GLint location, GLsizei count, const GLdouble *value) {
    glad_glUniform2dv(GLint location, GLsizei count, const GLdouble *value);
    gl_check_error();
}
void glUniform3dv(GLint location, GLsizei count, const GLdouble *value) {
    glad_glUniform3dv(GLint location, GLsizei count, const GLdouble *value);
    gl_check_error();
}
void glUniform4dv(GLint location, GLsizei count, const GLdouble *value) {
    glad_glUniform4dv(GLint location, GLsizei count, const GLdouble *value);
    gl_check_error();
}
void glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glGetUniformdv(GLuint program, GLint location, GLdouble *params) {
    glad_glGetUniformdv(GLuint program, GLint location, GLdouble *params);
    gl_check_error();
}
GLint glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name) {
    auto val = glad_glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name);
    gl_check_error();
    return val;
}
GLuint glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name) {
    auto val = glad_glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name);
    gl_check_error();
    return val;
}
void glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values) {
    glad_glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
    gl_check_error();
}
void glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) {
    glad_glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
    gl_check_error();
}
void glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) {
    glad_glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
    gl_check_error();
}
void glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices) {
    glad_glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices);
    gl_check_error();
}
void glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params) {
    glad_glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params);
    gl_check_error();
}
void glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values) {
    glad_glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
    gl_check_error();
}
void glPatchParameteri(GLenum pname, GLint value) {
    glad_glPatchParameteri(GLenum pname, GLint value);
    gl_check_error();
}
void glPatchParameterfv(GLenum pname, const GLfloat *values) {
    glad_glPatchParameterfv(GLenum pname, const GLfloat *values);
    gl_check_error();
}
void glBindTransformFeedback(GLenum target, GLuint id) {
    glad_glBindTransformFeedback(GLenum target, GLuint id);
    gl_check_error();
}
void glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids) {
    glad_glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids);
    gl_check_error();
}
void glGenTransformFeedbacks(GLsizei n, GLuint *ids) {
    glad_glGenTransformFeedbacks(GLsizei n, GLuint *ids);
    gl_check_error();
}
GLboolean glIsTransformFeedback(GLuint id) {
    auto val = glad_glIsTransformFeedback(GLuint id);
    gl_check_error();
    return val;
}
void glPauseTransformFeedback(void) {
    glad_glPauseTransformFeedback(void);
    gl_check_error();
}
void glResumeTransformFeedback(void) {
    glad_glResumeTransformFeedback(void);
    gl_check_error();
}
void glDrawTransformFeedback(GLenum mode, GLuint id) {
    glad_glDrawTransformFeedback(GLenum mode, GLuint id);
    gl_check_error();
}
void glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream) {
    glad_glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream);
    gl_check_error();
}
void glBeginQueryIndexed(GLenum target, GLuint index, GLuint id) {
    glad_glBeginQueryIndexed(GLenum target, GLuint index, GLuint id);
    gl_check_error();
}
void glEndQueryIndexed(GLenum target, GLuint index) {
    glad_glEndQueryIndexed(GLenum target, GLuint index);
    gl_check_error();
}
void glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params) {
    glad_glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params);
    gl_check_error();
}
void glReleaseShaderCompiler(void) {
    glad_glReleaseShaderCompiler(void);
    gl_check_error();
}
void glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length) {
    glad_glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
    gl_check_error();
}
void glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision) {
    glad_glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
    gl_check_error();
}
void glDepthRangef(GLfloat n, GLfloat f) {
    glad_glDepthRangef(GLfloat n, GLfloat f);
    gl_check_error();
}
void glClearDepthf(GLfloat d) {
    glad_glClearDepthf(GLfloat d);
    gl_check_error();
}
void glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary) {
    glad_glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
    gl_check_error();
}
void glProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length) {
    glad_glProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
    gl_check_error();
}
void glProgramParameteri(GLuint program, GLenum pname, GLint value) {
    glad_glProgramParameteri(GLuint program, GLenum pname, GLint value);
    gl_check_error();
}
void glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program) {
    glad_glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program);
    gl_check_error();
}
void glActiveShaderProgram(GLuint pipeline, GLuint program) {
    glad_glActiveShaderProgram(GLuint pipeline, GLuint program);
    gl_check_error();
}
GLuint glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const*strings) {
    auto val = glad_glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const*strings);
    gl_check_error();
    return val;
}
void glBindProgramPipeline(GLuint pipeline) {
    glad_glBindProgramPipeline(GLuint pipeline);
    gl_check_error();
}
void glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines) {
    glad_glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines);
    gl_check_error();
}
void glGenProgramPipelines(GLsizei n, GLuint *pipelines) {
    glad_glGenProgramPipelines(GLsizei n, GLuint *pipelines);
    gl_check_error();
}
GLboolean glIsProgramPipeline(GLuint pipeline) {
    auto val = glad_glIsProgramPipeline(GLuint pipeline);
    gl_check_error();
    return val;
}
void glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params) {
    glad_glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params);
    gl_check_error();
}
void glProgramUniform1i(GLuint program, GLint location, GLint v0) {
    glad_glProgramUniform1i(GLuint program, GLint location, GLint v0);
    gl_check_error();
}
void glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
    glad_glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value);
    gl_check_error();
}
void glProgramUniform1f(GLuint program, GLint location, GLfloat v0) {
    glad_glProgramUniform1f(GLuint program, GLint location, GLfloat v0);
    gl_check_error();
}
void glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
    glad_glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
    gl_check_error();
}
void glProgramUniform1d(GLuint program, GLint location, GLdouble v0) {
    glad_glProgramUniform1d(GLuint program, GLint location, GLdouble v0);
    gl_check_error();
}
void glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
    glad_glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
    gl_check_error();
}
void glProgramUniform1ui(GLuint program, GLint location, GLuint v0) {
    glad_glProgramUniform1ui(GLuint program, GLint location, GLuint v0);
    gl_check_error();
}
void glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
    glad_glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
    gl_check_error();
}
void glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1) {
    glad_glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1);
    gl_check_error();
}
void glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
    glad_glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value);
    gl_check_error();
}
void glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1) {
    glad_glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1);
    gl_check_error();
}
void glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
    glad_glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
    gl_check_error();
}
void glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1) {
    glad_glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1);
    gl_check_error();
}
void glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
    glad_glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
    gl_check_error();
}
void glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1) {
    glad_glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1);
    gl_check_error();
}
void glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
    glad_glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
    gl_check_error();
}
void glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {
    glad_glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
    gl_check_error();
}
void glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
    glad_glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value);
    gl_check_error();
}
void glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
    glad_glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
    gl_check_error();
}
void glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
    glad_glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
    gl_check_error();
}
void glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) {
    glad_glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
    gl_check_error();
}
void glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
    glad_glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
    gl_check_error();
}
void glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {
    glad_glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
    gl_check_error();
}
void glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
    glad_glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
    gl_check_error();
}
void glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
    glad_glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
    gl_check_error();
}
void glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
    glad_glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value);
    gl_check_error();
}
void glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
    glad_glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
    gl_check_error();
}
void glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
    glad_glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
    gl_check_error();
}
void glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) {
    glad_glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
    gl_check_error();
}
void glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
    glad_glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
    gl_check_error();
}
void glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
    glad_glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
    gl_check_error();
}
void glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
    glad_glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
    gl_check_error();
}
void glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glValidateProgramPipeline(GLuint pipeline) {
    glad_glValidateProgramPipeline(GLuint pipeline);
    gl_check_error();
}
void glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
    glad_glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
    gl_check_error();
}
void glVertexAttribL1d(GLuint index, GLdouble x) {
    glad_glVertexAttribL1d(GLuint index, GLdouble x);
    gl_check_error();
}
void glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y) {
    glad_glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y);
    gl_check_error();
}
void glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
    glad_glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
    gl_check_error();
}
void glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    gl_check_error();
}
void glVertexAttribL1dv(GLuint index, const GLdouble *v) {
    glad_glVertexAttribL1dv(GLuint index, const GLdouble *v);
    gl_check_error();
}
void glVertexAttribL2dv(GLuint index, const GLdouble *v) {
    glad_glVertexAttribL2dv(GLuint index, const GLdouble *v);
    gl_check_error();
}
void glVertexAttribL3dv(GLuint index, const GLdouble *v) {
    glad_glVertexAttribL3dv(GLuint index, const GLdouble *v);
    gl_check_error();
}
void glVertexAttribL4dv(GLuint index, const GLdouble *v) {
    glad_glVertexAttribL4dv(GLuint index, const GLdouble *v);
    gl_check_error();
}
void glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) {
    glad_glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
    gl_check_error();
}
void glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params) {
    glad_glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params);
    gl_check_error();
}
void glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v) {
    glad_glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v);
    gl_check_error();
}
void glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) {
    glad_glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
    gl_check_error();
}
void glViewportIndexedfv(GLuint index, const GLfloat *v) {
    glad_glViewportIndexedfv(GLuint index, const GLfloat *v);
    gl_check_error();
}
void glScissorArrayv(GLuint first, GLsizei count, const GLint *v) {
    glad_glScissorArrayv(GLuint first, GLsizei count, const GLint *v);
    gl_check_error();
}
void glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) {
    glad_glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
    gl_check_error();
}
void glScissorIndexedv(GLuint index, const GLint *v) {
    glad_glScissorIndexedv(GLuint index, const GLint *v);
    gl_check_error();
}
void glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v) {
    glad_glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v);
    gl_check_error();
}
void glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f) {
    glad_glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f);
    gl_check_error();
}
void glGetFloati_v(GLenum target, GLuint index, GLfloat *data) {
    glad_glGetFloati_v(GLenum target, GLuint index, GLfloat *data);
    gl_check_error();
}
void glGetDoublei_v(GLenum target, GLuint index, GLdouble *data) {
    glad_glGetDoublei_v(GLenum target, GLuint index, GLdouble *data);
    gl_check_error();
}
void glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) {
    glad_glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
    gl_check_error();
}
void glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance) {
    glad_glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
    gl_check_error();
}
void glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) {
    glad_glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
    gl_check_error();
}
void glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint *params) {
    glad_glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint *params);
    gl_check_error();
}
void glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params) {
    glad_glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
    gl_check_error();
}
void glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) {
    glad_glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
    gl_check_error();
}
void glMemoryBarrier(GLbitfield barriers) {
    glad_glMemoryBarrier(GLbitfield barriers);
    gl_check_error();
}
void glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {
    glad_glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
    gl_check_error();
}
void glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
    gl_check_error();
}
void glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
    glad_glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
    gl_check_error();
}
void glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount) {
    glad_glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount);
    gl_check_error();
}
void glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) {
    glad_glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
    gl_check_error();
}
void glTbufferMask3DFX(GLuint mask) {
    glad_glTbufferMask3DFX(GLuint mask);
    gl_check_error();
}
void glDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) {
    glad_glDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
    gl_check_error();
}
void glDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf) {
    glad_glDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf);
    gl_check_error();
}
void glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, void *userParam) {
    glad_glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, void *userParam);
    gl_check_error();
}
GLuint glGetDebugMessageLogAMD(GLuint count, GLsizei bufSize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message) {
    auto val = glad_glGetDebugMessageLogAMD(GLuint count, GLsizei bufSize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message);
    gl_check_error();
    return val;
}
void glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst) {
    glad_glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst);
    gl_check_error();
}
void glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
    glad_glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
    gl_check_error();
}
void glBlendEquationIndexedAMD(GLuint buf, GLenum mode) {
    glad_glBlendEquationIndexedAMD(GLuint buf, GLenum mode);
    gl_check_error();
}
void glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
    glad_glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
    gl_check_error();
}
void glRenderbufferStorageMultisampleAdvancedAMD(GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glRenderbufferStorageMultisampleAdvancedAMD(GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height);
    gl_check_error();
}
void glNamedRenderbufferStorageMultisampleAdvancedAMD(GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glNamedRenderbufferStorageMultisampleAdvancedAMD(GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height);
    gl_check_error();
}
void glFramebufferSamplePositionsfvAMD(GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat *values) {
    glad_glFramebufferSamplePositionsfvAMD(GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat *values);
    gl_check_error();
}
void glNamedFramebufferSamplePositionsfvAMD(GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat *values) {
    glad_glNamedFramebufferSamplePositionsfvAMD(GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat *values);
    gl_check_error();
}
void glGetFramebufferParameterfvAMD(GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values) {
    glad_glGetFramebufferParameterfvAMD(GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values);
    gl_check_error();
}
void glGetNamedFramebufferParameterfvAMD(GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values) {
    glad_glGetNamedFramebufferParameterfvAMD(GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values);
    gl_check_error();
}
void glUniform1i64NV(GLint location, GLint64EXT x) {
    glad_glUniform1i64NV(GLint location, GLint64EXT x);
    gl_check_error();
}
void glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y) {
    glad_glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y);
    gl_check_error();
}
void glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
    glad_glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
    gl_check_error();
}
void glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
    glad_glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
    gl_check_error();
}
void glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT *value) {
    glad_glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT *value);
    gl_check_error();
}
void glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT *value) {
    glad_glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT *value);
    gl_check_error();
}
void glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT *value) {
    glad_glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT *value);
    gl_check_error();
}
void glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT *value) {
    glad_glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT *value);
    gl_check_error();
}
void glUniform1ui64NV(GLint location, GLuint64EXT x) {
    glad_glUniform1ui64NV(GLint location, GLuint64EXT x);
    gl_check_error();
}
void glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y) {
    glad_glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y);
    gl_check_error();
}
void glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
    glad_glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
    gl_check_error();
}
void glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
    glad_glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
    gl_check_error();
}
void glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) {
    glad_glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value);
    gl_check_error();
}
void glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) {
    glad_glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value);
    gl_check_error();
}
void glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) {
    glad_glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value);
    gl_check_error();
}
void glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) {
    glad_glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value);
    gl_check_error();
}
void glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT *params) {
    glad_glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT *params);
    gl_check_error();
}
void glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT *params) {
    glad_glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT *params);
    gl_check_error();
}
void glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x) {
    glad_glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x);
    gl_check_error();
}
void glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y) {
    glad_glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
    gl_check_error();
}
void glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
    glad_glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
    gl_check_error();
}
void glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
    glad_glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
    gl_check_error();
}
void glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value) {
    glad_glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
    gl_check_error();
}
void glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value) {
    glad_glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
    gl_check_error();
}
void glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value) {
    glad_glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
    gl_check_error();
}
void glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value) {
    glad_glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
    gl_check_error();
}
void glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x) {
    glad_glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x);
    gl_check_error();
}
void glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y) {
    glad_glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
    gl_check_error();
}
void glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
    glad_glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
    gl_check_error();
}
void glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
    glad_glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
    gl_check_error();
}
void glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) {
    glad_glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
    gl_check_error();
}
void glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) {
    glad_glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
    gl_check_error();
}
void glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) {
    glad_glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
    gl_check_error();
}
void glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) {
    glad_glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
    gl_check_error();
}
void glVertexAttribParameteriAMD(GLuint index, GLenum pname, GLint param) {
    glad_glVertexAttribParameteriAMD(GLuint index, GLenum pname, GLint param);
    gl_check_error();
}
void glMultiDrawArraysIndirectAMD(GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride) {
    glad_glMultiDrawArraysIndirectAMD(GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride);
    gl_check_error();
}
void glMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride) {
    glad_glMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride);
    gl_check_error();
}
void glGenNamesAMD(GLenum identifier, GLuint num, GLuint *names) {
    glad_glGenNamesAMD(GLenum identifier, GLuint num, GLuint *names);
    gl_check_error();
}
void glDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint *names) {
    glad_glDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint *names);
    gl_check_error();
}
GLboolean glIsNameAMD(GLenum identifier, GLuint name) {
    auto val = glad_glIsNameAMD(GLenum identifier, GLuint name);
    gl_check_error();
    return val;
}
void glQueryObjectParameteruiAMD(GLenum target, GLuint id, GLenum pname, GLuint param) {
    glad_glQueryObjectParameteruiAMD(GLenum target, GLuint id, GLenum pname, GLuint param);
    gl_check_error();
}
void glGetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups) {
    glad_glGetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups);
    gl_check_error();
}
void glGetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters) {
    glad_glGetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters);
    gl_check_error();
}
void glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString) {
    glad_glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
    gl_check_error();
}
void glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString) {
    glad_glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
    gl_check_error();
}
void glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void *data) {
    glad_glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void *data);
    gl_check_error();
}
void glGenPerfMonitorsAMD(GLsizei n, GLuint *monitors) {
    glad_glGenPerfMonitorsAMD(GLsizei n, GLuint *monitors);
    gl_check_error();
}
void glDeletePerfMonitorsAMD(GLsizei n, GLuint *monitors) {
    glad_glDeletePerfMonitorsAMD(GLsizei n, GLuint *monitors);
    gl_check_error();
}
void glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList) {
    glad_glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
    gl_check_error();
}
void glBeginPerfMonitorAMD(GLuint monitor) {
    glad_glBeginPerfMonitorAMD(GLuint monitor);
    gl_check_error();
}
void glEndPerfMonitorAMD(GLuint monitor) {
    glad_glEndPerfMonitorAMD(GLuint monitor);
    gl_check_error();
}
void glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten) {
    glad_glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
    gl_check_error();
}
void glSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat *val) {
    glad_glSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat *val);
    gl_check_error();
}
void glTexStorageSparseAMD(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) {
    glad_glTexStorageSparseAMD(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
    gl_check_error();
}
void glTextureStorageSparseAMD(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) {
    glad_glTextureStorageSparseAMD(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
    gl_check_error();
}
void glStencilOpValueAMD(GLenum face, GLuint value) {
    glad_glStencilOpValueAMD(GLenum face, GLuint value);
    gl_check_error();
}
void glTessellationFactorAMD(GLfloat factor) {
    glad_glTessellationFactorAMD(GLfloat factor);
    gl_check_error();
}
void glTessellationModeAMD(GLenum mode) {
    glad_glTessellationModeAMD(GLenum mode);
    gl_check_error();
}
void glElementPointerAPPLE(GLenum type, const void *pointer) {
    glad_glElementPointerAPPLE(GLenum type, const void *pointer);
    gl_check_error();
}
void glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count) {
    glad_glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count);
    gl_check_error();
}
void glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count) {
    glad_glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
    gl_check_error();
}
void glMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount) {
    glad_glMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
    gl_check_error();
}
void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount) {
    glad_glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount);
    gl_check_error();
}
void glGenFencesAPPLE(GLsizei n, GLuint *fences) {
    glad_glGenFencesAPPLE(GLsizei n, GLuint *fences);
    gl_check_error();
}
void glDeleteFencesAPPLE(GLsizei n, const GLuint *fences) {
    glad_glDeleteFencesAPPLE(GLsizei n, const GLuint *fences);
    gl_check_error();
}
void glSetFenceAPPLE(GLuint fence) {
    glad_glSetFenceAPPLE(GLuint fence);
    gl_check_error();
}
GLboolean glIsFenceAPPLE(GLuint fence) {
    auto val = glad_glIsFenceAPPLE(GLuint fence);
    gl_check_error();
    return val;
}
GLboolean glTestFenceAPPLE(GLuint fence) {
    auto val = glad_glTestFenceAPPLE(GLuint fence);
    gl_check_error();
    return val;
}
void glFinishFenceAPPLE(GLuint fence) {
    glad_glFinishFenceAPPLE(GLuint fence);
    gl_check_error();
}
GLboolean glTestObjectAPPLE(GLenum object, GLuint name) {
    auto val = glad_glTestObjectAPPLE(GLenum object, GLuint name);
    gl_check_error();
    return val;
}
void glFinishObjectAPPLE(GLenum object, GLint name) {
    glad_glFinishObjectAPPLE(GLenum object, GLint name);
    gl_check_error();
}
void glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param) {
    glad_glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param);
    gl_check_error();
}
void glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size) {
    glad_glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size);
    gl_check_error();
}
GLenum glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option) {
    auto val = glad_glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option);
    gl_check_error();
    return val;
}
GLenum glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option) {
    auto val = glad_glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option);
    gl_check_error();
    return val;
}
void glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params) {
    glad_glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params);
    gl_check_error();
}
void glTextureRangeAPPLE(GLenum target, GLsizei length, const void *pointer) {
    glad_glTextureRangeAPPLE(GLenum target, GLsizei length, const void *pointer);
    gl_check_error();
}
void glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, void **params) {
    glad_glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, void **params);
    gl_check_error();
}
void glBindVertexArrayAPPLE(GLuint array) {
    glad_glBindVertexArrayAPPLE(GLuint array);
    gl_check_error();
}
void glDeleteVertexArraysAPPLE(GLsizei n, const GLuint *arrays) {
    glad_glDeleteVertexArraysAPPLE(GLsizei n, const GLuint *arrays);
    gl_check_error();
}
void glGenVertexArraysAPPLE(GLsizei n, GLuint *arrays) {
    glad_glGenVertexArraysAPPLE(GLsizei n, GLuint *arrays);
    gl_check_error();
}
GLboolean glIsVertexArrayAPPLE(GLuint array) {
    auto val = glad_glIsVertexArrayAPPLE(GLuint array);
    gl_check_error();
    return val;
}
void glVertexArrayRangeAPPLE(GLsizei length, void *pointer) {
    glad_glVertexArrayRangeAPPLE(GLsizei length, void *pointer);
    gl_check_error();
}
void glFlushVertexArrayRangeAPPLE(GLsizei length, void *pointer) {
    glad_glFlushVertexArrayRangeAPPLE(GLsizei length, void *pointer);
    gl_check_error();
}
void glVertexArrayParameteriAPPLE(GLenum pname, GLint param) {
    glad_glVertexArrayParameteriAPPLE(GLenum pname, GLint param);
    gl_check_error();
}
void glEnableVertexAttribAPPLE(GLuint index, GLenum pname) {
    glad_glEnableVertexAttribAPPLE(GLuint index, GLenum pname);
    gl_check_error();
}
void glDisableVertexAttribAPPLE(GLuint index, GLenum pname) {
    glad_glDisableVertexAttribAPPLE(GLuint index, GLenum pname);
    gl_check_error();
}
GLboolean glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname) {
    auto val = glad_glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname);
    gl_check_error();
    return val;
}
void glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points) {
    glad_glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
    gl_check_error();
}
void glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points) {
    glad_glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
    gl_check_error();
}
void glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points) {
    glad_glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
    gl_check_error();
}
void glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points) {
    glad_glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
    gl_check_error();
}
void glMemoryBarrierByRegion(GLbitfield barriers) {
    glad_glMemoryBarrierByRegion(GLbitfield barriers);
    gl_check_error();
}
void glPrimitiveBoundingBoxARB(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) {
    glad_glPrimitiveBoundingBoxARB(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
    gl_check_error();
}
GLuint64 glGetTextureHandleARB(GLuint texture) {
    auto val = glad_glGetTextureHandleARB(GLuint texture);
    gl_check_error();
    return val;
}
GLuint64 glGetTextureSamplerHandleARB(GLuint texture, GLuint sampler) {
    auto val = glad_glGetTextureSamplerHandleARB(GLuint texture, GLuint sampler);
    gl_check_error();
    return val;
}
void glMakeTextureHandleResidentARB(GLuint64 handle) {
    glad_glMakeTextureHandleResidentARB(GLuint64 handle);
    gl_check_error();
}
void glMakeTextureHandleNonResidentARB(GLuint64 handle) {
    glad_glMakeTextureHandleNonResidentARB(GLuint64 handle);
    gl_check_error();
}
GLuint64 glGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) {
    auto val = glad_glGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
    gl_check_error();
    return val;
}
void glMakeImageHandleResidentARB(GLuint64 handle, GLenum access) {
    glad_glMakeImageHandleResidentARB(GLuint64 handle, GLenum access);
    gl_check_error();
}
void glMakeImageHandleNonResidentARB(GLuint64 handle) {
    glad_glMakeImageHandleNonResidentARB(GLuint64 handle);
    gl_check_error();
}
void glUniformHandleui64ARB(GLint location, GLuint64 value) {
    glad_glUniformHandleui64ARB(GLint location, GLuint64 value);
    gl_check_error();
}
void glUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 *value) {
    glad_glUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 *value);
    gl_check_error();
}
void glProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value) {
    glad_glProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value);
    gl_check_error();
}
void glProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *values) {
    glad_glProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *values);
    gl_check_error();
}
GLboolean glIsTextureHandleResidentARB(GLuint64 handle) {
    auto val = glad_glIsTextureHandleResidentARB(GLuint64 handle);
    gl_check_error();
    return val;
}
GLboolean glIsImageHandleResidentARB(GLuint64 handle) {
    auto val = glad_glIsImageHandleResidentARB(GLuint64 handle);
    gl_check_error();
    return val;
}
void glVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x) {
    glad_glVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x);
    gl_check_error();
}
void glVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT *v) {
    glad_glVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT *v);
    gl_check_error();
}
void glGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT *params) {
    glad_glGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT *params);
    gl_check_error();
}
void glBufferStorage(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags) {
    glad_glBufferStorage(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
    gl_check_error();
}
GLsync glCreateSyncFromCLeventARB(struct _cl_context *context, struct _cl_event *event, GLbitfield flags) {
    auto val = glad_glCreateSyncFromCLeventARB(struct _cl_context *context, struct _cl_event *event, GLbitfield flags);
    gl_check_error();
    return val;
}
void glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data) {
    glad_glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
    gl_check_error();
}
void glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) {
    glad_glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
    gl_check_error();
}
void glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void *data) {
    glad_glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
    gl_check_error();
}
void glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data) {
    glad_glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
    gl_check_error();
}
void glClipControl(GLenum origin, GLenum depth) {
    glad_glClipControl(GLenum origin, GLenum depth);
    gl_check_error();
}
void glClampColorARB(GLenum target, GLenum clamp) {
    glad_glClampColorARB(GLenum target, GLenum clamp);
    gl_check_error();
}
void glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) {
    glad_glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
    gl_check_error();
}
void glDispatchComputeIndirect(GLintptr indirect) {
    glad_glDispatchComputeIndirect(GLintptr indirect);
    gl_check_error();
}
void glDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) {
    glad_glDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);
    gl_check_error();
}
void glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {
    glad_glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
    gl_check_error();
}
void glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) {
    glad_glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
    gl_check_error();
}
void glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) {
    glad_glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
    gl_check_error();
}
void glDebugMessageCallbackARB(GLDEBUGPROCARB callback, const void *userParam) {
    glad_glDebugMessageCallbackARB(GLDEBUGPROCARB callback, const void *userParam);
    gl_check_error();
}
GLuint glGetDebugMessageLogARB(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) {
    auto val = glad_glGetDebugMessageLogARB(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
    gl_check_error();
    return val;
}
void glCreateTransformFeedbacks(GLsizei n, GLuint *ids) {
    glad_glCreateTransformFeedbacks(GLsizei n, GLuint *ids);
    gl_check_error();
}
void glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer) {
    glad_glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer);
    gl_check_error();
}
void glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
    glad_glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
    gl_check_error();
}
void glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint *param) {
    glad_glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint *param);
    gl_check_error();
}
void glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint *param) {
    glad_glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint *param);
    gl_check_error();
}
void glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 *param) {
    glad_glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
    gl_check_error();
}
void glCreateBuffers(GLsizei n, GLuint *buffers) {
    glad_glCreateBuffers(GLsizei n, GLuint *buffers);
    gl_check_error();
}
void glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags) {
    glad_glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
    gl_check_error();
}
void glNamedBufferData(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage) {
    glad_glNamedBufferData(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
    gl_check_error();
}
void glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data) {
    glad_glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
    gl_check_error();
}
void glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
    glad_glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
    gl_check_error();
}
void glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data) {
    glad_glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
    gl_check_error();
}
void glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) {
    glad_glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
    gl_check_error();
}
void * glMapNamedBuffer(GLuint buffer, GLenum access) {
    glad_glMapNamedBuffer(GLuint buffer, GLenum access);
    gl_check_error();
}
void * glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) {
    glad_glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
    gl_check_error();
}
GLboolean glUnmapNamedBuffer(GLuint buffer) {
    auto val = glad_glUnmapNamedBuffer(GLuint buffer);
    gl_check_error();
    return val;
}
void glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length) {
    glad_glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length);
    gl_check_error();
}
void glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint *params) {
    glad_glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 *params) {
    glad_glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 *params);
    gl_check_error();
}
void glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void **params) {
    glad_glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void **params);
    gl_check_error();
}
void glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data) {
    glad_glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
    gl_check_error();
}
void glCreateFramebuffers(GLsizei n, GLuint *framebuffers) {
    glad_glCreateFramebuffers(GLsizei n, GLuint *framebuffers);
    gl_check_error();
}
void glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
    glad_glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
    gl_check_error();
}
void glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param) {
    glad_glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param);
    gl_check_error();
}
void glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) {
    glad_glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
    gl_check_error();
}
void glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) {
    glad_glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
    gl_check_error();
}
void glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf) {
    glad_glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf);
    gl_check_error();
}
void glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs) {
    glad_glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs);
    gl_check_error();
}
void glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src) {
    glad_glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src);
    gl_check_error();
}
void glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments) {
    glad_glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
    gl_check_error();
}
void glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
    gl_check_error();
}
void glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value) {
    glad_glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
    gl_check_error();
}
void glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value) {
    glad_glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
    gl_check_error();
}
void glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value) {
    glad_glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
    gl_check_error();
}
void glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {
    glad_glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
    gl_check_error();
}
void glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
    glad_glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
    gl_check_error();
}
GLenum glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target) {
    auto val = glad_glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target);
    gl_check_error();
    return val;
}
void glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint *param) {
    glad_glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint *param);
    gl_check_error();
}
void glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params) {
    glad_glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
    gl_check_error();
}
void glCreateRenderbuffers(GLsizei n, GLuint *renderbuffers) {
    glad_glCreateRenderbuffers(GLsizei n, GLuint *renderbuffers);
    gl_check_error();
}
void glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
    gl_check_error();
}
void glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
    gl_check_error();
}
void glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint *params) {
    glad_glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint *params);
    gl_check_error();
}
void glCreateTextures(GLenum target, GLsizei n, GLuint *textures) {
    glad_glCreateTextures(GLenum target, GLsizei n, GLuint *textures);
    gl_check_error();
}
void glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer) {
    glad_glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer);
    gl_check_error();
}
void glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
    glad_glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
    gl_check_error();
}
void glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) {
    glad_glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
    gl_check_error();
}
void glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
    gl_check_error();
}
void glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
    glad_glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
    gl_check_error();
}
void glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
    glad_glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
    gl_check_error();
}
void glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
    glad_glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
    gl_check_error();
}
void glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) {
    glad_glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {
    glad_glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) {
    glad_glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) {
    glad_glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
    gl_check_error();
}
void glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) {
    glad_glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
    gl_check_error();
}
void glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) {
    glad_glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
    gl_check_error();
}
void glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
    glad_glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
    gl_check_error();
}
void glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    gl_check_error();
}
void glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    gl_check_error();
}
void glTextureParameterf(GLuint texture, GLenum pname, GLfloat param) {
    glad_glTextureParameterf(GLuint texture, GLenum pname, GLfloat param);
    gl_check_error();
}
void glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat *param) {
    glad_glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat *param);
    gl_check_error();
}
void glTextureParameteri(GLuint texture, GLenum pname, GLint param) {
    glad_glTextureParameteri(GLuint texture, GLenum pname, GLint param);
    gl_check_error();
}
void glTextureParameterIiv(GLuint texture, GLenum pname, const GLint *params) {
    glad_glTextureParameterIiv(GLuint texture, GLenum pname, const GLint *params);
    gl_check_error();
}
void glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint *params) {
    glad_glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint *params);
    gl_check_error();
}
void glTextureParameteriv(GLuint texture, GLenum pname, const GLint *param) {
    glad_glTextureParameteriv(GLuint texture, GLenum pname, const GLint *param);
    gl_check_error();
}
void glGenerateTextureMipmap(GLuint texture) {
    glad_glGenerateTextureMipmap(GLuint texture);
    gl_check_error();
}
void glBindTextureUnit(GLuint unit, GLuint texture) {
    glad_glBindTextureUnit(GLuint unit, GLuint texture);
    gl_check_error();
}
void glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) {
    glad_glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
    gl_check_error();
}
void glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void *pixels) {
    glad_glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void *pixels);
    gl_check_error();
}
void glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat *params) {
    glad_glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint *params) {
    glad_glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat *params) {
    glad_glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint *params) {
    glad_glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint *params) {
    glad_glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint *params);
    gl_check_error();
}
void glGetTextureParameteriv(GLuint texture, GLenum pname, GLint *params) {
    glad_glGetTextureParameteriv(GLuint texture, GLenum pname, GLint *params);
    gl_check_error();
}
void glCreateVertexArrays(GLsizei n, GLuint *arrays) {
    glad_glCreateVertexArrays(GLsizei n, GLuint *arrays);
    gl_check_error();
}
void glDisableVertexArrayAttrib(GLuint vaobj, GLuint index) {
    glad_glDisableVertexArrayAttrib(GLuint vaobj, GLuint index);
    gl_check_error();
}
void glEnableVertexArrayAttrib(GLuint vaobj, GLuint index) {
    glad_glEnableVertexArrayAttrib(GLuint vaobj, GLuint index);
    gl_check_error();
}
void glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer) {
    glad_glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer);
    gl_check_error();
}
void glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
    glad_glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
    gl_check_error();
}
void glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides) {
    glad_glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
    gl_check_error();
}
void glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex) {
    glad_glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
    gl_check_error();
}
void glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
    glad_glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
    gl_check_error();
}
void glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
    glad_glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    gl_check_error();
}
void glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
    glad_glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    gl_check_error();
}
void glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor) {
    glad_glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor);
    gl_check_error();
}
void glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint *param) {
    glad_glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint *param);
    gl_check_error();
}
void glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint *param) {
    glad_glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
    gl_check_error();
}
void glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param) {
    glad_glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
    gl_check_error();
}
void glCreateSamplers(GLsizei n, GLuint *samplers) {
    glad_glCreateSamplers(GLsizei n, GLuint *samplers);
    gl_check_error();
}
void glCreateProgramPipelines(GLsizei n, GLuint *pipelines) {
    glad_glCreateProgramPipelines(GLsizei n, GLuint *pipelines);
    gl_check_error();
}
void glCreateQueries(GLenum target, GLsizei n, GLuint *ids) {
    glad_glCreateQueries(GLenum target, GLsizei n, GLuint *ids);
    gl_check_error();
}
void glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
    glad_glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
    gl_check_error();
}
void glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
    glad_glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
    gl_check_error();
}
void glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
    glad_glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
    gl_check_error();
}
void glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
    glad_glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
    gl_check_error();
}
void glDrawBuffersARB(GLsizei n, const GLenum *bufs) {
    glad_glDrawBuffersARB(GLsizei n, const GLenum *bufs);
    gl_check_error();
}
void glBlendEquationiARB(GLuint buf, GLenum mode) {
    glad_glBlendEquationiARB(GLuint buf, GLenum mode);
    gl_check_error();
}
void glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
    glad_glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
    gl_check_error();
}
void glBlendFunciARB(GLuint buf, GLenum src, GLenum dst) {
    glad_glBlendFunciARB(GLuint buf, GLenum src, GLenum dst);
    gl_check_error();
}
void glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
    glad_glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
    gl_check_error();
}
void glDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount) {
    glad_glDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
    gl_check_error();
}
void glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount) {
    glad_glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
    gl_check_error();
}
void glProgramStringARB(GLenum target, GLenum format, GLsizei len, const void *string) {
    glad_glProgramStringARB(GLenum target, GLenum format, GLsizei len, const void *string);
    gl_check_error();
}
void glBindProgramARB(GLenum target, GLuint program) {
    glad_glBindProgramARB(GLenum target, GLuint program);
    gl_check_error();
}
void glDeleteProgramsARB(GLsizei n, const GLuint *programs) {
    glad_glDeleteProgramsARB(GLsizei n, const GLuint *programs);
    gl_check_error();
}
void glGenProgramsARB(GLsizei n, GLuint *programs) {
    glad_glGenProgramsARB(GLsizei n, GLuint *programs);
    gl_check_error();
}
void glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    gl_check_error();
}
void glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params) {
    glad_glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params);
    gl_check_error();
}
void glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    gl_check_error();
}
void glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params) {
    glad_glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params);
    gl_check_error();
}
void glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    gl_check_error();
}
void glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params) {
    glad_glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params);
    gl_check_error();
}
void glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    gl_check_error();
}
void glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params) {
    glad_glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params);
    gl_check_error();
}
void glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params) {
    glad_glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params);
    gl_check_error();
}
void glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params) {
    glad_glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params);
    gl_check_error();
}
void glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params) {
    glad_glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params);
    gl_check_error();
}
void glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params) {
    glad_glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params);
    gl_check_error();
}
void glGetProgramivARB(GLenum target, GLenum pname, GLint *params) {
    glad_glGetProgramivARB(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetProgramStringARB(GLenum target, GLenum pname, void *string) {
    glad_glGetProgramStringARB(GLenum target, GLenum pname, void *string);
    gl_check_error();
}
GLboolean glIsProgramARB(GLuint program) {
    auto val = glad_glIsProgramARB(GLuint program);
    gl_check_error();
    return val;
}
void glFramebufferParameteri(GLenum target, GLenum pname, GLint param) {
    glad_glFramebufferParameteri(GLenum target, GLenum pname, GLint param);
    gl_check_error();
}
void glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params) {
    glad_glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glProgramParameteriARB(GLuint program, GLenum pname, GLint value) {
    glad_glProgramParameteriARB(GLuint program, GLenum pname, GLint value);
    gl_check_error();
}
void glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level) {
    glad_glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level);
    gl_check_error();
}
void glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
    glad_glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
    gl_check_error();
}
void glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) {
    glad_glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
    gl_check_error();
}
void glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels) {
    glad_glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
    gl_check_error();
}
void glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels) {
    glad_glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
    gl_check_error();
}
void glSpecializeShaderARB(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue) {
    glad_glSpecializeShaderARB(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
    gl_check_error();
}
void glUniform1i64ARB(GLint location, GLint64 x) {
    glad_glUniform1i64ARB(GLint location, GLint64 x);
    gl_check_error();
}
void glUniform2i64ARB(GLint location, GLint64 x, GLint64 y) {
    glad_glUniform2i64ARB(GLint location, GLint64 x, GLint64 y);
    gl_check_error();
}
void glUniform3i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z) {
    glad_glUniform3i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z);
    gl_check_error();
}
void glUniform4i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) {
    glad_glUniform4i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
    gl_check_error();
}
void glUniform1i64vARB(GLint location, GLsizei count, const GLint64 *value) {
    glad_glUniform1i64vARB(GLint location, GLsizei count, const GLint64 *value);
    gl_check_error();
}
void glUniform2i64vARB(GLint location, GLsizei count, const GLint64 *value) {
    glad_glUniform2i64vARB(GLint location, GLsizei count, const GLint64 *value);
    gl_check_error();
}
void glUniform3i64vARB(GLint location, GLsizei count, const GLint64 *value) {
    glad_glUniform3i64vARB(GLint location, GLsizei count, const GLint64 *value);
    gl_check_error();
}
void glUniform4i64vARB(GLint location, GLsizei count, const GLint64 *value) {
    glad_glUniform4i64vARB(GLint location, GLsizei count, const GLint64 *value);
    gl_check_error();
}
void glUniform1ui64ARB(GLint location, GLuint64 x) {
    glad_glUniform1ui64ARB(GLint location, GLuint64 x);
    gl_check_error();
}
void glUniform2ui64ARB(GLint location, GLuint64 x, GLuint64 y) {
    glad_glUniform2ui64ARB(GLint location, GLuint64 x, GLuint64 y);
    gl_check_error();
}
void glUniform3ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z) {
    glad_glUniform3ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
    gl_check_error();
}
void glUniform4ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) {
    glad_glUniform4ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
    gl_check_error();
}
void glUniform1ui64vARB(GLint location, GLsizei count, const GLuint64 *value) {
    glad_glUniform1ui64vARB(GLint location, GLsizei count, const GLuint64 *value);
    gl_check_error();
}
void glUniform2ui64vARB(GLint location, GLsizei count, const GLuint64 *value) {
    glad_glUniform2ui64vARB(GLint location, GLsizei count, const GLuint64 *value);
    gl_check_error();
}
void glUniform3ui64vARB(GLint location, GLsizei count, const GLuint64 *value) {
    glad_glUniform3ui64vARB(GLint location, GLsizei count, const GLuint64 *value);
    gl_check_error();
}
void glUniform4ui64vARB(GLint location, GLsizei count, const GLuint64 *value) {
    glad_glUniform4ui64vARB(GLint location, GLsizei count, const GLuint64 *value);
    gl_check_error();
}
void glGetUniformi64vARB(GLuint program, GLint location, GLint64 *params) {
    glad_glGetUniformi64vARB(GLuint program, GLint location, GLint64 *params);
    gl_check_error();
}
void glGetUniformui64vARB(GLuint program, GLint location, GLuint64 *params) {
    glad_glGetUniformui64vARB(GLuint program, GLint location, GLuint64 *params);
    gl_check_error();
}
void glGetnUniformi64vARB(GLuint program, GLint location, GLsizei bufSize, GLint64 *params) {
    glad_glGetnUniformi64vARB(GLuint program, GLint location, GLsizei bufSize, GLint64 *params);
    gl_check_error();
}
void glGetnUniformui64vARB(GLuint program, GLint location, GLsizei bufSize, GLuint64 *params) {
    glad_glGetnUniformui64vARB(GLuint program, GLint location, GLsizei bufSize, GLuint64 *params);
    gl_check_error();
}
void glProgramUniform1i64ARB(GLuint program, GLint location, GLint64 x) {
    glad_glProgramUniform1i64ARB(GLuint program, GLint location, GLint64 x);
    gl_check_error();
}
void glProgramUniform2i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y) {
    glad_glProgramUniform2i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y);
    gl_check_error();
}
void glProgramUniform3i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z) {
    glad_glProgramUniform3i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z);
    gl_check_error();
}
void glProgramUniform4i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) {
    glad_glProgramUniform4i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
    gl_check_error();
}
void glProgramUniform1i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value) {
    glad_glProgramUniform1i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value);
    gl_check_error();
}
void glProgramUniform2i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value) {
    glad_glProgramUniform2i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value);
    gl_check_error();
}
void glProgramUniform3i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value) {
    glad_glProgramUniform3i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value);
    gl_check_error();
}
void glProgramUniform4i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value) {
    glad_glProgramUniform4i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value);
    gl_check_error();
}
void glProgramUniform1ui64ARB(GLuint program, GLint location, GLuint64 x) {
    glad_glProgramUniform1ui64ARB(GLuint program, GLint location, GLuint64 x);
    gl_check_error();
}
void glProgramUniform2ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y) {
    glad_glProgramUniform2ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y);
    gl_check_error();
}
void glProgramUniform3ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z) {
    glad_glProgramUniform3ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
    gl_check_error();
}
void glProgramUniform4ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) {
    glad_glProgramUniform4ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
    gl_check_error();
}
void glProgramUniform1ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value) {
    glad_glProgramUniform1ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
    gl_check_error();
}
void glProgramUniform2ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value) {
    glad_glProgramUniform2ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
    gl_check_error();
}
void glProgramUniform3ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value) {
    glad_glProgramUniform3ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
    gl_check_error();
}
void glProgramUniform4ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value) {
    glad_glProgramUniform4ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
    gl_check_error();
}
void glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table) {
    glad_glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table);
    gl_check_error();
}
void glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params) {
    glad_glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params) {
    glad_glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params);
    gl_check_error();
}
void glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
    glad_glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
    gl_check_error();
}
void glGetColorTable(GLenum target, GLenum format, GLenum type, void *table) {
    glad_glGetColorTable(GLenum target, GLenum format, GLenum type, void *table);
    gl_check_error();
}
void glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params) {
    glad_glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params) {
    glad_glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data) {
    glad_glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data);
    gl_check_error();
}
void glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) {
    glad_glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
    gl_check_error();
}
void glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image) {
    glad_glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image);
    gl_check_error();
}
void glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image) {
    glad_glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image);
    gl_check_error();
}
void glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params) {
    glad_glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params);
    gl_check_error();
}
void glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params) {
    glad_glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glConvolutionParameteri(GLenum target, GLenum pname, GLint params) {
    glad_glConvolutionParameteri(GLenum target, GLenum pname, GLint params);
    gl_check_error();
}
void glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params) {
    glad_glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params);
    gl_check_error();
}
void glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
    glad_glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
    gl_check_error();
}
void glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
    gl_check_error();
}
void glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, void *image) {
    glad_glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, void *image);
    gl_check_error();
}
void glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params) {
    glad_glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params) {
    glad_glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span) {
    glad_glGetSeparableFilter(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span);
    gl_check_error();
}
void glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column) {
    glad_glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column);
    gl_check_error();
}
void glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) {
    glad_glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
    gl_check_error();
}
void glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params) {
    glad_glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params) {
    glad_glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) {
    glad_glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
    gl_check_error();
}
void glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params) {
    glad_glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params) {
    glad_glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) {
    glad_glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
    gl_check_error();
}
void glMinmax(GLenum target, GLenum internalformat, GLboolean sink) {
    glad_glMinmax(GLenum target, GLenum internalformat, GLboolean sink);
    gl_check_error();
}
void glResetHistogram(GLenum target) {
    glad_glResetHistogram(GLenum target);
    gl_check_error();
}
void glResetMinmax(GLenum target) {
    glad_glResetMinmax(GLenum target);
    gl_check_error();
}
void glMultiDrawArraysIndirectCountARB(GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
    glad_glMultiDrawArraysIndirectCountARB(GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
    gl_check_error();
}
void glMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
    glad_glMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
    gl_check_error();
}
void glVertexAttribDivisorARB(GLuint index, GLuint divisor) {
    glad_glVertexAttribDivisorARB(GLuint index, GLuint divisor);
    gl_check_error();
}
void glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 *params) {
    glad_glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 *params);
    gl_check_error();
}
void glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) {
    glad_glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
    gl_check_error();
}
void glInvalidateTexImage(GLuint texture, GLint level) {
    glad_glInvalidateTexImage(GLuint texture, GLint level);
    gl_check_error();
}
void glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length) {
    glad_glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length);
    gl_check_error();
}
void glInvalidateBufferData(GLuint buffer) {
    glad_glInvalidateBufferData(GLuint buffer);
    gl_check_error();
}
void glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments) {
    glad_glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments);
    gl_check_error();
}
void glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
    gl_check_error();
}
void glCurrentPaletteMatrixARB(GLint index) {
    glad_glCurrentPaletteMatrixARB(GLint index);
    gl_check_error();
}
void glMatrixIndexubvARB(GLint size, const GLubyte *indices) {
    glad_glMatrixIndexubvARB(GLint size, const GLubyte *indices);
    gl_check_error();
}
void glMatrixIndexusvARB(GLint size, const GLushort *indices) {
    glad_glMatrixIndexusvARB(GLint size, const GLushort *indices);
    gl_check_error();
}
void glMatrixIndexuivARB(GLint size, const GLuint *indices) {
    glad_glMatrixIndexuivARB(GLint size, const GLuint *indices);
    gl_check_error();
}
void glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const void *pointer) {
    glad_glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const void *pointer);
    gl_check_error();
}
void glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers) {
    glad_glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
    gl_check_error();
}
void glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes) {
    glad_glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
    gl_check_error();
}
void glBindTextures(GLuint first, GLsizei count, const GLuint *textures) {
    glad_glBindTextures(GLuint first, GLsizei count, const GLuint *textures);
    gl_check_error();
}
void glBindSamplers(GLuint first, GLsizei count, const GLuint *samplers) {
    glad_glBindSamplers(GLuint first, GLsizei count, const GLuint *samplers);
    gl_check_error();
}
void glBindImageTextures(GLuint first, GLsizei count, const GLuint *textures) {
    glad_glBindImageTextures(GLuint first, GLsizei count, const GLuint *textures);
    gl_check_error();
}
void glBindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides) {
    glad_glBindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
    gl_check_error();
}
void glMultiDrawArraysIndirect(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride) {
    glad_glMultiDrawArraysIndirect(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
    gl_check_error();
}
void glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride) {
    glad_glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
    gl_check_error();
}
void glSampleCoverageARB(GLfloat value, GLboolean invert) {
    glad_glSampleCoverageARB(GLfloat value, GLboolean invert);
    gl_check_error();
}
void glActiveTextureARB(GLenum texture) {
    glad_glActiveTextureARB(GLenum texture);
    gl_check_error();
}
void glClientActiveTextureARB(GLenum texture) {
    glad_glClientActiveTextureARB(GLenum texture);
    gl_check_error();
}
void glMultiTexCoord1dARB(GLenum target, GLdouble s) {
    glad_glMultiTexCoord1dARB(GLenum target, GLdouble s);
    gl_check_error();
}
void glMultiTexCoord1dvARB(GLenum target, const GLdouble *v) {
    glad_glMultiTexCoord1dvARB(GLenum target, const GLdouble *v);
    gl_check_error();
}
void glMultiTexCoord1fARB(GLenum target, GLfloat s) {
    glad_glMultiTexCoord1fARB(GLenum target, GLfloat s);
    gl_check_error();
}
void glMultiTexCoord1fvARB(GLenum target, const GLfloat *v) {
    glad_glMultiTexCoord1fvARB(GLenum target, const GLfloat *v);
    gl_check_error();
}
void glMultiTexCoord1iARB(GLenum target, GLint s) {
    glad_glMultiTexCoord1iARB(GLenum target, GLint s);
    gl_check_error();
}
void glMultiTexCoord1ivARB(GLenum target, const GLint *v) {
    glad_glMultiTexCoord1ivARB(GLenum target, const GLint *v);
    gl_check_error();
}
void glMultiTexCoord1sARB(GLenum target, GLshort s) {
    glad_glMultiTexCoord1sARB(GLenum target, GLshort s);
    gl_check_error();
}
void glMultiTexCoord1svARB(GLenum target, const GLshort *v) {
    glad_glMultiTexCoord1svARB(GLenum target, const GLshort *v);
    gl_check_error();
}
void glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t) {
    glad_glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t);
    gl_check_error();
}
void glMultiTexCoord2dvARB(GLenum target, const GLdouble *v) {
    glad_glMultiTexCoord2dvARB(GLenum target, const GLdouble *v);
    gl_check_error();
}
void glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t) {
    glad_glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t);
    gl_check_error();
}
void glMultiTexCoord2fvARB(GLenum target, const GLfloat *v) {
    glad_glMultiTexCoord2fvARB(GLenum target, const GLfloat *v);
    gl_check_error();
}
void glMultiTexCoord2iARB(GLenum target, GLint s, GLint t) {
    glad_glMultiTexCoord2iARB(GLenum target, GLint s, GLint t);
    gl_check_error();
}
void glMultiTexCoord2ivARB(GLenum target, const GLint *v) {
    glad_glMultiTexCoord2ivARB(GLenum target, const GLint *v);
    gl_check_error();
}
void glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t) {
    glad_glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t);
    gl_check_error();
}
void glMultiTexCoord2svARB(GLenum target, const GLshort *v) {
    glad_glMultiTexCoord2svARB(GLenum target, const GLshort *v);
    gl_check_error();
}
void glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r) {
    glad_glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r);
    gl_check_error();
}
void glMultiTexCoord3dvARB(GLenum target, const GLdouble *v) {
    glad_glMultiTexCoord3dvARB(GLenum target, const GLdouble *v);
    gl_check_error();
}
void glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r) {
    glad_glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r);
    gl_check_error();
}
void glMultiTexCoord3fvARB(GLenum target, const GLfloat *v) {
    glad_glMultiTexCoord3fvARB(GLenum target, const GLfloat *v);
    gl_check_error();
}
void glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r) {
    glad_glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r);
    gl_check_error();
}
void glMultiTexCoord3ivARB(GLenum target, const GLint *v) {
    glad_glMultiTexCoord3ivARB(GLenum target, const GLint *v);
    gl_check_error();
}
void glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r) {
    glad_glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r);
    gl_check_error();
}
void glMultiTexCoord3svARB(GLenum target, const GLshort *v) {
    glad_glMultiTexCoord3svARB(GLenum target, const GLshort *v);
    gl_check_error();
}
void glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
    glad_glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
    gl_check_error();
}
void glMultiTexCoord4dvARB(GLenum target, const GLdouble *v) {
    glad_glMultiTexCoord4dvARB(GLenum target, const GLdouble *v);
    gl_check_error();
}
void glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
    glad_glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
    gl_check_error();
}
void glMultiTexCoord4fvARB(GLenum target, const GLfloat *v) {
    glad_glMultiTexCoord4fvARB(GLenum target, const GLfloat *v);
    gl_check_error();
}
void glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q) {
    glad_glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q);
    gl_check_error();
}
void glMultiTexCoord4ivARB(GLenum target, const GLint *v) {
    glad_glMultiTexCoord4ivARB(GLenum target, const GLint *v);
    gl_check_error();
}
void glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) {
    glad_glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
    gl_check_error();
}
void glMultiTexCoord4svARB(GLenum target, const GLshort *v) {
    glad_glMultiTexCoord4svARB(GLenum target, const GLshort *v);
    gl_check_error();
}
void glGenQueriesARB(GLsizei n, GLuint *ids) {
    glad_glGenQueriesARB(GLsizei n, GLuint *ids);
    gl_check_error();
}
void glDeleteQueriesARB(GLsizei n, const GLuint *ids) {
    glad_glDeleteQueriesARB(GLsizei n, const GLuint *ids);
    gl_check_error();
}
GLboolean glIsQueryARB(GLuint id) {
    auto val = glad_glIsQueryARB(GLuint id);
    gl_check_error();
    return val;
}
void glBeginQueryARB(GLenum target, GLuint id) {
    glad_glBeginQueryARB(GLenum target, GLuint id);
    gl_check_error();
}
void glEndQueryARB(GLenum target) {
    glad_glEndQueryARB(GLenum target);
    gl_check_error();
}
void glGetQueryivARB(GLenum target, GLenum pname, GLint *params) {
    glad_glGetQueryivARB(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params) {
    glad_glGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params) {
    glad_glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params);
    gl_check_error();
}
void glMaxShaderCompilerThreadsARB(GLuint count) {
    glad_glMaxShaderCompilerThreadsARB(GLuint count);
    gl_check_error();
}
void glPointParameterfARB(GLenum pname, GLfloat param) {
    glad_glPointParameterfARB(GLenum pname, GLfloat param);
    gl_check_error();
}
void glPointParameterfvARB(GLenum pname, const GLfloat *params) {
    glad_glPointParameterfvARB(GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp) {
    glad_glPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp);
    gl_check_error();
}
void glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params) {
    glad_glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
    gl_check_error();
}
GLuint glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name) {
    auto val = glad_glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name);
    gl_check_error();
    return val;
}
void glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) {
    glad_glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
    gl_check_error();
}
void glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLint *params) {
    glad_glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLint *params);
    gl_check_error();
}
GLint glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name) {
    auto val = glad_glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name);
    gl_check_error();
    return val;
}
GLint glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name) {
    auto val = glad_glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name);
    gl_check_error();
    return val;
}
GLenum glGetGraphicsResetStatusARB(void) {
    auto val = glad_glGetGraphicsResetStatusARB(void);
    gl_check_error();
    return val;
}
void glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img) {
    glad_glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img);
    gl_check_error();
}
void glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) {
    glad_glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
    gl_check_error();
}
void glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, void *img) {
    glad_glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, void *img);
    gl_check_error();
}
void glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params) {
    glad_glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
    gl_check_error();
}
void glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params) {
    glad_glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params);
    gl_check_error();
}
void glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params) {
    glad_glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
    gl_check_error();
}
void glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params) {
    glad_glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
    gl_check_error();
}
void glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v) {
    glad_glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
    gl_check_error();
}
void glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v) {
    glad_glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
    gl_check_error();
}
void glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint *v) {
    glad_glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint *v);
    gl_check_error();
}
void glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat *values) {
    glad_glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat *values);
    gl_check_error();
}
void glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint *values) {
    glad_glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint *values);
    gl_check_error();
}
void glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort *values) {
    glad_glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort *values);
    gl_check_error();
}
void glGetnPolygonStippleARB(GLsizei bufSize, GLubyte *pattern) {
    glad_glGetnPolygonStippleARB(GLsizei bufSize, GLubyte *pattern);
    gl_check_error();
}
void glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table) {
    glad_glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table);
    gl_check_error();
}
void glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image) {
    glad_glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image);
    gl_check_error();
}
void glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span) {
    glad_glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span);
    gl_check_error();
}
void glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) {
    glad_glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
    gl_check_error();
}
void glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) {
    glad_glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
    gl_check_error();
}
void glFramebufferSampleLocationsfvARB(GLenum target, GLuint start, GLsizei count, const GLfloat *v) {
    glad_glFramebufferSampleLocationsfvARB(GLenum target, GLuint start, GLsizei count, const GLfloat *v);
    gl_check_error();
}
void glNamedFramebufferSampleLocationsfvARB(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v) {
    glad_glNamedFramebufferSampleLocationsfvARB(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
    gl_check_error();
}
void glEvaluateDepthValuesARB(void) {
    glad_glEvaluateDepthValuesARB(void);
    gl_check_error();
}
void glMinSampleShadingARB(GLfloat value) {
    glad_glMinSampleShadingARB(GLfloat value);
    gl_check_error();
}
void glDeleteObjectARB(GLhandleARB obj) {
    glad_glDeleteObjectARB(GLhandleARB obj);
    gl_check_error();
}
GLhandleARB glGetHandleARB(GLenum pname) {
    auto val = glad_glGetHandleARB(GLenum pname);
    gl_check_error();
    return val;
}
void glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj) {
    glad_glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj);
    gl_check_error();
}
GLhandleARB glCreateShaderObjectARB(GLenum shaderType) {
    auto val = glad_glCreateShaderObjectARB(GLenum shaderType);
    gl_check_error();
    return val;
}
void glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length) {
    glad_glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length);
    gl_check_error();
}
void glCompileShaderARB(GLhandleARB shaderObj) {
    glad_glCompileShaderARB(GLhandleARB shaderObj);
    gl_check_error();
}
GLhandleARB glCreateProgramObjectARB(void) {
    auto val = glad_glCreateProgramObjectARB(void);
    gl_check_error();
    return val;
}
void glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj) {
    glad_glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj);
    gl_check_error();
}
void glLinkProgramARB(GLhandleARB programObj) {
    glad_glLinkProgramARB(GLhandleARB programObj);
    gl_check_error();
}
void glUseProgramObjectARB(GLhandleARB programObj) {
    glad_glUseProgramObjectARB(GLhandleARB programObj);
    gl_check_error();
}
void glValidateProgramARB(GLhandleARB programObj) {
    glad_glValidateProgramARB(GLhandleARB programObj);
    gl_check_error();
}
void glUniform1fARB(GLint location, GLfloat v0) {
    glad_glUniform1fARB(GLint location, GLfloat v0);
    gl_check_error();
}
void glUniform2fARB(GLint location, GLfloat v0, GLfloat v1) {
    glad_glUniform2fARB(GLint location, GLfloat v0, GLfloat v1);
    gl_check_error();
}
void glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
    glad_glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
    gl_check_error();
}
void glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
    glad_glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
    gl_check_error();
}
void glUniform1iARB(GLint location, GLint v0) {
    glad_glUniform1iARB(GLint location, GLint v0);
    gl_check_error();
}
void glUniform2iARB(GLint location, GLint v0, GLint v1) {
    glad_glUniform2iARB(GLint location, GLint v0, GLint v1);
    gl_check_error();
}
void glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2) {
    glad_glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2);
    gl_check_error();
}
void glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
    glad_glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
    gl_check_error();
}
void glUniform1fvARB(GLint location, GLsizei count, const GLfloat *value) {
    glad_glUniform1fvARB(GLint location, GLsizei count, const GLfloat *value);
    gl_check_error();
}
void glUniform2fvARB(GLint location, GLsizei count, const GLfloat *value) {
    glad_glUniform2fvARB(GLint location, GLsizei count, const GLfloat *value);
    gl_check_error();
}
void glUniform3fvARB(GLint location, GLsizei count, const GLfloat *value) {
    glad_glUniform3fvARB(GLint location, GLsizei count, const GLfloat *value);
    gl_check_error();
}
void glUniform4fvARB(GLint location, GLsizei count, const GLfloat *value) {
    glad_glUniform4fvARB(GLint location, GLsizei count, const GLfloat *value);
    gl_check_error();
}
void glUniform1ivARB(GLint location, GLsizei count, const GLint *value) {
    glad_glUniform1ivARB(GLint location, GLsizei count, const GLint *value);
    gl_check_error();
}
void glUniform2ivARB(GLint location, GLsizei count, const GLint *value) {
    glad_glUniform2ivARB(GLint location, GLsizei count, const GLint *value);
    gl_check_error();
}
void glUniform3ivARB(GLint location, GLsizei count, const GLint *value) {
    glad_glUniform3ivARB(GLint location, GLsizei count, const GLint *value);
    gl_check_error();
}
void glUniform4ivARB(GLint location, GLsizei count, const GLint *value) {
    glad_glUniform4ivARB(GLint location, GLsizei count, const GLint *value);
    gl_check_error();
}
void glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params) {
    glad_glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params) {
    glad_glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog) {
    glad_glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
    gl_check_error();
}
void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj) {
    glad_glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);
    gl_check_error();
}
GLint glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name) {
    auto val = glad_glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name);
    gl_check_error();
    return val;
}
void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name) {
    glad_glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
    gl_check_error();
}
void glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat *params) {
    glad_glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat *params);
    gl_check_error();
}
void glGetUniformivARB(GLhandleARB programObj, GLint location, GLint *params) {
    glad_glGetUniformivARB(GLhandleARB programObj, GLint location, GLint *params);
    gl_check_error();
}
void glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source) {
    glad_glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source);
    gl_check_error();
}
void glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) {
    glad_glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
    gl_check_error();
}
void glNamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string) {
    glad_glNamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
    gl_check_error();
}
void glDeleteNamedStringARB(GLint namelen, const GLchar *name) {
    glad_glDeleteNamedStringARB(GLint namelen, const GLchar *name);
    gl_check_error();
}
void glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length) {
    glad_glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length);
    gl_check_error();
}
GLboolean glIsNamedStringARB(GLint namelen, const GLchar *name) {
    auto val = glad_glIsNamedStringARB(GLint namelen, const GLchar *name);
    gl_check_error();
    return val;
}
void glGetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string) {
    glad_glGetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
    gl_check_error();
}
void glGetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params) {
    glad_glGetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params);
    gl_check_error();
}
void glBufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit) {
    glad_glBufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit);
    gl_check_error();
}
void glNamedBufferPageCommitmentEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) {
    glad_glNamedBufferPageCommitmentEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
    gl_check_error();
}
void glNamedBufferPageCommitmentARB(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) {
    glad_glNamedBufferPageCommitmentARB(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
    gl_check_error();
}
void glTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) {
    glad_glTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
    gl_check_error();
}
void glTextureBarrier(void) {
    glad_glTextureBarrier(void);
    gl_check_error();
}
void glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer) {
    glad_glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer);
    gl_check_error();
}
void glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
    glad_glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
    gl_check_error();
}
void glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data) {
    glad_glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
    gl_check_error();
}
void glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data) {
    glad_glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
    gl_check_error();
}
void glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data) {
    glad_glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
    gl_check_error();
}
void glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) {
    glad_glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
    gl_check_error();
}
void glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) {
    glad_glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
    gl_check_error();
}
void glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) {
    glad_glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
    gl_check_error();
}
void glGetCompressedTexImageARB(GLenum target, GLint level, void *img) {
    glad_glGetCompressedTexImageARB(GLenum target, GLint level, void *img);
    gl_check_error();
}
void glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
    glad_glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
    gl_check_error();
}
void glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
    glad_glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
    gl_check_error();
}
void glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) {
    glad_glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
    gl_check_error();
}
void glLoadTransposeMatrixfARB(const GLfloat *m) {
    glad_glLoadTransposeMatrixfARB(const GLfloat *m);
    gl_check_error();
}
void glLoadTransposeMatrixdARB(const GLdouble *m) {
    glad_glLoadTransposeMatrixdARB(const GLdouble *m);
    gl_check_error();
}
void glMultTransposeMatrixfARB(const GLfloat *m) {
    glad_glMultTransposeMatrixfARB(const GLfloat *m);
    gl_check_error();
}
void glMultTransposeMatrixdARB(const GLdouble *m) {
    glad_glMultTransposeMatrixdARB(const GLdouble *m);
    gl_check_error();
}
void glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
    glad_glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
    gl_check_error();
}
void glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
    glad_glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
    gl_check_error();
}
void glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
    glad_glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    gl_check_error();
}
void glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
    glad_glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    gl_check_error();
}
void glVertexAttribBinding(GLuint attribindex, GLuint bindingindex) {
    glad_glVertexAttribBinding(GLuint attribindex, GLuint bindingindex);
    gl_check_error();
}
void glVertexBindingDivisor(GLuint bindingindex, GLuint divisor) {
    glad_glVertexBindingDivisor(GLuint bindingindex, GLuint divisor);
    gl_check_error();
}
void glWeightbvARB(GLint size, const GLbyte *weights) {
    glad_glWeightbvARB(GLint size, const GLbyte *weights);
    gl_check_error();
}
void glWeightsvARB(GLint size, const GLshort *weights) {
    glad_glWeightsvARB(GLint size, const GLshort *weights);
    gl_check_error();
}
void glWeightivARB(GLint size, const GLint *weights) {
    glad_glWeightivARB(GLint size, const GLint *weights);
    gl_check_error();
}
void glWeightfvARB(GLint size, const GLfloat *weights) {
    glad_glWeightfvARB(GLint size, const GLfloat *weights);
    gl_check_error();
}
void glWeightdvARB(GLint size, const GLdouble *weights) {
    glad_glWeightdvARB(GLint size, const GLdouble *weights);
    gl_check_error();
}
void glWeightubvARB(GLint size, const GLubyte *weights) {
    glad_glWeightubvARB(GLint size, const GLubyte *weights);
    gl_check_error();
}
void glWeightusvARB(GLint size, const GLushort *weights) {
    glad_glWeightusvARB(GLint size, const GLushort *weights);
    gl_check_error();
}
void glWeightuivARB(GLint size, const GLuint *weights) {
    glad_glWeightuivARB(GLint size, const GLuint *weights);
    gl_check_error();
}
void glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const void *pointer) {
    glad_glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const void *pointer);
    gl_check_error();
}
void glVertexBlendARB(GLint count) {
    glad_glVertexBlendARB(GLint count);
    gl_check_error();
}
void glBindBufferARB(GLenum target, GLuint buffer) {
    glad_glBindBufferARB(GLenum target, GLuint buffer);
    gl_check_error();
}
void glDeleteBuffersARB(GLsizei n, const GLuint *buffers) {
    glad_glDeleteBuffersARB(GLsizei n, const GLuint *buffers);
    gl_check_error();
}
void glGenBuffersARB(GLsizei n, GLuint *buffers) {
    glad_glGenBuffersARB(GLsizei n, GLuint *buffers);
    gl_check_error();
}
GLboolean glIsBufferARB(GLuint buffer) {
    auto val = glad_glIsBufferARB(GLuint buffer);
    gl_check_error();
    return val;
}
void glBufferDataARB(GLenum target, GLsizeiptrARB size, const void *data, GLenum usage) {
    glad_glBufferDataARB(GLenum target, GLsizeiptrARB size, const void *data, GLenum usage);
    gl_check_error();
}
void glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data) {
    glad_glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data);
    gl_check_error();
}
void glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data) {
    glad_glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data);
    gl_check_error();
}
void * glMapBufferARB(GLenum target, GLenum access) {
    glad_glMapBufferARB(GLenum target, GLenum access);
    gl_check_error();
}
GLboolean glUnmapBufferARB(GLenum target) {
    auto val = glad_glUnmapBufferARB(GLenum target);
    gl_check_error();
    return val;
}
void glGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params) {
    glad_glGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetBufferPointervARB(GLenum target, GLenum pname, void **params) {
    glad_glGetBufferPointervARB(GLenum target, GLenum pname, void **params);
    gl_check_error();
}
void glVertexAttrib1dARB(GLuint index, GLdouble x) {
    glad_glVertexAttrib1dARB(GLuint index, GLdouble x);
    gl_check_error();
}
void glVertexAttrib1dvARB(GLuint index, const GLdouble *v) {
    glad_glVertexAttrib1dvARB(GLuint index, const GLdouble *v);
    gl_check_error();
}
void glVertexAttrib1fARB(GLuint index, GLfloat x) {
    glad_glVertexAttrib1fARB(GLuint index, GLfloat x);
    gl_check_error();
}
void glVertexAttrib1fvARB(GLuint index, const GLfloat *v) {
    glad_glVertexAttrib1fvARB(GLuint index, const GLfloat *v);
    gl_check_error();
}
void glVertexAttrib1sARB(GLuint index, GLshort x) {
    glad_glVertexAttrib1sARB(GLuint index, GLshort x);
    gl_check_error();
}
void glVertexAttrib1svARB(GLuint index, const GLshort *v) {
    glad_glVertexAttrib1svARB(GLuint index, const GLshort *v);
    gl_check_error();
}
void glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y) {
    glad_glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y);
    gl_check_error();
}
void glVertexAttrib2dvARB(GLuint index, const GLdouble *v) {
    glad_glVertexAttrib2dvARB(GLuint index, const GLdouble *v);
    gl_check_error();
}
void glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y) {
    glad_glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y);
    gl_check_error();
}
void glVertexAttrib2fvARB(GLuint index, const GLfloat *v) {
    glad_glVertexAttrib2fvARB(GLuint index, const GLfloat *v);
    gl_check_error();
}
void glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y) {
    glad_glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y);
    gl_check_error();
}
void glVertexAttrib2svARB(GLuint index, const GLshort *v) {
    glad_glVertexAttrib2svARB(GLuint index, const GLshort *v);
    gl_check_error();
}
void glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
    glad_glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z);
    gl_check_error();
}
void glVertexAttrib3dvARB(GLuint index, const GLdouble *v) {
    glad_glVertexAttrib3dvARB(GLuint index, const GLdouble *v);
    gl_check_error();
}
void glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
    glad_glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glVertexAttrib3fvARB(GLuint index, const GLfloat *v) {
    glad_glVertexAttrib3fvARB(GLuint index, const GLfloat *v);
    gl_check_error();
}
void glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z) {
    glad_glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z);
    gl_check_error();
}
void glVertexAttrib3svARB(GLuint index, const GLshort *v) {
    glad_glVertexAttrib3svARB(GLuint index, const GLshort *v);
    gl_check_error();
}
void glVertexAttrib4NbvARB(GLuint index, const GLbyte *v) {
    glad_glVertexAttrib4NbvARB(GLuint index, const GLbyte *v);
    gl_check_error();
}
void glVertexAttrib4NivARB(GLuint index, const GLint *v) {
    glad_glVertexAttrib4NivARB(GLuint index, const GLint *v);
    gl_check_error();
}
void glVertexAttrib4NsvARB(GLuint index, const GLshort *v) {
    glad_glVertexAttrib4NsvARB(GLuint index, const GLshort *v);
    gl_check_error();
}
void glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
    glad_glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
    gl_check_error();
}
void glVertexAttrib4NubvARB(GLuint index, const GLubyte *v) {
    glad_glVertexAttrib4NubvARB(GLuint index, const GLubyte *v);
    gl_check_error();
}
void glVertexAttrib4NuivARB(GLuint index, const GLuint *v) {
    glad_glVertexAttrib4NuivARB(GLuint index, const GLuint *v);
    gl_check_error();
}
void glVertexAttrib4NusvARB(GLuint index, const GLushort *v) {
    glad_glVertexAttrib4NusvARB(GLuint index, const GLushort *v);
    gl_check_error();
}
void glVertexAttrib4bvARB(GLuint index, const GLbyte *v) {
    glad_glVertexAttrib4bvARB(GLuint index, const GLbyte *v);
    gl_check_error();
}
void glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    gl_check_error();
}
void glVertexAttrib4dvARB(GLuint index, const GLdouble *v) {
    glad_glVertexAttrib4dvARB(GLuint index, const GLdouble *v);
    gl_check_error();
}
void glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    gl_check_error();
}
void glVertexAttrib4fvARB(GLuint index, const GLfloat *v) {
    glad_glVertexAttrib4fvARB(GLuint index, const GLfloat *v);
    gl_check_error();
}
void glVertexAttrib4ivARB(GLuint index, const GLint *v) {
    glad_glVertexAttrib4ivARB(GLuint index, const GLint *v);
    gl_check_error();
}
void glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
    glad_glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
    gl_check_error();
}
void glVertexAttrib4svARB(GLuint index, const GLshort *v) {
    glad_glVertexAttrib4svARB(GLuint index, const GLshort *v);
    gl_check_error();
}
void glVertexAttrib4ubvARB(GLuint index, const GLubyte *v) {
    glad_glVertexAttrib4ubvARB(GLuint index, const GLubyte *v);
    gl_check_error();
}
void glVertexAttrib4uivARB(GLuint index, const GLuint *v) {
    glad_glVertexAttrib4uivARB(GLuint index, const GLuint *v);
    gl_check_error();
}
void glVertexAttrib4usvARB(GLuint index, const GLushort *v) {
    glad_glVertexAttrib4usvARB(GLuint index, const GLushort *v);
    gl_check_error();
}
void glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer) {
    glad_glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
    gl_check_error();
}
void glEnableVertexAttribArrayARB(GLuint index) {
    glad_glEnableVertexAttribArrayARB(GLuint index);
    gl_check_error();
}
void glDisableVertexAttribArrayARB(GLuint index) {
    glad_glDisableVertexAttribArrayARB(GLuint index);
    gl_check_error();
}
void glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params) {
    glad_glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params);
    gl_check_error();
}
void glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params) {
    glad_glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params) {
    glad_glGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetVertexAttribPointervARB(GLuint index, GLenum pname, void **pointer) {
    glad_glGetVertexAttribPointervARB(GLuint index, GLenum pname, void **pointer);
    gl_check_error();
}
void glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name) {
    glad_glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name);
    gl_check_error();
}
void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name) {
    glad_glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
    gl_check_error();
}
GLint glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB *name) {
    auto val = glad_glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB *name);
    gl_check_error();
    return val;
}
void glDepthRangeArraydvNV(GLuint first, GLsizei count, const GLdouble *v) {
    glad_glDepthRangeArraydvNV(GLuint first, GLsizei count, const GLdouble *v);
    gl_check_error();
}
void glDepthRangeIndexeddNV(GLuint index, GLdouble n, GLdouble f) {
    glad_glDepthRangeIndexeddNV(GLuint index, GLdouble n, GLdouble f);
    gl_check_error();
}
void glWindowPos2dARB(GLdouble x, GLdouble y) {
    glad_glWindowPos2dARB(GLdouble x, GLdouble y);
    gl_check_error();
}
void glWindowPos2dvARB(const GLdouble *v) {
    glad_glWindowPos2dvARB(const GLdouble *v);
    gl_check_error();
}
void glWindowPos2fARB(GLfloat x, GLfloat y) {
    glad_glWindowPos2fARB(GLfloat x, GLfloat y);
    gl_check_error();
}
void glWindowPos2fvARB(const GLfloat *v) {
    glad_glWindowPos2fvARB(const GLfloat *v);
    gl_check_error();
}
void glWindowPos2iARB(GLint x, GLint y) {
    glad_glWindowPos2iARB(GLint x, GLint y);
    gl_check_error();
}
void glWindowPos2ivARB(const GLint *v) {
    glad_glWindowPos2ivARB(const GLint *v);
    gl_check_error();
}
void glWindowPos2sARB(GLshort x, GLshort y) {
    glad_glWindowPos2sARB(GLshort x, GLshort y);
    gl_check_error();
}
void glWindowPos2svARB(const GLshort *v) {
    glad_glWindowPos2svARB(const GLshort *v);
    gl_check_error();
}
void glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z) {
    glad_glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z);
    gl_check_error();
}
void glWindowPos3dvARB(const GLdouble *v) {
    glad_glWindowPos3dvARB(const GLdouble *v);
    gl_check_error();
}
void glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z) {
    glad_glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glWindowPos3fvARB(const GLfloat *v) {
    glad_glWindowPos3fvARB(const GLfloat *v);
    gl_check_error();
}
void glWindowPos3iARB(GLint x, GLint y, GLint z) {
    glad_glWindowPos3iARB(GLint x, GLint y, GLint z);
    gl_check_error();
}
void glWindowPos3ivARB(const GLint *v) {
    glad_glWindowPos3ivARB(const GLint *v);
    gl_check_error();
}
void glWindowPos3sARB(GLshort x, GLshort y, GLshort z) {
    glad_glWindowPos3sARB(GLshort x, GLshort y, GLshort z);
    gl_check_error();
}
void glWindowPos3svARB(const GLshort *v) {
    glad_glWindowPos3svARB(const GLshort *v);
    gl_check_error();
}
void glDrawBuffersATI(GLsizei n, const GLenum *bufs) {
    glad_glDrawBuffersATI(GLsizei n, const GLenum *bufs);
    gl_check_error();
}
void glElementPointerATI(GLenum type, const void *pointer) {
    glad_glElementPointerATI(GLenum type, const void *pointer);
    gl_check_error();
}
void glDrawElementArrayATI(GLenum mode, GLsizei count) {
    glad_glDrawElementArrayATI(GLenum mode, GLsizei count);
    gl_check_error();
}
void glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count) {
    glad_glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count);
    gl_check_error();
}
void glTexBumpParameterivATI(GLenum pname, const GLint *param) {
    glad_glTexBumpParameterivATI(GLenum pname, const GLint *param);
    gl_check_error();
}
void glTexBumpParameterfvATI(GLenum pname, const GLfloat *param) {
    glad_glTexBumpParameterfvATI(GLenum pname, const GLfloat *param);
    gl_check_error();
}
void glGetTexBumpParameterivATI(GLenum pname, GLint *param) {
    glad_glGetTexBumpParameterivATI(GLenum pname, GLint *param);
    gl_check_error();
}
void glGetTexBumpParameterfvATI(GLenum pname, GLfloat *param) {
    glad_glGetTexBumpParameterfvATI(GLenum pname, GLfloat *param);
    gl_check_error();
}
GLuint glGenFragmentShadersATI(GLuint range) {
    auto val = glad_glGenFragmentShadersATI(GLuint range);
    gl_check_error();
    return val;
}
void glBindFragmentShaderATI(GLuint id) {
    glad_glBindFragmentShaderATI(GLuint id);
    gl_check_error();
}
void glDeleteFragmentShaderATI(GLuint id) {
    glad_glDeleteFragmentShaderATI(GLuint id);
    gl_check_error();
}
void glBeginFragmentShaderATI(void) {
    glad_glBeginFragmentShaderATI(void);
    gl_check_error();
}
void glEndFragmentShaderATI(void) {
    glad_glEndFragmentShaderATI(void);
    gl_check_error();
}
void glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle) {
    glad_glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle);
    gl_check_error();
}
void glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle) {
    glad_glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle);
    gl_check_error();
}
void glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) {
    glad_glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
    gl_check_error();
}
void glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) {
    glad_glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
    gl_check_error();
}
void glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) {
    glad_glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
    gl_check_error();
}
void glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) {
    glad_glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
    gl_check_error();
}
void glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) {
    glad_glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
    gl_check_error();
}
void glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) {
    glad_glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
    gl_check_error();
}
void glSetFragmentShaderConstantATI(GLuint dst, const GLfloat *value) {
    glad_glSetFragmentShaderConstantATI(GLuint dst, const GLfloat *value);
    gl_check_error();
}
void * glMapObjectBufferATI(GLuint buffer) {
    glad_glMapObjectBufferATI(GLuint buffer);
    gl_check_error();
}
void glUnmapObjectBufferATI(GLuint buffer) {
    glad_glUnmapObjectBufferATI(GLuint buffer);
    gl_check_error();
}
void glPNTrianglesiATI(GLenum pname, GLint param) {
    glad_glPNTrianglesiATI(GLenum pname, GLint param);
    gl_check_error();
}
void glPNTrianglesfATI(GLenum pname, GLfloat param) {
    glad_glPNTrianglesfATI(GLenum pname, GLfloat param);
    gl_check_error();
}
void glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {
    glad_glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
    gl_check_error();
}
void glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask) {
    glad_glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
    gl_check_error();
}
GLuint glNewObjectBufferATI(GLsizei size, const void *pointer, GLenum usage) {
    auto val = glad_glNewObjectBufferATI(GLsizei size, const void *pointer, GLenum usage);
    gl_check_error();
    return val;
}
GLboolean glIsObjectBufferATI(GLuint buffer) {
    auto val = glad_glIsObjectBufferATI(GLuint buffer);
    gl_check_error();
    return val;
}
void glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve) {
    glad_glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve);
    gl_check_error();
}
void glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat *params) {
    glad_glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint *params) {
    glad_glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint *params);
    gl_check_error();
}
void glFreeObjectBufferATI(GLuint buffer) {
    glad_glFreeObjectBufferATI(GLuint buffer);
    gl_check_error();
}
void glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) {
    glad_glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
    gl_check_error();
}
void glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat *params) {
    glad_glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetArrayObjectivATI(GLenum array, GLenum pname, GLint *params) {
    glad_glGetArrayObjectivATI(GLenum array, GLenum pname, GLint *params);
    gl_check_error();
}
void glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) {
    glad_glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
    gl_check_error();
}
void glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat *params) {
    glad_glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint *params) {
    glad_glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint *params);
    gl_check_error();
}
void glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset) {
    glad_glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
    gl_check_error();
}
void glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat *params) {
    glad_glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint *params) {
    glad_glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint *params);
    gl_check_error();
}
void glVertexStream1sATI(GLenum stream, GLshort x) {
    glad_glVertexStream1sATI(GLenum stream, GLshort x);
    gl_check_error();
}
void glVertexStream1svATI(GLenum stream, const GLshort *coords) {
    glad_glVertexStream1svATI(GLenum stream, const GLshort *coords);
    gl_check_error();
}
void glVertexStream1iATI(GLenum stream, GLint x) {
    glad_glVertexStream1iATI(GLenum stream, GLint x);
    gl_check_error();
}
void glVertexStream1ivATI(GLenum stream, const GLint *coords) {
    glad_glVertexStream1ivATI(GLenum stream, const GLint *coords);
    gl_check_error();
}
void glVertexStream1fATI(GLenum stream, GLfloat x) {
    glad_glVertexStream1fATI(GLenum stream, GLfloat x);
    gl_check_error();
}
void glVertexStream1fvATI(GLenum stream, const GLfloat *coords) {
    glad_glVertexStream1fvATI(GLenum stream, const GLfloat *coords);
    gl_check_error();
}
void glVertexStream1dATI(GLenum stream, GLdouble x) {
    glad_glVertexStream1dATI(GLenum stream, GLdouble x);
    gl_check_error();
}
void glVertexStream1dvATI(GLenum stream, const GLdouble *coords) {
    glad_glVertexStream1dvATI(GLenum stream, const GLdouble *coords);
    gl_check_error();
}
void glVertexStream2sATI(GLenum stream, GLshort x, GLshort y) {
    glad_glVertexStream2sATI(GLenum stream, GLshort x, GLshort y);
    gl_check_error();
}
void glVertexStream2svATI(GLenum stream, const GLshort *coords) {
    glad_glVertexStream2svATI(GLenum stream, const GLshort *coords);
    gl_check_error();
}
void glVertexStream2iATI(GLenum stream, GLint x, GLint y) {
    glad_glVertexStream2iATI(GLenum stream, GLint x, GLint y);
    gl_check_error();
}
void glVertexStream2ivATI(GLenum stream, const GLint *coords) {
    glad_glVertexStream2ivATI(GLenum stream, const GLint *coords);
    gl_check_error();
}
void glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y) {
    glad_glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y);
    gl_check_error();
}
void glVertexStream2fvATI(GLenum stream, const GLfloat *coords) {
    glad_glVertexStream2fvATI(GLenum stream, const GLfloat *coords);
    gl_check_error();
}
void glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y) {
    glad_glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y);
    gl_check_error();
}
void glVertexStream2dvATI(GLenum stream, const GLdouble *coords) {
    glad_glVertexStream2dvATI(GLenum stream, const GLdouble *coords);
    gl_check_error();
}
void glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z) {
    glad_glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z);
    gl_check_error();
}
void glVertexStream3svATI(GLenum stream, const GLshort *coords) {
    glad_glVertexStream3svATI(GLenum stream, const GLshort *coords);
    gl_check_error();
}
void glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z) {
    glad_glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z);
    gl_check_error();
}
void glVertexStream3ivATI(GLenum stream, const GLint *coords) {
    glad_glVertexStream3ivATI(GLenum stream, const GLint *coords);
    gl_check_error();
}
void glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z) {
    glad_glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glVertexStream3fvATI(GLenum stream, const GLfloat *coords) {
    glad_glVertexStream3fvATI(GLenum stream, const GLfloat *coords);
    gl_check_error();
}
void glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z) {
    glad_glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z);
    gl_check_error();
}
void glVertexStream3dvATI(GLenum stream, const GLdouble *coords) {
    glad_glVertexStream3dvATI(GLenum stream, const GLdouble *coords);
    gl_check_error();
}
void glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w) {
    glad_glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
    gl_check_error();
}
void glVertexStream4svATI(GLenum stream, const GLshort *coords) {
    glad_glVertexStream4svATI(GLenum stream, const GLshort *coords);
    gl_check_error();
}
void glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w) {
    glad_glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w);
    gl_check_error();
}
void glVertexStream4ivATI(GLenum stream, const GLint *coords) {
    glad_glVertexStream4ivATI(GLenum stream, const GLint *coords);
    gl_check_error();
}
void glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    gl_check_error();
}
void glVertexStream4fvATI(GLenum stream, const GLfloat *coords) {
    glad_glVertexStream4fvATI(GLenum stream, const GLfloat *coords);
    gl_check_error();
}
void glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    gl_check_error();
}
void glVertexStream4dvATI(GLenum stream, const GLdouble *coords) {
    glad_glVertexStream4dvATI(GLenum stream, const GLdouble *coords);
    gl_check_error();
}
void glNormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz) {
    glad_glNormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
    gl_check_error();
}
void glNormalStream3bvATI(GLenum stream, const GLbyte *coords) {
    glad_glNormalStream3bvATI(GLenum stream, const GLbyte *coords);
    gl_check_error();
}
void glNormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz) {
    glad_glNormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz);
    gl_check_error();
}
void glNormalStream3svATI(GLenum stream, const GLshort *coords) {
    glad_glNormalStream3svATI(GLenum stream, const GLshort *coords);
    gl_check_error();
}
void glNormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz) {
    glad_glNormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz);
    gl_check_error();
}
void glNormalStream3ivATI(GLenum stream, const GLint *coords) {
    glad_glNormalStream3ivATI(GLenum stream, const GLint *coords);
    gl_check_error();
}
void glNormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz) {
    glad_glNormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
    gl_check_error();
}
void glNormalStream3fvATI(GLenum stream, const GLfloat *coords) {
    glad_glNormalStream3fvATI(GLenum stream, const GLfloat *coords);
    gl_check_error();
}
void glNormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz) {
    glad_glNormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
    gl_check_error();
}
void glNormalStream3dvATI(GLenum stream, const GLdouble *coords) {
    glad_glNormalStream3dvATI(GLenum stream, const GLdouble *coords);
    gl_check_error();
}
void glClientActiveVertexStreamATI(GLenum stream) {
    glad_glClientActiveVertexStreamATI(GLenum stream);
    gl_check_error();
}
void glVertexBlendEnviATI(GLenum pname, GLint param) {
    glad_glVertexBlendEnviATI(GLenum pname, GLint param);
    gl_check_error();
}
void glVertexBlendEnvfATI(GLenum pname, GLfloat param) {
    glad_glVertexBlendEnvfATI(GLenum pname, GLfloat param);
    gl_check_error();
}
void glEGLImageTargetTexStorageEXT(GLenum target, GLeglImageOES image, const GLint* attrib_list) {
    glad_glEGLImageTargetTexStorageEXT(GLenum target, GLeglImageOES image, const GLint* attrib_list);
    gl_check_error();
}
void glEGLImageTargetTextureStorageEXT(GLuint texture, GLeglImageOES image, const GLint* attrib_list) {
    glad_glEGLImageTargetTextureStorageEXT(GLuint texture, GLeglImageOES image, const GLint* attrib_list);
    gl_check_error();
}
void glUniformBufferEXT(GLuint program, GLint location, GLuint buffer) {
    glad_glUniformBufferEXT(GLuint program, GLint location, GLuint buffer);
    gl_check_error();
}
GLint glGetUniformBufferSizeEXT(GLuint program, GLint location) {
    auto val = glad_glGetUniformBufferSizeEXT(GLuint program, GLint location);
    gl_check_error();
    return val;
}
GLintptr glGetUniformOffsetEXT(GLuint program, GLint location) {
    auto val = glad_glGetUniformOffsetEXT(GLuint program, GLint location);
    gl_check_error();
    return val;
}
void glBlendColorEXT(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    glad_glBlendColorEXT(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
    gl_check_error();
}
void glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha) {
    glad_glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha);
    gl_check_error();
}
void glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
    glad_glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
    gl_check_error();
}
void glBlendEquationEXT(GLenum mode) {
    glad_glBlendEquationEXT(GLenum mode);
    gl_check_error();
}
void glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data) {
    glad_glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data);
    gl_check_error();
}
void glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) {
    glad_glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
    gl_check_error();
}
void glLockArraysEXT(GLint first, GLsizei count) {
    glad_glLockArraysEXT(GLint first, GLsizei count);
    gl_check_error();
}
void glUnlockArraysEXT(void) {
    glad_glUnlockArraysEXT(void);
    gl_check_error();
}
void glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image) {
    glad_glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image);
    gl_check_error();
}
void glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image) {
    glad_glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image);
    gl_check_error();
}
void glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat params) {
    glad_glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat params);
    gl_check_error();
}
void glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params) {
    glad_glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint params) {
    glad_glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint params);
    gl_check_error();
}
void glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint *params) {
    glad_glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint *params);
    gl_check_error();
}
void glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
    glad_glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
    gl_check_error();
}
void glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
    gl_check_error();
}
void glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, void *image) {
    glad_glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, void *image);
    gl_check_error();
}
void glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat *params) {
    glad_glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint *params) {
    glad_glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span) {
    glad_glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span);
    gl_check_error();
}
void glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column) {
    glad_glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column);
    gl_check_error();
}
void glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz) {
    glad_glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz);
    gl_check_error();
}
void glTangent3bvEXT(const GLbyte *v) {
    glad_glTangent3bvEXT(const GLbyte *v);
    gl_check_error();
}
void glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz) {
    glad_glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz);
    gl_check_error();
}
void glTangent3dvEXT(const GLdouble *v) {
    glad_glTangent3dvEXT(const GLdouble *v);
    gl_check_error();
}
void glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz) {
    glad_glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz);
    gl_check_error();
}
void glTangent3fvEXT(const GLfloat *v) {
    glad_glTangent3fvEXT(const GLfloat *v);
    gl_check_error();
}
void glTangent3iEXT(GLint tx, GLint ty, GLint tz) {
    glad_glTangent3iEXT(GLint tx, GLint ty, GLint tz);
    gl_check_error();
}
void glTangent3ivEXT(const GLint *v) {
    glad_glTangent3ivEXT(const GLint *v);
    gl_check_error();
}
void glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz) {
    glad_glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz);
    gl_check_error();
}
void glTangent3svEXT(const GLshort *v) {
    glad_glTangent3svEXT(const GLshort *v);
    gl_check_error();
}
void glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz) {
    glad_glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz);
    gl_check_error();
}
void glBinormal3bvEXT(const GLbyte *v) {
    glad_glBinormal3bvEXT(const GLbyte *v);
    gl_check_error();
}
void glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz) {
    glad_glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz);
    gl_check_error();
}
void glBinormal3dvEXT(const GLdouble *v) {
    glad_glBinormal3dvEXT(const GLdouble *v);
    gl_check_error();
}
void glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz) {
    glad_glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz);
    gl_check_error();
}
void glBinormal3fvEXT(const GLfloat *v) {
    glad_glBinormal3fvEXT(const GLfloat *v);
    gl_check_error();
}
void glBinormal3iEXT(GLint bx, GLint by, GLint bz) {
    glad_glBinormal3iEXT(GLint bx, GLint by, GLint bz);
    gl_check_error();
}
void glBinormal3ivEXT(const GLint *v) {
    glad_glBinormal3ivEXT(const GLint *v);
    gl_check_error();
}
void glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz) {
    glad_glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz);
    gl_check_error();
}
void glBinormal3svEXT(const GLshort *v) {
    glad_glBinormal3svEXT(const GLshort *v);
    gl_check_error();
}
void glTangentPointerEXT(GLenum type, GLsizei stride, const void *pointer) {
    glad_glTangentPointerEXT(GLenum type, GLsizei stride, const void *pointer);
    gl_check_error();
}
void glBinormalPointerEXT(GLenum type, GLsizei stride, const void *pointer) {
    glad_glBinormalPointerEXT(GLenum type, GLsizei stride, const void *pointer);
    gl_check_error();
}
void glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
    glad_glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
    gl_check_error();
}
void glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
    glad_glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
    gl_check_error();
}
void glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
    glad_glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
    gl_check_error();
}
void glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    gl_check_error();
}
void glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    gl_check_error();
}
void glCullParameterdvEXT(GLenum pname, GLdouble *params) {
    glad_glCullParameterdvEXT(GLenum pname, GLdouble *params);
    gl_check_error();
}
void glCullParameterfvEXT(GLenum pname, GLfloat *params) {
    glad_glCullParameterfvEXT(GLenum pname, GLfloat *params);
    gl_check_error();
}
void glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label) {
    glad_glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label);
    gl_check_error();
}
void glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label) {
    glad_glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label);
    gl_check_error();
}
void glInsertEventMarkerEXT(GLsizei length, const GLchar *marker) {
    glad_glInsertEventMarkerEXT(GLsizei length, const GLchar *marker);
    gl_check_error();
}
void glPushGroupMarkerEXT(GLsizei length, const GLchar *marker) {
    glad_glPushGroupMarkerEXT(GLsizei length, const GLchar *marker);
    gl_check_error();
}
void glPopGroupMarkerEXT(void) {
    glad_glPopGroupMarkerEXT(void);
    gl_check_error();
}
void glDepthBoundsEXT(GLclampd zmin, GLclampd zmax) {
    glad_glDepthBoundsEXT(GLclampd zmin, GLclampd zmax);
    gl_check_error();
}
void glMatrixLoadfEXT(GLenum mode, const GLfloat *m) {
    glad_glMatrixLoadfEXT(GLenum mode, const GLfloat *m);
    gl_check_error();
}
void glMatrixLoaddEXT(GLenum mode, const GLdouble *m) {
    glad_glMatrixLoaddEXT(GLenum mode, const GLdouble *m);
    gl_check_error();
}
void glMatrixMultfEXT(GLenum mode, const GLfloat *m) {
    glad_glMatrixMultfEXT(GLenum mode, const GLfloat *m);
    gl_check_error();
}
void glMatrixMultdEXT(GLenum mode, const GLdouble *m) {
    glad_glMatrixMultdEXT(GLenum mode, const GLdouble *m);
    gl_check_error();
}
void glMatrixLoadIdentityEXT(GLenum mode) {
    glad_glMatrixLoadIdentityEXT(GLenum mode);
    gl_check_error();
}
void glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {
    glad_glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {
    glad_glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
    gl_check_error();
}
void glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) {
    glad_glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) {
    glad_glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
    gl_check_error();
}
void glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) {
    glad_glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) {
    glad_glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
    gl_check_error();
}
void glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
    glad_glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
    gl_check_error();
}
void glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
    glad_glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
    gl_check_error();
}
void glMatrixPopEXT(GLenum mode) {
    glad_glMatrixPopEXT(GLenum mode);
    gl_check_error();
}
void glMatrixPushEXT(GLenum mode) {
    glad_glMatrixPushEXT(GLenum mode);
    gl_check_error();
}
void glClientAttribDefaultEXT(GLbitfield mask) {
    glad_glClientAttribDefaultEXT(GLbitfield mask);
    gl_check_error();
}
void glPushClientAttribDefaultEXT(GLbitfield mask) {
    glad_glPushClientAttribDefaultEXT(GLbitfield mask);
    gl_check_error();
}
void glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param) {
    glad_glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param);
    gl_check_error();
}
void glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat *params) {
    glad_glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param) {
    glad_glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param);
    gl_check_error();
}
void glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params) {
    glad_glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params);
    gl_check_error();
}
void glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) {
    glad_glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) {
    glad_glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) {
    glad_glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {
    glad_glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
    glad_glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
    gl_check_error();
}
void glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
    glad_glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
    gl_check_error();
}
void glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
    glad_glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
    gl_check_error();
}
void glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    gl_check_error();
}
void glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels) {
    glad_glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
    gl_check_error();
}
void glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat *params) {
    glad_glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params) {
    glad_glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params) {
    glad_glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params) {
    glad_glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);
    gl_check_error();
}
void glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) {
    glad_glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) {
    glad_glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    gl_check_error();
}
void glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture) {
    glad_glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture);
    gl_check_error();
}
void glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer) {
    glad_glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer);
    gl_check_error();
}
void glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) {
    glad_glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
    gl_check_error();
}
void glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params) {
    glad_glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) {
    glad_glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param);
    gl_check_error();
}
void glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params) {
    glad_glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
    gl_check_error();
}
void glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param) {
    glad_glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
    gl_check_error();
}
void glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params) {
    glad_glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);
    gl_check_error();
}
void glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param) {
    glad_glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
    gl_check_error();
}
void glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params) {
    glad_glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param) {
    glad_glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param);
    gl_check_error();
}
void glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint *params) {
    glad_glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint *params);
    gl_check_error();
}
void glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params) {
    glad_glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params) {
    glad_glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params) {
    glad_glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);
    gl_check_error();
}
void glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params) {
    glad_glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint *params) {
    glad_glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint *params);
    gl_check_error();
}
void glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) {
    glad_glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param);
    gl_check_error();
}
void glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params) {
    glad_glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
    gl_check_error();
}
void glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) {
    glad_glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
    gl_check_error();
}
void glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params) {
    glad_glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) {
    glad_glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) {
    glad_glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) {
    glad_glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {
    glad_glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
    glad_glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
    gl_check_error();
}
void glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
    glad_glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
    gl_check_error();
}
void glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
    glad_glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
    gl_check_error();
}
void glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    gl_check_error();
}
void glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels) {
    glad_glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
    gl_check_error();
}
void glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params) {
    glad_glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params) {
    glad_glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params) {
    glad_glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params) {
    glad_glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);
    gl_check_error();
}
void glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) {
    glad_glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) {
    glad_glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    gl_check_error();
}
void glEnableClientStateIndexedEXT(GLenum array, GLuint index) {
    glad_glEnableClientStateIndexedEXT(GLenum array, GLuint index);
    gl_check_error();
}
void glDisableClientStateIndexedEXT(GLenum array, GLuint index) {
    glad_glDisableClientStateIndexedEXT(GLenum array, GLuint index);
    gl_check_error();
}
void glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat *data) {
    glad_glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat *data);
    gl_check_error();
}
void glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble *data) {
    glad_glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble *data);
    gl_check_error();
}
void glGetPointerIndexedvEXT(GLenum target, GLuint index, void **data) {
    glad_glGetPointerIndexedvEXT(GLenum target, GLuint index, void **data);
    gl_check_error();
}
void glEnableIndexedEXT(GLenum target, GLuint index) {
    glad_glEnableIndexedEXT(GLenum target, GLuint index);
    gl_check_error();
}
void glDisableIndexedEXT(GLenum target, GLuint index) {
    glad_glDisableIndexedEXT(GLenum target, GLuint index);
    gl_check_error();
}
GLboolean glIsEnabledIndexedEXT(GLenum target, GLuint index) {
    auto val = glad_glIsEnabledIndexedEXT(GLenum target, GLuint index);
    gl_check_error();
    return val;
}
void glGetIntegerIndexedvEXT(GLenum target, GLuint index, GLint *data) {
    glad_glGetIntegerIndexedvEXT(GLenum target, GLuint index, GLint *data);
    gl_check_error();
}
void glGetBooleanIndexedvEXT(GLenum target, GLuint index, GLboolean *data) {
    glad_glGetBooleanIndexedvEXT(GLenum target, GLuint index, GLboolean *data);
    gl_check_error();
}
void glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits) {
    glad_glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
    gl_check_error();
}
void glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits) {
    glad_glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
    gl_check_error();
}
void glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits) {
    glad_glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
    gl_check_error();
}
void glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits) {
    glad_glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);
    gl_check_error();
}
void glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits) {
    glad_glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
    gl_check_error();
}
void glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits) {
    glad_glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);
    gl_check_error();
}
void glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, void *img) {
    glad_glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, void *img);
    gl_check_error();
}
void glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits) {
    glad_glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
    gl_check_error();
}
void glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits) {
    glad_glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
    gl_check_error();
}
void glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits) {
    glad_glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
    gl_check_error();
}
void glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits) {
    glad_glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);
    gl_check_error();
}
void glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits) {
    glad_glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
    gl_check_error();
}
void glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits) {
    glad_glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);
    gl_check_error();
}
void glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, void *img) {
    glad_glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, void *img);
    gl_check_error();
}
void glMatrixLoadTransposefEXT(GLenum mode, const GLfloat *m) {
    glad_glMatrixLoadTransposefEXT(GLenum mode, const GLfloat *m);
    gl_check_error();
}
void glMatrixLoadTransposedEXT(GLenum mode, const GLdouble *m) {
    glad_glMatrixLoadTransposedEXT(GLenum mode, const GLdouble *m);
    gl_check_error();
}
void glMatrixMultTransposefEXT(GLenum mode, const GLfloat *m) {
    glad_glMatrixMultTransposefEXT(GLenum mode, const GLfloat *m);
    gl_check_error();
}
void glMatrixMultTransposedEXT(GLenum mode, const GLdouble *m) {
    glad_glMatrixMultTransposedEXT(GLenum mode, const GLdouble *m);
    gl_check_error();
}
void glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage) {
    glad_glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
    gl_check_error();
}
void glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data) {
    glad_glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
    gl_check_error();
}
void * glMapNamedBufferEXT(GLuint buffer, GLenum access) {
    glad_glMapNamedBufferEXT(GLuint buffer, GLenum access);
    gl_check_error();
}
GLboolean glUnmapNamedBufferEXT(GLuint buffer) {
    auto val = glad_glUnmapNamedBufferEXT(GLuint buffer);
    gl_check_error();
    return val;
}
void glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint *params) {
    glad_glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, void **params) {
    glad_glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, void **params);
    gl_check_error();
}
void glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data) {
    glad_glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
    gl_check_error();
}
void glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0) {
    glad_glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0);
    gl_check_error();
}
void glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1) {
    glad_glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1);
    gl_check_error();
}
void glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
    glad_glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
    gl_check_error();
}
void glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
    glad_glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
    gl_check_error();
}
void glProgramUniform1iEXT(GLuint program, GLint location, GLint v0) {
    glad_glProgramUniform1iEXT(GLuint program, GLint location, GLint v0);
    gl_check_error();
}
void glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1) {
    glad_glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1);
    gl_check_error();
}
void glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {
    glad_glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
    gl_check_error();
}
void glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
    glad_glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
    gl_check_error();
}
void glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
    glad_glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value);
    gl_check_error();
}
void glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
    glad_glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value);
    gl_check_error();
}
void glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
    glad_glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value);
    gl_check_error();
}
void glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
    glad_glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value);
    gl_check_error();
}
void glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value) {
    glad_glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value);
    gl_check_error();
}
void glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value) {
    glad_glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value);
    gl_check_error();
}
void glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value) {
    glad_glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value);
    gl_check_error();
}
void glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value) {
    glad_glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value);
    gl_check_error();
}
void glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glad_glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    gl_check_error();
}
void glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer) {
    glad_glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
    gl_check_error();
}
void glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer) {
    glad_glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
    gl_check_error();
}
void glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params) {
    glad_glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params);
    gl_check_error();
}
void glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint *params) {
    glad_glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint *params);
    gl_check_error();
}
void glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params) {
    glad_glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint *params) {
    glad_glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint *params);
    gl_check_error();
}
void glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params) {
    glad_glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
    gl_check_error();
}
void glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint *params) {
    glad_glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint *params);
    gl_check_error();
}
void glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params) {
    glad_glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint *params) {
    glad_glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint *params);
    gl_check_error();
}
void glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0) {
    glad_glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0);
    gl_check_error();
}
void glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1) {
    glad_glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1);
    gl_check_error();
}
void glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {
    glad_glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
    gl_check_error();
}
void glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
    glad_glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
    gl_check_error();
}
void glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value) {
    glad_glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value);
    gl_check_error();
}
void glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value) {
    glad_glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value);
    gl_check_error();
}
void glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value) {
    glad_glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value);
    gl_check_error();
}
void glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value) {
    glad_glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value);
    gl_check_error();
}
void glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params) {
    glad_glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);
    gl_check_error();
}
void glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {
    glad_glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
    gl_check_error();
}
void glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint *params) {
    glad_glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint *params);
    gl_check_error();
}
void glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params) {
    glad_glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);
    gl_check_error();
}
void glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
    glad_glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
    gl_check_error();
}
void glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint *params) {
    glad_glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint *params);
    gl_check_error();
}
void glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params) {
    glad_glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);
    gl_check_error();
}
void glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint *params) {
    glad_glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint *params);
    gl_check_error();
}
void glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint *params) {
    glad_glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint *params);
    gl_check_error();
}
void glEnableClientStateiEXT(GLenum array, GLuint index) {
    glad_glEnableClientStateiEXT(GLenum array, GLuint index);
    gl_check_error();
}
void glDisableClientStateiEXT(GLenum array, GLuint index) {
    glad_glDisableClientStateiEXT(GLenum array, GLuint index);
    gl_check_error();
}
void glGetFloati_vEXT(GLenum pname, GLuint index, GLfloat *params) {
    glad_glGetFloati_vEXT(GLenum pname, GLuint index, GLfloat *params);
    gl_check_error();
}
void glGetDoublei_vEXT(GLenum pname, GLuint index, GLdouble *params) {
    glad_glGetDoublei_vEXT(GLenum pname, GLuint index, GLdouble *params);
    gl_check_error();
}
void glGetPointeri_vEXT(GLenum pname, GLuint index, void **params) {
    glad_glGetPointeri_vEXT(GLenum pname, GLuint index, void **params);
    gl_check_error();
}
void glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const void *string) {
    glad_glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const void *string);
    gl_check_error();
}
void glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    gl_check_error();
}
void glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble *params) {
    glad_glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble *params);
    gl_check_error();
}
void glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    gl_check_error();
}
void glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat *params) {
    glad_glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat *params);
    gl_check_error();
}
void glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble *params) {
    glad_glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble *params);
    gl_check_error();
}
void glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat *params) {
    glad_glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat *params);
    gl_check_error();
}
void glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint *params) {
    glad_glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, void *string) {
    glad_glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, void *string);
    gl_check_error();
}
void glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
    gl_check_error();
}
void glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint *params) {
    glad_glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint *params);
    gl_check_error();
}
void glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
    gl_check_error();
}
void glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
    gl_check_error();
}
GLenum glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target) {
    auto val = glad_glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target);
    gl_check_error();
    return val;
}
void glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
    glad_glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    gl_check_error();
}
void glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
    glad_glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    gl_check_error();
}
void glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
    glad_glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
    gl_check_error();
}
void glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
    glad_glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
    gl_check_error();
}
void glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params) {
    glad_glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
    gl_check_error();
}
void glGenerateTextureMipmapEXT(GLuint texture, GLenum target) {
    glad_glGenerateTextureMipmapEXT(GLuint texture, GLenum target);
    gl_check_error();
}
void glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target) {
    glad_glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target);
    gl_check_error();
}
void glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode) {
    glad_glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode);
    gl_check_error();
}
void glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum *bufs) {
    glad_glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum *bufs);
    gl_check_error();
}
void glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode) {
    glad_glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode);
    gl_check_error();
}
void glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params) {
    glad_glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params);
    gl_check_error();
}
void glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
    glad_glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
    gl_check_error();
}
void glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) {
    glad_glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
    gl_check_error();
}
void glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) {
    glad_glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
    gl_check_error();
}
void glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face) {
    glad_glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
    gl_check_error();
}
void glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer) {
    glad_glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer);
    gl_check_error();
}
void glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer) {
    glad_glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer);
    gl_check_error();
}
void glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
    glad_glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    gl_check_error();
}
void glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
    glad_glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    gl_check_error();
}
void glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset) {
    glad_glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
    gl_check_error();
}
void glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {
    glad_glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
    gl_check_error();
}
void glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {
    glad_glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
    gl_check_error();
}
void glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
    glad_glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    gl_check_error();
}
void glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
    glad_glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    gl_check_error();
}
void glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {
    glad_glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
    gl_check_error();
}
void glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
    glad_glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    gl_check_error();
}
void glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset) {
    glad_glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
    gl_check_error();
}
void glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
    glad_glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    gl_check_error();
}
void glEnableVertexArrayEXT(GLuint vaobj, GLenum array) {
    glad_glEnableVertexArrayEXT(GLuint vaobj, GLenum array);
    gl_check_error();
}
void glDisableVertexArrayEXT(GLuint vaobj, GLenum array) {
    glad_glDisableVertexArrayEXT(GLuint vaobj, GLenum array);
    gl_check_error();
}
void glEnableVertexArrayAttribEXT(GLuint vaobj, GLuint index) {
    glad_glEnableVertexArrayAttribEXT(GLuint vaobj, GLuint index);
    gl_check_error();
}
void glDisableVertexArrayAttribEXT(GLuint vaobj, GLuint index) {
    glad_glDisableVertexArrayAttribEXT(GLuint vaobj, GLuint index);
    gl_check_error();
}
void glGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint *param) {
    glad_glGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint *param);
    gl_check_error();
}
void glGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, void **param) {
    glad_glGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, void **param);
    gl_check_error();
}
void glGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint *param) {
    glad_glGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
    gl_check_error();
}
void glGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, void **param) {
    glad_glGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, void **param);
    gl_check_error();
}
void * glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) {
    glad_glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
    gl_check_error();
}
void glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length) {
    glad_glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length);
    gl_check_error();
}
void glNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags) {
    glad_glNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
    gl_check_error();
}
void glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data) {
    glad_glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
    gl_check_error();
}
void glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) {
    glad_glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
    gl_check_error();
}
void glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param) {
    glad_glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param);
    gl_check_error();
}
void glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params) {
    glad_glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params);
    gl_check_error();
}
void glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x) {
    glad_glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x);
    gl_check_error();
}
void glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y) {
    glad_glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y);
    gl_check_error();
}
void glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z) {
    glad_glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
    gl_check_error();
}
void glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    gl_check_error();
}
void glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
    glad_glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value);
    gl_check_error();
}
void glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
    glad_glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value);
    gl_check_error();
}
void glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
    glad_glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value);
    gl_check_error();
}
void glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
    glad_glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value);
    gl_check_error();
}
void glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
    glad_glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    gl_check_error();
}
void glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
    glad_glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
    gl_check_error();
}
void glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {
    glad_glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
    gl_check_error();
}
void glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
    gl_check_error();
}
void glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
    glad_glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
    gl_check_error();
}
void glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
    glad_glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
    gl_check_error();
}
void glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
    glad_glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
    gl_check_error();
}
void glVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
    glad_glVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
    gl_check_error();
}
void glVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
    glad_glVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
    gl_check_error();
}
void glVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
    glad_glVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    gl_check_error();
}
void glVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
    glad_glVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    gl_check_error();
}
void glVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex) {
    glad_glVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
    gl_check_error();
}
void glVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor) {
    glad_glVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor);
    gl_check_error();
}
void glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
    glad_glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    gl_check_error();
}
void glTexturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) {
    glad_glTexturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
    gl_check_error();
}
void glVertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor) {
    glad_glVertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor);
    gl_check_error();
}
void glColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
    glad_glColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
    gl_check_error();
}
void glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount) {
    glad_glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount);
    gl_check_error();
}
void glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount) {
    glad_glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
    gl_check_error();
}
void glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices) {
    glad_glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
    gl_check_error();
}
void glBufferStorageExternalEXT(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) {
    glad_glBufferStorageExternalEXT(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags);
    gl_check_error();
}
void glNamedBufferStorageExternalEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) {
    glad_glNamedBufferStorageExternalEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags);
    gl_check_error();
}
void glFogCoordfEXT(GLfloat coord) {
    glad_glFogCoordfEXT(GLfloat coord);
    gl_check_error();
}
void glFogCoordfvEXT(const GLfloat *coord) {
    glad_glFogCoordfvEXT(const GLfloat *coord);
    gl_check_error();
}
void glFogCoorddEXT(GLdouble coord) {
    glad_glFogCoorddEXT(GLdouble coord);
    gl_check_error();
}
void glFogCoorddvEXT(const GLdouble *coord) {
    glad_glFogCoorddvEXT(const GLdouble *coord);
    gl_check_error();
}
void glFogCoordPointerEXT(GLenum type, GLsizei stride, const void *pointer) {
    glad_glFogCoordPointerEXT(GLenum type, GLsizei stride, const void *pointer);
    gl_check_error();
}
void glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
    glad_glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
    gl_check_error();
}
void glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
    gl_check_error();
}
GLboolean glIsRenderbufferEXT(GLuint renderbuffer) {
    auto val = glad_glIsRenderbufferEXT(GLuint renderbuffer);
    gl_check_error();
    return val;
}
void glBindRenderbufferEXT(GLenum target, GLuint renderbuffer) {
    glad_glBindRenderbufferEXT(GLenum target, GLuint renderbuffer);
    gl_check_error();
}
void glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers) {
    glad_glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers);
    gl_check_error();
}
void glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers) {
    glad_glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers);
    gl_check_error();
}
void glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
    gl_check_error();
}
void glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params) {
    glad_glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
GLboolean glIsFramebufferEXT(GLuint framebuffer) {
    auto val = glad_glIsFramebufferEXT(GLuint framebuffer);
    gl_check_error();
    return val;
}
void glBindFramebufferEXT(GLenum target, GLuint framebuffer) {
    glad_glBindFramebufferEXT(GLenum target, GLuint framebuffer);
    gl_check_error();
}
void glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers) {
    glad_glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers);
    gl_check_error();
}
void glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers) {
    glad_glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers);
    gl_check_error();
}
GLenum glCheckFramebufferStatusEXT(GLenum target) {
    auto val = glad_glCheckFramebufferStatusEXT(GLenum target);
    gl_check_error();
    return val;
}
void glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
    glad_glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    gl_check_error();
}
void glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
    glad_glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    gl_check_error();
}
void glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
    glad_glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
    gl_check_error();
}
void glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
    glad_glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
    gl_check_error();
}
void glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params) {
    glad_glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params);
    gl_check_error();
}
void glGenerateMipmapEXT(GLenum target) {
    glad_glGenerateMipmapEXT(GLenum target);
    gl_check_error();
}
void glProgramParameteriEXT(GLuint program, GLenum pname, GLint value) {
    glad_glProgramParameteriEXT(GLuint program, GLenum pname, GLint value);
    gl_check_error();
}
void glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params) {
    glad_glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
    gl_check_error();
}
void glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params) {
    glad_glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
    gl_check_error();
}
void glGetUniformuivEXT(GLuint program, GLint location, GLuint *params) {
    glad_glGetUniformuivEXT(GLuint program, GLint location, GLuint *params);
    gl_check_error();
}
void glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar *name) {
    glad_glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar *name);
    gl_check_error();
}
GLint glGetFragDataLocationEXT(GLuint program, const GLchar *name) {
    auto val = glad_glGetFragDataLocationEXT(GLuint program, const GLchar *name);
    gl_check_error();
    return val;
}
void glUniform1uiEXT(GLint location, GLuint v0) {
    glad_glUniform1uiEXT(GLint location, GLuint v0);
    gl_check_error();
}
void glUniform2uiEXT(GLint location, GLuint v0, GLuint v1) {
    glad_glUniform2uiEXT(GLint location, GLuint v0, GLuint v1);
    gl_check_error();
}
void glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2) {
    glad_glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2);
    gl_check_error();
}
void glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
    glad_glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
    gl_check_error();
}
void glUniform1uivEXT(GLint location, GLsizei count, const GLuint *value) {
    glad_glUniform1uivEXT(GLint location, GLsizei count, const GLuint *value);
    gl_check_error();
}
void glUniform2uivEXT(GLint location, GLsizei count, const GLuint *value) {
    glad_glUniform2uivEXT(GLint location, GLsizei count, const GLuint *value);
    gl_check_error();
}
void glUniform3uivEXT(GLint location, GLsizei count, const GLuint *value) {
    glad_glUniform3uivEXT(GLint location, GLsizei count, const GLuint *value);
    gl_check_error();
}
void glUniform4uivEXT(GLint location, GLsizei count, const GLuint *value) {
    glad_glUniform4uivEXT(GLint location, GLsizei count, const GLuint *value);
    gl_check_error();
}
void glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) {
    glad_glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
    gl_check_error();
}
void glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat *params) {
    glad_glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint *params) {
    glad_glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) {
    glad_glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
    gl_check_error();
}
void glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat *params) {
    glad_glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint *params) {
    glad_glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) {
    glad_glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
    gl_check_error();
}
void glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink) {
    glad_glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink);
    gl_check_error();
}
void glResetHistogramEXT(GLenum target) {
    glad_glResetHistogramEXT(GLenum target);
    gl_check_error();
}
void glResetMinmaxEXT(GLenum target) {
    glad_glResetMinmaxEXT(GLenum target);
    gl_check_error();
}
void glIndexFuncEXT(GLenum func, GLclampf ref) {
    glad_glIndexFuncEXT(GLenum func, GLclampf ref);
    gl_check_error();
}
void glIndexMaterialEXT(GLenum face, GLenum mode) {
    glad_glIndexMaterialEXT(GLenum face, GLenum mode);
    gl_check_error();
}
void glApplyTextureEXT(GLenum mode) {
    glad_glApplyTextureEXT(GLenum mode);
    gl_check_error();
}
void glTextureLightEXT(GLenum pname) {
    glad_glTextureLightEXT(GLenum pname);
    gl_check_error();
}
void glTextureMaterialEXT(GLenum face, GLenum mode) {
    glad_glTextureMaterialEXT(GLenum face, GLenum mode);
    gl_check_error();
}
void glGetUnsignedBytevEXT(GLenum pname, GLubyte *data) {
    glad_glGetUnsignedBytevEXT(GLenum pname, GLubyte *data);
    gl_check_error();
}
void glGetUnsignedBytei_vEXT(GLenum target, GLuint index, GLubyte *data) {
    glad_glGetUnsignedBytei_vEXT(GLenum target, GLuint index, GLubyte *data);
    gl_check_error();
}
void glDeleteMemoryObjectsEXT(GLsizei n, const GLuint *memoryObjects) {
    glad_glDeleteMemoryObjectsEXT(GLsizei n, const GLuint *memoryObjects);
    gl_check_error();
}
GLboolean glIsMemoryObjectEXT(GLuint memoryObject) {
    auto val = glad_glIsMemoryObjectEXT(GLuint memoryObject);
    gl_check_error();
    return val;
}
void glCreateMemoryObjectsEXT(GLsizei n, GLuint *memoryObjects) {
    glad_glCreateMemoryObjectsEXT(GLsizei n, GLuint *memoryObjects);
    gl_check_error();
}
void glMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, const GLint *params) {
    glad_glMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, const GLint *params);
    gl_check_error();
}
void glGetMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, GLint *params) {
    glad_glGetMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, GLint *params);
    gl_check_error();
}
void glTexStorageMem2DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) {
    glad_glTexStorageMem2DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset);
    gl_check_error();
}
void glTexStorageMem2DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
    glad_glTexStorageMem2DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
    gl_check_error();
}
void glTexStorageMem3DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) {
    glad_glTexStorageMem3DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset);
    gl_check_error();
}
void glTexStorageMem3DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
    glad_glTexStorageMem3DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
    gl_check_error();
}
void glBufferStorageMemEXT(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset) {
    glad_glBufferStorageMemEXT(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset);
    gl_check_error();
}
void glTextureStorageMem2DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) {
    glad_glTextureStorageMem2DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset);
    gl_check_error();
}
void glTextureStorageMem2DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
    glad_glTextureStorageMem2DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
    gl_check_error();
}
void glTextureStorageMem3DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) {
    glad_glTextureStorageMem3DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset);
    gl_check_error();
}
void glTextureStorageMem3DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
    glad_glTextureStorageMem3DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
    gl_check_error();
}
void glNamedBufferStorageMemEXT(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset) {
    glad_glNamedBufferStorageMemEXT(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset);
    gl_check_error();
}
void glTexStorageMem1DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) {
    glad_glTexStorageMem1DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset);
    gl_check_error();
}
void glTextureStorageMem1DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) {
    glad_glTextureStorageMem1DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset);
    gl_check_error();
}
void glImportMemoryFdEXT(GLuint memory, GLuint64 size, GLenum handleType, GLint fd) {
    glad_glImportMemoryFdEXT(GLuint memory, GLuint64 size, GLenum handleType, GLint fd);
    gl_check_error();
}
void glImportMemoryWin32HandleEXT(GLuint memory, GLuint64 size, GLenum handleType, void *handle) {
    glad_glImportMemoryWin32HandleEXT(GLuint memory, GLuint64 size, GLenum handleType, void *handle);
    gl_check_error();
}
void glImportMemoryWin32NameEXT(GLuint memory, GLuint64 size, GLenum handleType, const void *name) {
    glad_glImportMemoryWin32NameEXT(GLuint memory, GLuint64 size, GLenum handleType, const void *name);
    gl_check_error();
}
void glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount) {
    glad_glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
    gl_check_error();
}
void glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount) {
    glad_glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount);
    gl_check_error();
}
void glSampleMaskEXT(GLclampf value, GLboolean invert) {
    glad_glSampleMaskEXT(GLclampf value, GLboolean invert);
    gl_check_error();
}
void glSamplePatternEXT(GLenum pattern) {
    glad_glSamplePatternEXT(GLenum pattern);
    gl_check_error();
}
void glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table) {
    glad_glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table);
    gl_check_error();
}
void glGetColorTableEXT(GLenum target, GLenum format, GLenum type, void *data) {
    glad_glGetColorTableEXT(GLenum target, GLenum format, GLenum type, void *data);
    gl_check_error();
}
void glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint *params) {
    glad_glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat *params) {
    glad_glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glPixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param) {
    glad_glPixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param);
    gl_check_error();
}
void glPixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param) {
    glad_glPixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param);
    gl_check_error();
}
void glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params) {
    glad_glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params);
    gl_check_error();
}
void glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params) {
    glad_glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint *params) {
    glad_glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat *params) {
    glad_glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glPointParameterfEXT(GLenum pname, GLfloat param) {
    glad_glPointParameterfEXT(GLenum pname, GLfloat param);
    gl_check_error();
}
void glPointParameterfvEXT(GLenum pname, const GLfloat *params) {
    glad_glPointParameterfvEXT(GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glPolygonOffsetEXT(GLfloat factor, GLfloat bias) {
    glad_glPolygonOffsetEXT(GLfloat factor, GLfloat bias);
    gl_check_error();
}
void glPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp) {
    glad_glPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp);
    gl_check_error();
}
void glProvokingVertexEXT(GLenum mode) {
    glad_glProvokingVertexEXT(GLenum mode);
    gl_check_error();
}
void glRasterSamplesEXT(GLuint samples, GLboolean fixedsamplelocations) {
    glad_glRasterSamplesEXT(GLuint samples, GLboolean fixedsamplelocations);
    gl_check_error();
}
void glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue) {
    glad_glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue);
    gl_check_error();
}
void glSecondaryColor3bvEXT(const GLbyte *v) {
    glad_glSecondaryColor3bvEXT(const GLbyte *v);
    gl_check_error();
}
void glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue) {
    glad_glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue);
    gl_check_error();
}
void glSecondaryColor3dvEXT(const GLdouble *v) {
    glad_glSecondaryColor3dvEXT(const GLdouble *v);
    gl_check_error();
}
void glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue) {
    glad_glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue);
    gl_check_error();
}
void glSecondaryColor3fvEXT(const GLfloat *v) {
    glad_glSecondaryColor3fvEXT(const GLfloat *v);
    gl_check_error();
}
void glSecondaryColor3iEXT(GLint red, GLint green, GLint blue) {
    glad_glSecondaryColor3iEXT(GLint red, GLint green, GLint blue);
    gl_check_error();
}
void glSecondaryColor3ivEXT(const GLint *v) {
    glad_glSecondaryColor3ivEXT(const GLint *v);
    gl_check_error();
}
void glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue) {
    glad_glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue);
    gl_check_error();
}
void glSecondaryColor3svEXT(const GLshort *v) {
    glad_glSecondaryColor3svEXT(const GLshort *v);
    gl_check_error();
}
void glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue) {
    glad_glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue);
    gl_check_error();
}
void glSecondaryColor3ubvEXT(const GLubyte *v) {
    glad_glSecondaryColor3ubvEXT(const GLubyte *v);
    gl_check_error();
}
void glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue) {
    glad_glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue);
    gl_check_error();
}
void glSecondaryColor3uivEXT(const GLuint *v) {
    glad_glSecondaryColor3uivEXT(const GLuint *v);
    gl_check_error();
}
void glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue) {
    glad_glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue);
    gl_check_error();
}
void glSecondaryColor3usvEXT(const GLushort *v) {
    glad_glSecondaryColor3usvEXT(const GLushort *v);
    gl_check_error();
}
void glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const void *pointer) {
    glad_glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const void *pointer);
    gl_check_error();
}
void glGenSemaphoresEXT(GLsizei n, GLuint *semaphores) {
    glad_glGenSemaphoresEXT(GLsizei n, GLuint *semaphores);
    gl_check_error();
}
void glDeleteSemaphoresEXT(GLsizei n, const GLuint *semaphores) {
    glad_glDeleteSemaphoresEXT(GLsizei n, const GLuint *semaphores);
    gl_check_error();
}
GLboolean glIsSemaphoreEXT(GLuint semaphore) {
    auto val = glad_glIsSemaphoreEXT(GLuint semaphore);
    gl_check_error();
    return val;
}
void glSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, const GLuint64 *params) {
    glad_glSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, const GLuint64 *params);
    gl_check_error();
}
void glGetSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, GLuint64 *params) {
    glad_glGetSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, GLuint64 *params);
    gl_check_error();
}
void glWaitSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts) {
    glad_glWaitSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts);
    gl_check_error();
}
void glSignalSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts) {
    glad_glSignalSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts);
    gl_check_error();
}
void glImportSemaphoreFdEXT(GLuint semaphore, GLenum handleType, GLint fd) {
    glad_glImportSemaphoreFdEXT(GLuint semaphore, GLenum handleType, GLint fd);
    gl_check_error();
}
void glImportSemaphoreWin32HandleEXT(GLuint semaphore, GLenum handleType, void *handle) {
    glad_glImportSemaphoreWin32HandleEXT(GLuint semaphore, GLenum handleType, void *handle);
    gl_check_error();
}
void glImportSemaphoreWin32NameEXT(GLuint semaphore, GLenum handleType, const void *name) {
    glad_glImportSemaphoreWin32NameEXT(GLuint semaphore, GLenum handleType, const void *name);
    gl_check_error();
}
void glUseShaderProgramEXT(GLenum type, GLuint program) {
    glad_glUseShaderProgramEXT(GLenum type, GLuint program);
    gl_check_error();
}
void glActiveProgramEXT(GLuint program) {
    glad_glActiveProgramEXT(GLuint program);
    gl_check_error();
}
GLuint glCreateShaderProgramEXT(GLenum type, const GLchar *string) {
    auto val = glad_glCreateShaderProgramEXT(GLenum type, const GLchar *string);
    gl_check_error();
    return val;
}
void glActiveShaderProgramEXT(GLuint pipeline, GLuint program) {
    glad_glActiveShaderProgramEXT(GLuint pipeline, GLuint program);
    gl_check_error();
}
void glBindProgramPipelineEXT(GLuint pipeline) {
    glad_glBindProgramPipelineEXT(GLuint pipeline);
    gl_check_error();
}
GLuint glCreateShaderProgramvEXT(GLenum type, GLsizei count, const GLchar **strings) {
    auto val = glad_glCreateShaderProgramvEXT(GLenum type, GLsizei count, const GLchar **strings);
    gl_check_error();
    return val;
}
void glDeleteProgramPipelinesEXT(GLsizei n, const GLuint *pipelines) {
    glad_glDeleteProgramPipelinesEXT(GLsizei n, const GLuint *pipelines);
    gl_check_error();
}
void glGenProgramPipelinesEXT(GLsizei n, GLuint *pipelines) {
    glad_glGenProgramPipelinesEXT(GLsizei n, GLuint *pipelines);
    gl_check_error();
}
void glGetProgramPipelineInfoLogEXT(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
    glad_glGetProgramPipelineInfoLogEXT(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
    gl_check_error();
}
void glGetProgramPipelineivEXT(GLuint pipeline, GLenum pname, GLint *params) {
    glad_glGetProgramPipelineivEXT(GLuint pipeline, GLenum pname, GLint *params);
    gl_check_error();
}
GLboolean glIsProgramPipelineEXT(GLuint pipeline) {
    auto val = glad_glIsProgramPipelineEXT(GLuint pipeline);
    gl_check_error();
    return val;
}
void glUseProgramStagesEXT(GLuint pipeline, GLbitfield stages, GLuint program) {
    glad_glUseProgramStagesEXT(GLuint pipeline, GLbitfield stages, GLuint program);
    gl_check_error();
}
void glValidateProgramPipelineEXT(GLuint pipeline) {
    glad_glValidateProgramPipelineEXT(GLuint pipeline);
    gl_check_error();
}
void glFramebufferFetchBarrierEXT(void) {
    glad_glFramebufferFetchBarrierEXT(void);
    gl_check_error();
}
void glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format) {
    glad_glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
    gl_check_error();
}
void glMemoryBarrierEXT(GLbitfield barriers) {
    glad_glMemoryBarrierEXT(GLbitfield barriers);
    gl_check_error();
}
void glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag) {
    glad_glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag);
    gl_check_error();
}
void glActiveStencilFaceEXT(GLenum face) {
    glad_glActiveStencilFaceEXT(GLenum face);
    gl_check_error();
}
void glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) {
    glad_glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {
    glad_glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) {
    glad_glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) {
    glad_glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
    glad_glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
    gl_check_error();
}
void glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer) {
    glad_glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer);
    gl_check_error();
}
void glTexParameterIivEXT(GLenum target, GLenum pname, const GLint *params) {
    glad_glTexParameterIivEXT(GLenum target, GLenum pname, const GLint *params);
    gl_check_error();
}
void glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint *params) {
    glad_glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint *params);
    gl_check_error();
}
void glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params) {
    glad_glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params) {
    glad_glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params);
    gl_check_error();
}
void glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha) {
    glad_glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha);
    gl_check_error();
}
void glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha) {
    glad_glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha);
    gl_check_error();
}
GLboolean glAreTexturesResidentEXT(GLsizei n, const GLuint *textures, GLboolean *residences) {
    auto val = glad_glAreTexturesResidentEXT(GLsizei n, const GLuint *textures, GLboolean *residences);
    gl_check_error();
    return val;
}
void glBindTextureEXT(GLenum target, GLuint texture) {
    glad_glBindTextureEXT(GLenum target, GLuint texture);
    gl_check_error();
}
void glDeleteTexturesEXT(GLsizei n, const GLuint *textures) {
    glad_glDeleteTexturesEXT(GLsizei n, const GLuint *textures);
    gl_check_error();
}
void glGenTexturesEXT(GLsizei n, GLuint *textures) {
    glad_glGenTexturesEXT(GLsizei n, GLuint *textures);
    gl_check_error();
}
GLboolean glIsTextureEXT(GLuint texture) {
    auto val = glad_glIsTextureEXT(GLuint texture);
    gl_check_error();
    return val;
}
void glPrioritizeTexturesEXT(GLsizei n, const GLuint *textures, const GLclampf *priorities) {
    glad_glPrioritizeTexturesEXT(GLsizei n, const GLuint *textures, const GLclampf *priorities);
    gl_check_error();
}
void glTextureNormalEXT(GLenum mode) {
    glad_glTextureNormalEXT(GLenum mode);
    gl_check_error();
}
void glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64 *params) {
    glad_glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64 *params);
    gl_check_error();
}
void glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64 *params) {
    glad_glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64 *params);
    gl_check_error();
}
void glBeginTransformFeedbackEXT(GLenum primitiveMode) {
    glad_glBeginTransformFeedbackEXT(GLenum primitiveMode);
    gl_check_error();
}
void glEndTransformFeedbackEXT(void) {
    glad_glEndTransformFeedbackEXT(void);
    gl_check_error();
}
void glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
    glad_glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
    gl_check_error();
}
void glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset) {
    glad_glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
    gl_check_error();
}
void glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer) {
    glad_glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer);
    gl_check_error();
}
void glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode) {
    glad_glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
    gl_check_error();
}
void glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) {
    glad_glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
    gl_check_error();
}
void glArrayElementEXT(GLint i) {
    glad_glArrayElementEXT(GLint i);
    gl_check_error();
}
void glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer) {
    glad_glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
    gl_check_error();
}
void glDrawArraysEXT(GLenum mode, GLint first, GLsizei count) {
    glad_glDrawArraysEXT(GLenum mode, GLint first, GLsizei count);
    gl_check_error();
}
void glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean *pointer) {
    glad_glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean *pointer);
    gl_check_error();
}
void glGetPointervEXT(GLenum pname, void **params) {
    glad_glGetPointervEXT(GLenum pname, void **params);
    gl_check_error();
}
void glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void *pointer) {
    glad_glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void *pointer);
    gl_check_error();
}
void glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void *pointer) {
    glad_glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void *pointer);
    gl_check_error();
}
void glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer) {
    glad_glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
    gl_check_error();
}
void glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer) {
    glad_glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
    gl_check_error();
}
void glVertexAttribL1dEXT(GLuint index, GLdouble x) {
    glad_glVertexAttribL1dEXT(GLuint index, GLdouble x);
    gl_check_error();
}
void glVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y) {
    glad_glVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y);
    gl_check_error();
}
void glVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
    glad_glVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z);
    gl_check_error();
}
void glVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    gl_check_error();
}
void glVertexAttribL1dvEXT(GLuint index, const GLdouble *v) {
    glad_glVertexAttribL1dvEXT(GLuint index, const GLdouble *v);
    gl_check_error();
}
void glVertexAttribL2dvEXT(GLuint index, const GLdouble *v) {
    glad_glVertexAttribL2dvEXT(GLuint index, const GLdouble *v);
    gl_check_error();
}
void glVertexAttribL3dvEXT(GLuint index, const GLdouble *v) {
    glad_glVertexAttribL3dvEXT(GLuint index, const GLdouble *v);
    gl_check_error();
}
void glVertexAttribL4dvEXT(GLuint index, const GLdouble *v) {
    glad_glVertexAttribL4dvEXT(GLuint index, const GLdouble *v);
    gl_check_error();
}
void glVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) {
    glad_glVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
    gl_check_error();
}
void glGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble *params) {
    glad_glGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble *params);
    gl_check_error();
}
void glBeginVertexShaderEXT(void) {
    glad_glBeginVertexShaderEXT(void);
    gl_check_error();
}
void glEndVertexShaderEXT(void) {
    glad_glEndVertexShaderEXT(void);
    gl_check_error();
}
void glBindVertexShaderEXT(GLuint id) {
    glad_glBindVertexShaderEXT(GLuint id);
    gl_check_error();
}
GLuint glGenVertexShadersEXT(GLuint range) {
    auto val = glad_glGenVertexShadersEXT(GLuint range);
    gl_check_error();
    return val;
}
void glDeleteVertexShaderEXT(GLuint id) {
    glad_glDeleteVertexShaderEXT(GLuint id);
    gl_check_error();
}
void glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1) {
    glad_glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1);
    gl_check_error();
}
void glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2) {
    glad_glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2);
    gl_check_error();
}
void glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3) {
    glad_glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
    gl_check_error();
}
void glSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) {
    glad_glSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
    gl_check_error();
}
void glWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) {
    glad_glWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
    gl_check_error();
}
void glInsertComponentEXT(GLuint res, GLuint src, GLuint num) {
    glad_glInsertComponentEXT(GLuint res, GLuint src, GLuint num);
    gl_check_error();
}
void glExtractComponentEXT(GLuint res, GLuint src, GLuint num) {
    glad_glExtractComponentEXT(GLuint res, GLuint src, GLuint num);
    gl_check_error();
}
GLuint glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components) {
    auto val = glad_glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
    gl_check_error();
    return val;
}
void glSetInvariantEXT(GLuint id, GLenum type, const void *addr) {
    glad_glSetInvariantEXT(GLuint id, GLenum type, const void *addr);
    gl_check_error();
}
void glSetLocalConstantEXT(GLuint id, GLenum type, const void *addr) {
    glad_glSetLocalConstantEXT(GLuint id, GLenum type, const void *addr);
    gl_check_error();
}
void glVariantbvEXT(GLuint id, const GLbyte *addr) {
    glad_glVariantbvEXT(GLuint id, const GLbyte *addr);
    gl_check_error();
}
void glVariantsvEXT(GLuint id, const GLshort *addr) {
    glad_glVariantsvEXT(GLuint id, const GLshort *addr);
    gl_check_error();
}
void glVariantivEXT(GLuint id, const GLint *addr) {
    glad_glVariantivEXT(GLuint id, const GLint *addr);
    gl_check_error();
}
void glVariantfvEXT(GLuint id, const GLfloat *addr) {
    glad_glVariantfvEXT(GLuint id, const GLfloat *addr);
    gl_check_error();
}
void glVariantdvEXT(GLuint id, const GLdouble *addr) {
    glad_glVariantdvEXT(GLuint id, const GLdouble *addr);
    gl_check_error();
}
void glVariantubvEXT(GLuint id, const GLubyte *addr) {
    glad_glVariantubvEXT(GLuint id, const GLubyte *addr);
    gl_check_error();
}
void glVariantusvEXT(GLuint id, const GLushort *addr) {
    glad_glVariantusvEXT(GLuint id, const GLushort *addr);
    gl_check_error();
}
void glVariantuivEXT(GLuint id, const GLuint *addr) {
    glad_glVariantuivEXT(GLuint id, const GLuint *addr);
    gl_check_error();
}
void glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const void *addr) {
    glad_glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const void *addr);
    gl_check_error();
}
void glEnableVariantClientStateEXT(GLuint id) {
    glad_glEnableVariantClientStateEXT(GLuint id);
    gl_check_error();
}
void glDisableVariantClientStateEXT(GLuint id) {
    glad_glDisableVariantClientStateEXT(GLuint id);
    gl_check_error();
}
GLuint glBindLightParameterEXT(GLenum light, GLenum value) {
    auto val = glad_glBindLightParameterEXT(GLenum light, GLenum value);
    gl_check_error();
    return val;
}
GLuint glBindMaterialParameterEXT(GLenum face, GLenum value) {
    auto val = glad_glBindMaterialParameterEXT(GLenum face, GLenum value);
    gl_check_error();
    return val;
}
GLuint glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value) {
    auto val = glad_glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value);
    gl_check_error();
    return val;
}
GLuint glBindTextureUnitParameterEXT(GLenum unit, GLenum value) {
    auto val = glad_glBindTextureUnitParameterEXT(GLenum unit, GLenum value);
    gl_check_error();
    return val;
}
GLuint glBindParameterEXT(GLenum value) {
    auto val = glad_glBindParameterEXT(GLenum value);
    gl_check_error();
    return val;
}
GLboolean glIsVariantEnabledEXT(GLuint id, GLenum cap) {
    auto val = glad_glIsVariantEnabledEXT(GLuint id, GLenum cap);
    gl_check_error();
    return val;
}
void glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data) {
    glad_glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data);
    gl_check_error();
}
void glGetVariantIntegervEXT(GLuint id, GLenum value, GLint *data) {
    glad_glGetVariantIntegervEXT(GLuint id, GLenum value, GLint *data);
    gl_check_error();
}
void glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat *data) {
    glad_glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat *data);
    gl_check_error();
}
void glGetVariantPointervEXT(GLuint id, GLenum value, void **data) {
    glad_glGetVariantPointervEXT(GLuint id, GLenum value, void **data);
    gl_check_error();
}
void glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data) {
    glad_glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data);
    gl_check_error();
}
void glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint *data) {
    glad_glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint *data);
    gl_check_error();
}
void glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat *data) {
    glad_glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat *data);
    gl_check_error();
}
void glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean *data) {
    glad_glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean *data);
    gl_check_error();
}
void glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint *data) {
    glad_glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint *data);
    gl_check_error();
}
void glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat *data) {
    glad_glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat *data);
    gl_check_error();
}
void glVertexWeightfEXT(GLfloat weight) {
    glad_glVertexWeightfEXT(GLfloat weight);
    gl_check_error();
}
void glVertexWeightfvEXT(const GLfloat *weight) {
    glad_glVertexWeightfvEXT(const GLfloat *weight);
    gl_check_error();
}
void glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, const void *pointer) {
    glad_glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, const void *pointer);
    gl_check_error();
}
GLboolean glAcquireKeyedMutexWin32EXT(GLuint memory, GLuint64 key, GLuint timeout) {
    auto val = glad_glAcquireKeyedMutexWin32EXT(GLuint memory, GLuint64 key, GLuint timeout);
    gl_check_error();
    return val;
}
GLboolean glReleaseKeyedMutexWin32EXT(GLuint memory, GLuint64 key) {
    auto val = glad_glReleaseKeyedMutexWin32EXT(GLuint memory, GLuint64 key);
    gl_check_error();
    return val;
}
void glWindowRectanglesEXT(GLenum mode, GLsizei count, const GLint *box) {
    glad_glWindowRectanglesEXT(GLenum mode, GLsizei count, const GLint *box);
    gl_check_error();
}
GLsync glImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags) {
    auto val = glad_glImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags);
    gl_check_error();
    return val;
}
void glFrameTerminatorGREMEDY(void) {
    glad_glFrameTerminatorGREMEDY(void);
    gl_check_error();
}
void glStringMarkerGREMEDY(GLsizei len, const void *string) {
    glad_glStringMarkerGREMEDY(GLsizei len, const void *string);
    gl_check_error();
}
void glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param) {
    glad_glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param);
    gl_check_error();
}
void glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param) {
    glad_glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param);
    gl_check_error();
}
void glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint *params) {
    glad_glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint *params);
    gl_check_error();
}
void glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat *params) {
    glad_glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint *params) {
    glad_glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat *params) {
    glad_glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glMultiModeDrawArraysIBM(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride) {
    glad_glMultiModeDrawArraysIBM(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
    gl_check_error();
}
void glMultiModeDrawElementsIBM(const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride) {
    glad_glMultiModeDrawElementsIBM(const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride);
    gl_check_error();
}
void glFlushStaticDataIBM(GLenum target) {
    glad_glFlushStaticDataIBM(GLenum target);
    gl_check_error();
}
void glColorPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) {
    glad_glColorPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
    gl_check_error();
}
void glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) {
    glad_glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
    gl_check_error();
}
void glEdgeFlagPointerListIBM(GLint stride, const GLboolean **pointer, GLint ptrstride) {
    glad_glEdgeFlagPointerListIBM(GLint stride, const GLboolean **pointer, GLint ptrstride);
    gl_check_error();
}
void glFogCoordPointerListIBM(GLenum type, GLint stride, const void **pointer, GLint ptrstride) {
    glad_glFogCoordPointerListIBM(GLenum type, GLint stride, const void **pointer, GLint ptrstride);
    gl_check_error();
}
void glIndexPointerListIBM(GLenum type, GLint stride, const void **pointer, GLint ptrstride) {
    glad_glIndexPointerListIBM(GLenum type, GLint stride, const void **pointer, GLint ptrstride);
    gl_check_error();
}
void glNormalPointerListIBM(GLenum type, GLint stride, const void **pointer, GLint ptrstride) {
    glad_glNormalPointerListIBM(GLenum type, GLint stride, const void **pointer, GLint ptrstride);
    gl_check_error();
}
void glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) {
    glad_glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
    gl_check_error();
}
void glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) {
    glad_glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
    gl_check_error();
}
void glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
    glad_glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
    gl_check_error();
}
void glApplyFramebufferAttachmentCMAAINTEL(void) {
    glad_glApplyFramebufferAttachmentCMAAINTEL(void);
    gl_check_error();
}
void glSyncTextureINTEL(GLuint texture) {
    glad_glSyncTextureINTEL(GLuint texture);
    gl_check_error();
}
void glUnmapTexture2DINTEL(GLuint texture, GLint level) {
    glad_glUnmapTexture2DINTEL(GLuint texture, GLint level);
    gl_check_error();
}
void * glMapTexture2DINTEL(GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout) {
    glad_glMapTexture2DINTEL(GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout);
    gl_check_error();
}
void glVertexPointervINTEL(GLint size, GLenum type, const void **pointer) {
    glad_glVertexPointervINTEL(GLint size, GLenum type, const void **pointer);
    gl_check_error();
}
void glNormalPointervINTEL(GLenum type, const void **pointer) {
    glad_glNormalPointervINTEL(GLenum type, const void **pointer);
    gl_check_error();
}
void glColorPointervINTEL(GLint size, GLenum type, const void **pointer) {
    glad_glColorPointervINTEL(GLint size, GLenum type, const void **pointer);
    gl_check_error();
}
void glTexCoordPointervINTEL(GLint size, GLenum type, const void **pointer) {
    glad_glTexCoordPointervINTEL(GLint size, GLenum type, const void **pointer);
    gl_check_error();
}
void glBeginPerfQueryINTEL(GLuint queryHandle) {
    glad_glBeginPerfQueryINTEL(GLuint queryHandle);
    gl_check_error();
}
void glCreatePerfQueryINTEL(GLuint queryId, GLuint *queryHandle) {
    glad_glCreatePerfQueryINTEL(GLuint queryId, GLuint *queryHandle);
    gl_check_error();
}
void glDeletePerfQueryINTEL(GLuint queryHandle) {
    glad_glDeletePerfQueryINTEL(GLuint queryHandle);
    gl_check_error();
}
void glEndPerfQueryINTEL(GLuint queryHandle) {
    glad_glEndPerfQueryINTEL(GLuint queryHandle);
    gl_check_error();
}
void glGetFirstPerfQueryIdINTEL(GLuint *queryId) {
    glad_glGetFirstPerfQueryIdINTEL(GLuint *queryId);
    gl_check_error();
}
void glGetNextPerfQueryIdINTEL(GLuint queryId, GLuint *nextQueryId) {
    glad_glGetNextPerfQueryIdINTEL(GLuint queryId, GLuint *nextQueryId);
    gl_check_error();
}
void glGetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue) {
    glad_glGetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue);
    gl_check_error();
}
void glGetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten) {
    glad_glGetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten);
    gl_check_error();
}
void glGetPerfQueryIdByNameINTEL(GLchar *queryName, GLuint *queryId) {
    glad_glGetPerfQueryIdByNameINTEL(GLchar *queryName, GLuint *queryId);
    gl_check_error();
}
void glGetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask) {
    glad_glGetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask);
    gl_check_error();
}
void glBlendBarrierKHR(void) {
    glad_glBlendBarrierKHR(void);
    gl_check_error();
}
void glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) {
    glad_glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
    gl_check_error();
}
void glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) {
    glad_glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
    gl_check_error();
}
void glDebugMessageCallback(GLDEBUGPROC callback, const void *userParam) {
    glad_glDebugMessageCallback(GLDEBUGPROC callback, const void *userParam);
    gl_check_error();
}
GLuint glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) {
    auto val = glad_glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
    gl_check_error();
    return val;
}
void glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message) {
    glad_glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message);
    gl_check_error();
}
void glPopDebugGroup(void) {
    glad_glPopDebugGroup(void);
    gl_check_error();
}
void glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label) {
    glad_glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
    gl_check_error();
}
void glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label) {
    glad_glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
    gl_check_error();
}
void glObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label) {
    glad_glObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label);
    gl_check_error();
}
void glGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label) {
    glad_glGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
    gl_check_error();
}
void glDebugMessageControlKHR(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) {
    glad_glDebugMessageControlKHR(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
    gl_check_error();
}
void glDebugMessageInsertKHR(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) {
    glad_glDebugMessageInsertKHR(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
    gl_check_error();
}
void glDebugMessageCallbackKHR(GLDEBUGPROCKHR callback, const void *userParam) {
    glad_glDebugMessageCallbackKHR(GLDEBUGPROCKHR callback, const void *userParam);
    gl_check_error();
}
GLuint glGetDebugMessageLogKHR(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) {
    auto val = glad_glGetDebugMessageLogKHR(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
    gl_check_error();
    return val;
}
void glPushDebugGroupKHR(GLenum source, GLuint id, GLsizei length, const GLchar *message) {
    glad_glPushDebugGroupKHR(GLenum source, GLuint id, GLsizei length, const GLchar *message);
    gl_check_error();
}
void glPopDebugGroupKHR(void) {
    glad_glPopDebugGroupKHR(void);
    gl_check_error();
}
void glObjectLabelKHR(GLenum identifier, GLuint name, GLsizei length, const GLchar *label) {
    glad_glObjectLabelKHR(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
    gl_check_error();
}
void glGetObjectLabelKHR(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label) {
    glad_glGetObjectLabelKHR(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
    gl_check_error();
}
void glObjectPtrLabelKHR(const void *ptr, GLsizei length, const GLchar *label) {
    glad_glObjectPtrLabelKHR(const void *ptr, GLsizei length, const GLchar *label);
    gl_check_error();
}
void glGetObjectPtrLabelKHR(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label) {
    glad_glGetObjectPtrLabelKHR(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
    gl_check_error();
}
void glGetPointervKHR(GLenum pname, void **params) {
    glad_glGetPointervKHR(GLenum pname, void **params);
    gl_check_error();
}
void glMaxShaderCompilerThreadsKHR(GLuint count) {
    glad_glMaxShaderCompilerThreadsKHR(GLuint count);
    gl_check_error();
}
GLenum glGetGraphicsResetStatus(void) {
    auto val = glad_glGetGraphicsResetStatus(void);
    gl_check_error();
    return val;
}
void glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) {
    glad_glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
    gl_check_error();
}
void glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params) {
    glad_glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
    gl_check_error();
}
void glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params) {
    glad_glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params);
    gl_check_error();
}
void glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params) {
    glad_glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
    gl_check_error();
}
GLenum glGetGraphicsResetStatusKHR(void) {
    auto val = glad_glGetGraphicsResetStatusKHR(void);
    gl_check_error();
    return val;
}
void glReadnPixelsKHR(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) {
    glad_glReadnPixelsKHR(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
    gl_check_error();
}
void glGetnUniformfvKHR(GLuint program, GLint location, GLsizei bufSize, GLfloat *params) {
    glad_glGetnUniformfvKHR(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
    gl_check_error();
}
void glGetnUniformivKHR(GLuint program, GLint location, GLsizei bufSize, GLint *params) {
    glad_glGetnUniformivKHR(GLuint program, GLint location, GLsizei bufSize, GLint *params);
    gl_check_error();
}
void glGetnUniformuivKHR(GLuint program, GLint location, GLsizei bufSize, GLuint *params) {
    glad_glGetnUniformuivKHR(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
    gl_check_error();
}
void glFramebufferParameteriMESA(GLenum target, GLenum pname, GLint param) {
    glad_glFramebufferParameteriMESA(GLenum target, GLenum pname, GLint param);
    gl_check_error();
}
void glGetFramebufferParameterivMESA(GLenum target, GLenum pname, GLint *params) {
    glad_glGetFramebufferParameterivMESA(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glResizeBuffersMESA(void) {
    glad_glResizeBuffersMESA(void);
    gl_check_error();
}
void glWindowPos2dMESA(GLdouble x, GLdouble y) {
    glad_glWindowPos2dMESA(GLdouble x, GLdouble y);
    gl_check_error();
}
void glWindowPos2dvMESA(const GLdouble *v) {
    glad_glWindowPos2dvMESA(const GLdouble *v);
    gl_check_error();
}
void glWindowPos2fMESA(GLfloat x, GLfloat y) {
    glad_glWindowPos2fMESA(GLfloat x, GLfloat y);
    gl_check_error();
}
void glWindowPos2fvMESA(const GLfloat *v) {
    glad_glWindowPos2fvMESA(const GLfloat *v);
    gl_check_error();
}
void glWindowPos2iMESA(GLint x, GLint y) {
    glad_glWindowPos2iMESA(GLint x, GLint y);
    gl_check_error();
}
void glWindowPos2ivMESA(const GLint *v) {
    glad_glWindowPos2ivMESA(const GLint *v);
    gl_check_error();
}
void glWindowPos2sMESA(GLshort x, GLshort y) {
    glad_glWindowPos2sMESA(GLshort x, GLshort y);
    gl_check_error();
}
void glWindowPos2svMESA(const GLshort *v) {
    glad_glWindowPos2svMESA(const GLshort *v);
    gl_check_error();
}
void glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z) {
    glad_glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z);
    gl_check_error();
}
void glWindowPos3dvMESA(const GLdouble *v) {
    glad_glWindowPos3dvMESA(const GLdouble *v);
    gl_check_error();
}
void glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z) {
    glad_glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glWindowPos3fvMESA(const GLfloat *v) {
    glad_glWindowPos3fvMESA(const GLfloat *v);
    gl_check_error();
}
void glWindowPos3iMESA(GLint x, GLint y, GLint z) {
    glad_glWindowPos3iMESA(GLint x, GLint y, GLint z);
    gl_check_error();
}
void glWindowPos3ivMESA(const GLint *v) {
    glad_glWindowPos3ivMESA(const GLint *v);
    gl_check_error();
}
void glWindowPos3sMESA(GLshort x, GLshort y, GLshort z) {
    glad_glWindowPos3sMESA(GLshort x, GLshort y, GLshort z);
    gl_check_error();
}
void glWindowPos3svMESA(const GLshort *v) {
    glad_glWindowPos3svMESA(const GLshort *v);
    gl_check_error();
}
void glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    gl_check_error();
}
void glWindowPos4dvMESA(const GLdouble *v) {
    glad_glWindowPos4dvMESA(const GLdouble *v);
    gl_check_error();
}
void glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    gl_check_error();
}
void glWindowPos4fvMESA(const GLfloat *v) {
    glad_glWindowPos4fvMESA(const GLfloat *v);
    gl_check_error();
}
void glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w) {
    glad_glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w);
    gl_check_error();
}
void glWindowPos4ivMESA(const GLint *v) {
    glad_glWindowPos4ivMESA(const GLint *v);
    gl_check_error();
}
void glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w) {
    glad_glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w);
    gl_check_error();
}
void glWindowPos4svMESA(const GLshort *v) {
    glad_glWindowPos4svMESA(const GLshort *v);
    gl_check_error();
}
void glBeginConditionalRenderNVX(GLuint id) {
    glad_glBeginConditionalRenderNVX(GLuint id);
    gl_check_error();
}
void glEndConditionalRenderNVX(void) {
    glad_glEndConditionalRenderNVX(void);
    gl_check_error();
}
void glUploadGpuMaskNVX(GLbitfield mask) {
    glad_glUploadGpuMaskNVX(GLbitfield mask);
    gl_check_error();
}
void glMulticastViewportArrayvNVX(GLuint gpu, GLuint first, GLsizei count, const GLfloat *v) {
    glad_glMulticastViewportArrayvNVX(GLuint gpu, GLuint first, GLsizei count, const GLfloat *v);
    gl_check_error();
}
void glMulticastViewportPositionWScaleNVX(GLuint gpu, GLuint index, GLfloat xcoeff, GLfloat ycoeff) {
    glad_glMulticastViewportPositionWScaleNVX(GLuint gpu, GLuint index, GLfloat xcoeff, GLfloat ycoeff);
    gl_check_error();
}
void glMulticastScissorArrayvNVX(GLuint gpu, GLuint first, GLsizei count, const GLint *v) {
    glad_glMulticastScissorArrayvNVX(GLuint gpu, GLuint first, GLsizei count, const GLint *v);
    gl_check_error();
}
GLuint glAsyncCopyBufferSubDataNVX(GLsizei waitSemaphoreCount, const GLuint *waitSemaphoreArray, const GLuint64 *fenceValueArray, GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, GLsizei signalSemaphoreCount, const GLuint *signalSemaphoreArray, const GLuint64 *signalValueArray) {
    auto val = glad_glAsyncCopyBufferSubDataNVX(GLsizei waitSemaphoreCount, const GLuint *waitSemaphoreArray, const GLuint64 *fenceValueArray, GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, GLsizei signalSemaphoreCount, const GLuint *signalSemaphoreArray, const GLuint64 *signalValueArray);
    gl_check_error();
    return val;
}
GLuint glAsyncCopyImageSubDataNVX(GLsizei waitSemaphoreCount, const GLuint *waitSemaphoreArray, const GLuint64 *waitValueArray, GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, GLsizei signalSemaphoreCount, const GLuint *signalSemaphoreArray, const GLuint64 *signalValueArray) {
    auto val = glad_glAsyncCopyImageSubDataNVX(GLsizei waitSemaphoreCount, const GLuint *waitSemaphoreArray, const GLuint64 *waitValueArray, GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, GLsizei signalSemaphoreCount, const GLuint *signalSemaphoreArray, const GLuint64 *signalValueArray);
    gl_check_error();
    return val;
}
void glLGPUNamedBufferSubDataNVX(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data) {
    glad_glLGPUNamedBufferSubDataNVX(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
    gl_check_error();
}
void glLGPUCopyImageSubDataNVX(GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) {
    glad_glLGPUCopyImageSubDataNVX(GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
    gl_check_error();
}
void glLGPUInterlockNVX(void) {
    glad_glLGPUInterlockNVX(void);
    gl_check_error();
}
GLuint glCreateProgressFenceNVX(void) {
    auto val = glad_glCreateProgressFenceNVX(void);
    gl_check_error();
    return val;
}
void glSignalSemaphoreui64NVX(GLuint signalGpu, GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray) {
    glad_glSignalSemaphoreui64NVX(GLuint signalGpu, GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray);
    gl_check_error();
}
void glWaitSemaphoreui64NVX(GLuint waitGpu, GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray) {
    glad_glWaitSemaphoreui64NVX(GLuint waitGpu, GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray);
    gl_check_error();
}
void glClientWaitSemaphoreui64NVX(GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray) {
    glad_glClientWaitSemaphoreui64NVX(GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray);
    gl_check_error();
}
void glAlphaToCoverageDitherControlNV(GLenum mode) {
    glad_glAlphaToCoverageDitherControlNV(GLenum mode);
    gl_check_error();
}
void glMultiDrawArraysIndirectBindlessNV(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) {
    glad_glMultiDrawArraysIndirectBindlessNV(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
    gl_check_error();
}
void glMultiDrawElementsIndirectBindlessNV(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) {
    glad_glMultiDrawElementsIndirectBindlessNV(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
    gl_check_error();
}
void glMultiDrawArraysIndirectBindlessCountNV(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) {
    glad_glMultiDrawArraysIndirectBindlessCountNV(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
    gl_check_error();
}
void glMultiDrawElementsIndirectBindlessCountNV(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) {
    glad_glMultiDrawElementsIndirectBindlessCountNV(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
    gl_check_error();
}
GLuint64 glGetTextureHandleNV(GLuint texture) {
    auto val = glad_glGetTextureHandleNV(GLuint texture);
    gl_check_error();
    return val;
}
GLuint64 glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler) {
    auto val = glad_glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler);
    gl_check_error();
    return val;
}
void glMakeTextureHandleResidentNV(GLuint64 handle) {
    glad_glMakeTextureHandleResidentNV(GLuint64 handle);
    gl_check_error();
}
void glMakeTextureHandleNonResidentNV(GLuint64 handle) {
    glad_glMakeTextureHandleNonResidentNV(GLuint64 handle);
    gl_check_error();
}
GLuint64 glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) {
    auto val = glad_glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
    gl_check_error();
    return val;
}
void glMakeImageHandleResidentNV(GLuint64 handle, GLenum access) {
    glad_glMakeImageHandleResidentNV(GLuint64 handle, GLenum access);
    gl_check_error();
}
void glMakeImageHandleNonResidentNV(GLuint64 handle) {
    glad_glMakeImageHandleNonResidentNV(GLuint64 handle);
    gl_check_error();
}
void glUniformHandleui64NV(GLint location, GLuint64 value) {
    glad_glUniformHandleui64NV(GLint location, GLuint64 value);
    gl_check_error();
}
void glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 *value) {
    glad_glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 *value);
    gl_check_error();
}
void glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value) {
    glad_glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value);
    gl_check_error();
}
void glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 *values) {
    glad_glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 *values);
    gl_check_error();
}
GLboolean glIsTextureHandleResidentNV(GLuint64 handle) {
    auto val = glad_glIsTextureHandleResidentNV(GLuint64 handle);
    gl_check_error();
    return val;
}
GLboolean glIsImageHandleResidentNV(GLuint64 handle) {
    auto val = glad_glIsImageHandleResidentNV(GLuint64 handle);
    gl_check_error();
    return val;
}
void glBlendParameteriNV(GLenum pname, GLint value) {
    glad_glBlendParameteriNV(GLenum pname, GLint value);
    gl_check_error();
}
void glBlendBarrierNV(void) {
    glad_glBlendBarrierNV(void);
    gl_check_error();
}
void glViewportPositionWScaleNV(GLuint index, GLfloat xcoeff, GLfloat ycoeff) {
    glad_glViewportPositionWScaleNV(GLuint index, GLfloat xcoeff, GLfloat ycoeff);
    gl_check_error();
}
void glCreateStatesNV(GLsizei n, GLuint *states) {
    glad_glCreateStatesNV(GLsizei n, GLuint *states);
    gl_check_error();
}
void glDeleteStatesNV(GLsizei n, const GLuint *states) {
    glad_glDeleteStatesNV(GLsizei n, const GLuint *states);
    gl_check_error();
}
GLboolean glIsStateNV(GLuint state) {
    auto val = glad_glIsStateNV(GLuint state);
    gl_check_error();
    return val;
}
void glStateCaptureNV(GLuint state, GLenum mode) {
    glad_glStateCaptureNV(GLuint state, GLenum mode);
    gl_check_error();
}
GLuint glGetCommandHeaderNV(GLenum tokenID, GLuint size) {
    auto val = glad_glGetCommandHeaderNV(GLenum tokenID, GLuint size);
    gl_check_error();
    return val;
}
GLushort glGetStageIndexNV(GLenum shadertype) {
    auto val = glad_glGetStageIndexNV(GLenum shadertype);
    gl_check_error();
    return val;
}
void glDrawCommandsNV(GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count) {
    glad_glDrawCommandsNV(GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count);
    gl_check_error();
}
void glDrawCommandsAddressNV(GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count) {
    glad_glDrawCommandsAddressNV(GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count);
    gl_check_error();
}
void glDrawCommandsStatesNV(GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) {
    glad_glDrawCommandsStatesNV(GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
    gl_check_error();
}
void glDrawCommandsStatesAddressNV(const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) {
    glad_glDrawCommandsStatesAddressNV(const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
    gl_check_error();
}
void glCreateCommandListsNV(GLsizei n, GLuint *lists) {
    glad_glCreateCommandListsNV(GLsizei n, GLuint *lists);
    gl_check_error();
}
void glDeleteCommandListsNV(GLsizei n, const GLuint *lists) {
    glad_glDeleteCommandListsNV(GLsizei n, const GLuint *lists);
    gl_check_error();
}
GLboolean glIsCommandListNV(GLuint list) {
    auto val = glad_glIsCommandListNV(GLuint list);
    gl_check_error();
    return val;
}
void glListDrawCommandsStatesClientNV(GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) {
    glad_glListDrawCommandsStatesClientNV(GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
    gl_check_error();
}
void glCommandListSegmentsNV(GLuint list, GLuint segments) {
    glad_glCommandListSegmentsNV(GLuint list, GLuint segments);
    gl_check_error();
}
void glCompileCommandListNV(GLuint list) {
    glad_glCompileCommandListNV(GLuint list);
    gl_check_error();
}
void glCallCommandListNV(GLuint list) {
    glad_glCallCommandListNV(GLuint list);
    gl_check_error();
}
void glBeginConditionalRenderNV(GLuint id, GLenum mode) {
    glad_glBeginConditionalRenderNV(GLuint id, GLenum mode);
    gl_check_error();
}
void glEndConditionalRenderNV(void) {
    glad_glEndConditionalRenderNV(void);
    gl_check_error();
}
void glSubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits) {
    glad_glSubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits);
    gl_check_error();
}
void glConservativeRasterParameterfNV(GLenum pname, GLfloat value) {
    glad_glConservativeRasterParameterfNV(GLenum pname, GLfloat value);
    gl_check_error();
}
void glConservativeRasterParameteriNV(GLenum pname, GLint param) {
    glad_glConservativeRasterParameteriNV(GLenum pname, GLint param);
    gl_check_error();
}
void glCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) {
    glad_glCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
    gl_check_error();
}
void glDepthRangedNV(GLdouble zNear, GLdouble zFar) {
    glad_glDepthRangedNV(GLdouble zNear, GLdouble zFar);
    gl_check_error();
}
void glClearDepthdNV(GLdouble depth) {
    glad_glClearDepthdNV(GLdouble depth);
    gl_check_error();
}
void glDepthBoundsdNV(GLdouble zmin, GLdouble zmax) {
    glad_glDepthBoundsdNV(GLdouble zmin, GLdouble zmax);
    gl_check_error();
}
void glDrawTextureNV(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) {
    glad_glDrawTextureNV(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
    gl_check_error();
}
void glDrawVkImageNV(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) {
    glad_glDrawVkImageNV(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
    gl_check_error();
}
GLVULKANPROCNV glGetVkProcAddrNV(const GLchar *name) {
    auto val = glad_glGetVkProcAddrNV(const GLchar *name);
    gl_check_error();
    return val;
}
void glWaitVkSemaphoreNV(GLuint64 vkSemaphore) {
    glad_glWaitVkSemaphoreNV(GLuint64 vkSemaphore);
    gl_check_error();
}
void glSignalVkSemaphoreNV(GLuint64 vkSemaphore) {
    glad_glSignalVkSemaphoreNV(GLuint64 vkSemaphore);
    gl_check_error();
}
void glSignalVkFenceNV(GLuint64 vkFence) {
    glad_glSignalVkFenceNV(GLuint64 vkFence);
    gl_check_error();
}
void glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points) {
    glad_glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points);
    gl_check_error();
}
void glMapParameterivNV(GLenum target, GLenum pname, const GLint *params) {
    glad_glMapParameterivNV(GLenum target, GLenum pname, const GLint *params);
    gl_check_error();
}
void glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat *params) {
    glad_glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points) {
    glad_glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points);
    gl_check_error();
}
void glGetMapParameterivNV(GLenum target, GLenum pname, GLint *params) {
    glad_glGetMapParameterivNV(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat *params) {
    glad_glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint *params) {
    glad_glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params) {
    glad_glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glEvalMapsNV(GLenum target, GLenum mode) {
    glad_glEvalMapsNV(GLenum target, GLenum mode);
    gl_check_error();
}
void glGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat *val) {
    glad_glGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat *val);
    gl_check_error();
}
void glSampleMaskIndexedNV(GLuint index, GLbitfield mask) {
    glad_glSampleMaskIndexedNV(GLuint index, GLbitfield mask);
    gl_check_error();
}
void glTexRenderbufferNV(GLenum target, GLuint renderbuffer) {
    glad_glTexRenderbufferNV(GLenum target, GLuint renderbuffer);
    gl_check_error();
}
void glDeleteFencesNV(GLsizei n, const GLuint *fences) {
    glad_glDeleteFencesNV(GLsizei n, const GLuint *fences);
    gl_check_error();
}
void glGenFencesNV(GLsizei n, GLuint *fences) {
    glad_glGenFencesNV(GLsizei n, GLuint *fences);
    gl_check_error();
}
GLboolean glIsFenceNV(GLuint fence) {
    auto val = glad_glIsFenceNV(GLuint fence);
    gl_check_error();
    return val;
}
GLboolean glTestFenceNV(GLuint fence) {
    auto val = glad_glTestFenceNV(GLuint fence);
    gl_check_error();
    return val;
}
void glGetFenceivNV(GLuint fence, GLenum pname, GLint *params) {
    glad_glGetFenceivNV(GLuint fence, GLenum pname, GLint *params);
    gl_check_error();
}
void glFinishFenceNV(GLuint fence) {
    glad_glFinishFenceNV(GLuint fence);
    gl_check_error();
}
void glSetFenceNV(GLuint fence, GLenum condition) {
    glad_glSetFenceNV(GLuint fence, GLenum condition);
    gl_check_error();
}
void glFragmentCoverageColorNV(GLuint color) {
    glad_glFragmentCoverageColorNV(GLuint color);
    gl_check_error();
}
void glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    gl_check_error();
}
void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v) {
    glad_glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);
    gl_check_error();
}
void glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    gl_check_error();
}
void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v) {
    glad_glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
    gl_check_error();
}
void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params) {
    glad_glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
    gl_check_error();
}
void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params) {
    glad_glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);
    gl_check_error();
}
void glCoverageModulationTableNV(GLsizei n, const GLfloat *v) {
    glad_glCoverageModulationTableNV(GLsizei n, const GLfloat *v);
    gl_check_error();
}
void glGetCoverageModulationTableNV(GLsizei bufSize, GLfloat *v) {
    glad_glGetCoverageModulationTableNV(GLsizei bufSize, GLfloat *v);
    gl_check_error();
}
void glCoverageModulationNV(GLenum components) {
    glad_glCoverageModulationNV(GLenum components);
    gl_check_error();
}
void glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
    gl_check_error();
}
void glProgramVertexLimitNV(GLenum target, GLint limit) {
    glad_glProgramVertexLimitNV(GLenum target, GLint limit);
    gl_check_error();
}
void glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level) {
    glad_glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level);
    gl_check_error();
}
void glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) {
    glad_glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
    gl_check_error();
}
void glRenderGpuMaskNV(GLbitfield mask) {
    glad_glRenderGpuMaskNV(GLbitfield mask);
    gl_check_error();
}
void glMulticastBufferSubDataNV(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data) {
    glad_glMulticastBufferSubDataNV(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
    gl_check_error();
}
void glMulticastCopyBufferSubDataNV(GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
    glad_glMulticastCopyBufferSubDataNV(GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
    gl_check_error();
}
void glMulticastCopyImageSubDataNV(GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {
    glad_glMulticastCopyImageSubDataNV(GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
    gl_check_error();
}
void glMulticastBlitFramebufferNV(GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
    glad_glMulticastBlitFramebufferNV(GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
    gl_check_error();
}
void glMulticastFramebufferSampleLocationsfvNV(GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v) {
    glad_glMulticastFramebufferSampleLocationsfvNV(GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
    gl_check_error();
}
void glMulticastBarrierNV(void) {
    glad_glMulticastBarrierNV(void);
    gl_check_error();
}
void glMulticastWaitSyncNV(GLuint signalGpu, GLbitfield waitGpuMask) {
    glad_glMulticastWaitSyncNV(GLuint signalGpu, GLbitfield waitGpuMask);
    gl_check_error();
}
void glMulticastGetQueryObjectivNV(GLuint gpu, GLuint id, GLenum pname, GLint *params) {
    glad_glMulticastGetQueryObjectivNV(GLuint gpu, GLuint id, GLenum pname, GLint *params);
    gl_check_error();
}
void glMulticastGetQueryObjectuivNV(GLuint gpu, GLuint id, GLenum pname, GLuint *params) {
    glad_glMulticastGetQueryObjectuivNV(GLuint gpu, GLuint id, GLenum pname, GLuint *params);
    gl_check_error();
}
void glMulticastGetQueryObjecti64vNV(GLuint gpu, GLuint id, GLenum pname, GLint64 *params) {
    glad_glMulticastGetQueryObjecti64vNV(GLuint gpu, GLuint id, GLenum pname, GLint64 *params);
    gl_check_error();
}
void glMulticastGetQueryObjectui64vNV(GLuint gpu, GLuint id, GLenum pname, GLuint64 *params) {
    glad_glMulticastGetQueryObjectui64vNV(GLuint gpu, GLuint id, GLenum pname, GLuint64 *params);
    gl_check_error();
}
void glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {
    glad_glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
    gl_check_error();
}
void glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint *params) {
    glad_glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint *params);
    gl_check_error();
}
void glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params) {
    glad_glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params);
    gl_check_error();
}
void glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
    glad_glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
    gl_check_error();
}
void glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint *params) {
    glad_glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint *params);
    gl_check_error();
}
void glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params) {
    glad_glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params);
    gl_check_error();
}
void glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {
    glad_glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
    gl_check_error();
}
void glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint *params) {
    glad_glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint *params);
    gl_check_error();
}
void glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params) {
    glad_glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params);
    gl_check_error();
}
void glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
    glad_glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
    gl_check_error();
}
void glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint *params) {
    glad_glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint *params);
    gl_check_error();
}
void glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params) {
    glad_glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params);
    gl_check_error();
}
void glGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint *params) {
    glad_glGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint *params);
    gl_check_error();
}
void glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint *params) {
    glad_glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint *params);
    gl_check_error();
}
void glGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint *params) {
    glad_glGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint *params);
    gl_check_error();
}
void glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint *params) {
    glad_glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint *params);
    gl_check_error();
}
void glProgramSubroutineParametersuivNV(GLenum target, GLsizei count, const GLuint *params) {
    glad_glProgramSubroutineParametersuivNV(GLenum target, GLsizei count, const GLuint *params);
    gl_check_error();
}
void glGetProgramSubroutineParameteruivNV(GLenum target, GLuint index, GLuint *param) {
    glad_glGetProgramSubroutineParameteruivNV(GLenum target, GLuint index, GLuint *param);
    gl_check_error();
}
void glVertex2hNV(GLhalfNV x, GLhalfNV y) {
    glad_glVertex2hNV(GLhalfNV x, GLhalfNV y);
    gl_check_error();
}
void glVertex2hvNV(const GLhalfNV *v) {
    glad_glVertex2hvNV(const GLhalfNV *v);
    gl_check_error();
}
void glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z) {
    glad_glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z);
    gl_check_error();
}
void glVertex3hvNV(const GLhalfNV *v) {
    glad_glVertex3hvNV(const GLhalfNV *v);
    gl_check_error();
}
void glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) {
    glad_glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
    gl_check_error();
}
void glVertex4hvNV(const GLhalfNV *v) {
    glad_glVertex4hvNV(const GLhalfNV *v);
    gl_check_error();
}
void glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz) {
    glad_glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
    gl_check_error();
}
void glNormal3hvNV(const GLhalfNV *v) {
    glad_glNormal3hvNV(const GLhalfNV *v);
    gl_check_error();
}
void glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue) {
    glad_glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
    gl_check_error();
}
void glColor3hvNV(const GLhalfNV *v) {
    glad_glColor3hvNV(const GLhalfNV *v);
    gl_check_error();
}
void glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha) {
    glad_glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
    gl_check_error();
}
void glColor4hvNV(const GLhalfNV *v) {
    glad_glColor4hvNV(const GLhalfNV *v);
    gl_check_error();
}
void glTexCoord1hNV(GLhalfNV s) {
    glad_glTexCoord1hNV(GLhalfNV s);
    gl_check_error();
}
void glTexCoord1hvNV(const GLhalfNV *v) {
    glad_glTexCoord1hvNV(const GLhalfNV *v);
    gl_check_error();
}
void glTexCoord2hNV(GLhalfNV s, GLhalfNV t) {
    glad_glTexCoord2hNV(GLhalfNV s, GLhalfNV t);
    gl_check_error();
}
void glTexCoord2hvNV(const GLhalfNV *v) {
    glad_glTexCoord2hvNV(const GLhalfNV *v);
    gl_check_error();
}
void glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r) {
    glad_glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r);
    gl_check_error();
}
void glTexCoord3hvNV(const GLhalfNV *v) {
    glad_glTexCoord3hvNV(const GLhalfNV *v);
    gl_check_error();
}
void glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) {
    glad_glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
    gl_check_error();
}
void glTexCoord4hvNV(const GLhalfNV *v) {
    glad_glTexCoord4hvNV(const GLhalfNV *v);
    gl_check_error();
}
void glMultiTexCoord1hNV(GLenum target, GLhalfNV s) {
    glad_glMultiTexCoord1hNV(GLenum target, GLhalfNV s);
    gl_check_error();
}
void glMultiTexCoord1hvNV(GLenum target, const GLhalfNV *v) {
    glad_glMultiTexCoord1hvNV(GLenum target, const GLhalfNV *v);
    gl_check_error();
}
void glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t) {
    glad_glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t);
    gl_check_error();
}
void glMultiTexCoord2hvNV(GLenum target, const GLhalfNV *v) {
    glad_glMultiTexCoord2hvNV(GLenum target, const GLhalfNV *v);
    gl_check_error();
}
void glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r) {
    glad_glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
    gl_check_error();
}
void glMultiTexCoord3hvNV(GLenum target, const GLhalfNV *v) {
    glad_glMultiTexCoord3hvNV(GLenum target, const GLhalfNV *v);
    gl_check_error();
}
void glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) {
    glad_glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
    gl_check_error();
}
void glMultiTexCoord4hvNV(GLenum target, const GLhalfNV *v) {
    glad_glMultiTexCoord4hvNV(GLenum target, const GLhalfNV *v);
    gl_check_error();
}
void glFogCoordhNV(GLhalfNV fog) {
    glad_glFogCoordhNV(GLhalfNV fog);
    gl_check_error();
}
void glFogCoordhvNV(const GLhalfNV *fog) {
    glad_glFogCoordhvNV(const GLhalfNV *fog);
    gl_check_error();
}
void glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue) {
    glad_glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
    gl_check_error();
}
void glSecondaryColor3hvNV(const GLhalfNV *v) {
    glad_glSecondaryColor3hvNV(const GLhalfNV *v);
    gl_check_error();
}
void glVertexWeighthNV(GLhalfNV weight) {
    glad_glVertexWeighthNV(GLhalfNV weight);
    gl_check_error();
}
void glVertexWeighthvNV(const GLhalfNV *weight) {
    glad_glVertexWeighthvNV(const GLhalfNV *weight);
    gl_check_error();
}
void glVertexAttrib1hNV(GLuint index, GLhalfNV x) {
    glad_glVertexAttrib1hNV(GLuint index, GLhalfNV x);
    gl_check_error();
}
void glVertexAttrib1hvNV(GLuint index, const GLhalfNV *v) {
    glad_glVertexAttrib1hvNV(GLuint index, const GLhalfNV *v);
    gl_check_error();
}
void glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y) {
    glad_glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y);
    gl_check_error();
}
void glVertexAttrib2hvNV(GLuint index, const GLhalfNV *v) {
    glad_glVertexAttrib2hvNV(GLuint index, const GLhalfNV *v);
    gl_check_error();
}
void glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z) {
    glad_glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
    gl_check_error();
}
void glVertexAttrib3hvNV(GLuint index, const GLhalfNV *v) {
    glad_glVertexAttrib3hvNV(GLuint index, const GLhalfNV *v);
    gl_check_error();
}
void glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) {
    glad_glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
    gl_check_error();
}
void glVertexAttrib4hvNV(GLuint index, const GLhalfNV *v) {
    glad_glVertexAttrib4hvNV(GLuint index, const GLhalfNV *v);
    gl_check_error();
}
void glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalfNV *v) {
    glad_glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalfNV *v);
    gl_check_error();
}
void glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalfNV *v) {
    glad_glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalfNV *v);
    gl_check_error();
}
void glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalfNV *v) {
    glad_glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalfNV *v);
    gl_check_error();
}
void glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalfNV *v) {
    glad_glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalfNV *v);
    gl_check_error();
}
void glGetInternalformatSampleivNV(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, GLint *params) {
    glad_glGetInternalformatSampleivNV(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, GLint *params);
    gl_check_error();
}
void glGetMemoryObjectDetachedResourcesuivNV(GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint *params) {
    glad_glGetMemoryObjectDetachedResourcesuivNV(GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint *params);
    gl_check_error();
}
void glResetMemoryObjectParameterNV(GLuint memory, GLenum pname) {
    glad_glResetMemoryObjectParameterNV(GLuint memory, GLenum pname);
    gl_check_error();
}
void glTexAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset) {
    glad_glTexAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset);
    gl_check_error();
}
void glBufferAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset) {
    glad_glBufferAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset);
    gl_check_error();
}
void glTextureAttachMemoryNV(GLuint texture, GLuint memory, GLuint64 offset) {
    glad_glTextureAttachMemoryNV(GLuint texture, GLuint memory, GLuint64 offset);
    gl_check_error();
}
void glNamedBufferAttachMemoryNV(GLuint buffer, GLuint memory, GLuint64 offset) {
    glad_glNamedBufferAttachMemoryNV(GLuint buffer, GLuint memory, GLuint64 offset);
    gl_check_error();
}
void glDrawMeshTasksNV(GLuint first, GLuint count) {
    glad_glDrawMeshTasksNV(GLuint first, GLuint count);
    gl_check_error();
}
void glDrawMeshTasksIndirectNV(GLintptr indirect) {
    glad_glDrawMeshTasksIndirectNV(GLintptr indirect);
    gl_check_error();
}
void glMultiDrawMeshTasksIndirectNV(GLintptr indirect, GLsizei drawcount, GLsizei stride) {
    glad_glMultiDrawMeshTasksIndirectNV(GLintptr indirect, GLsizei drawcount, GLsizei stride);
    gl_check_error();
}
void glMultiDrawMeshTasksIndirectCountNV(GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
    glad_glMultiDrawMeshTasksIndirectCountNV(GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
    gl_check_error();
}
void glGenOcclusionQueriesNV(GLsizei n, GLuint *ids) {
    glad_glGenOcclusionQueriesNV(GLsizei n, GLuint *ids);
    gl_check_error();
}
void glDeleteOcclusionQueriesNV(GLsizei n, const GLuint *ids) {
    glad_glDeleteOcclusionQueriesNV(GLsizei n, const GLuint *ids);
    gl_check_error();
}
GLboolean glIsOcclusionQueryNV(GLuint id) {
    auto val = glad_glIsOcclusionQueryNV(GLuint id);
    gl_check_error();
    return val;
}
void glBeginOcclusionQueryNV(GLuint id) {
    glad_glBeginOcclusionQueryNV(GLuint id);
    gl_check_error();
}
void glEndOcclusionQueryNV(void) {
    glad_glEndOcclusionQueryNV(void);
    gl_check_error();
}
void glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint *params) {
    glad_glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint *params) {
    glad_glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint *params);
    gl_check_error();
}
void glProgramBufferParametersfvNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params) {
    glad_glProgramBufferParametersfvNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params);
    gl_check_error();
}
void glProgramBufferParametersIivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params) {
    glad_glProgramBufferParametersIivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params);
    gl_check_error();
}
void glProgramBufferParametersIuivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params) {
    glad_glProgramBufferParametersIuivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params);
    gl_check_error();
}
GLuint glGenPathsNV(GLsizei range) {
    auto val = glad_glGenPathsNV(GLsizei range);
    gl_check_error();
    return val;
}
void glDeletePathsNV(GLuint path, GLsizei range) {
    glad_glDeletePathsNV(GLuint path, GLsizei range);
    gl_check_error();
}
GLboolean glIsPathNV(GLuint path) {
    auto val = glad_glIsPathNV(GLuint path);
    gl_check_error();
    return val;
}
void glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords) {
    glad_glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);
    gl_check_error();
}
void glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const void *coords) {
    glad_glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const void *coords);
    gl_check_error();
}
void glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords) {
    glad_glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);
    gl_check_error();
}
void glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords) {
    glad_glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords);
    gl_check_error();
}
void glPathStringNV(GLuint path, GLenum format, GLsizei length, const void *pathString) {
    glad_glPathStringNV(GLuint path, GLenum format, GLsizei length, const void *pathString);
    gl_check_error();
}
void glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
    glad_glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
    gl_check_error();
}
void glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
    glad_glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
    gl_check_error();
}
void glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights) {
    glad_glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
    gl_check_error();
}
void glCopyPathNV(GLuint resultPath, GLuint srcPath) {
    glad_glCopyPathNV(GLuint resultPath, GLuint srcPath);
    gl_check_error();
}
void glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) {
    glad_glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
    gl_check_error();
}
void glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues) {
    glad_glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
    gl_check_error();
}
void glPathParameterivNV(GLuint path, GLenum pname, const GLint *value) {
    glad_glPathParameterivNV(GLuint path, GLenum pname, const GLint *value);
    gl_check_error();
}
void glPathParameteriNV(GLuint path, GLenum pname, GLint value) {
    glad_glPathParameteriNV(GLuint path, GLenum pname, GLint value);
    gl_check_error();
}
void glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat *value) {
    glad_glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat *value);
    gl_check_error();
}
void glPathParameterfNV(GLuint path, GLenum pname, GLfloat value) {
    glad_glPathParameterfNV(GLuint path, GLenum pname, GLfloat value);
    gl_check_error();
}
void glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat *dashArray) {
    glad_glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat *dashArray);
    gl_check_error();
}
void glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask) {
    glad_glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask);
    gl_check_error();
}
void glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units) {
    glad_glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units);
    gl_check_error();
}
void glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask) {
    glad_glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask);
    gl_check_error();
}
void glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask) {
    glad_glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask);
    gl_check_error();
}
void glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues) {
    glad_glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
    gl_check_error();
}
void glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues) {
    glad_glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
    gl_check_error();
}
void glPathCoverDepthFuncNV(GLenum func) {
    glad_glPathCoverDepthFuncNV(GLenum func);
    gl_check_error();
}
void glCoverFillPathNV(GLuint path, GLenum coverMode) {
    glad_glCoverFillPathNV(GLuint path, GLenum coverMode);
    gl_check_error();
}
void glCoverStrokePathNV(GLuint path, GLenum coverMode) {
    glad_glCoverStrokePathNV(GLuint path, GLenum coverMode);
    gl_check_error();
}
void glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) {
    glad_glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
    gl_check_error();
}
void glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) {
    glad_glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
    gl_check_error();
}
void glGetPathParameterivNV(GLuint path, GLenum pname, GLint *value) {
    glad_glGetPathParameterivNV(GLuint path, GLenum pname, GLint *value);
    gl_check_error();
}
void glGetPathParameterfvNV(GLuint path, GLenum pname, GLfloat *value) {
    glad_glGetPathParameterfvNV(GLuint path, GLenum pname, GLfloat *value);
    gl_check_error();
}
void glGetPathCommandsNV(GLuint path, GLubyte *commands) {
    glad_glGetPathCommandsNV(GLuint path, GLubyte *commands);
    gl_check_error();
}
void glGetPathCoordsNV(GLuint path, GLfloat *coords) {
    glad_glGetPathCoordsNV(GLuint path, GLfloat *coords);
    gl_check_error();
}
void glGetPathDashArrayNV(GLuint path, GLfloat *dashArray) {
    glad_glGetPathDashArrayNV(GLuint path, GLfloat *dashArray);
    gl_check_error();
}
void glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics) {
    glad_glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
    gl_check_error();
}
void glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics) {
    glad_glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
    gl_check_error();
}
void glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing) {
    glad_glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
    gl_check_error();
}
GLboolean glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y) {
    auto val = glad_glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y);
    gl_check_error();
    return val;
}
GLboolean glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y) {
    auto val = glad_glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y);
    gl_check_error();
    return val;
}
GLfloat glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments) {
    auto val = glad_glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments);
    gl_check_error();
    return val;
}
GLboolean glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY) {
    auto val = glad_glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
    gl_check_error();
    return val;
}
void glMatrixLoad3x2fNV(GLenum matrixMode, const GLfloat *m) {
    glad_glMatrixLoad3x2fNV(GLenum matrixMode, const GLfloat *m);
    gl_check_error();
}
void glMatrixLoad3x3fNV(GLenum matrixMode, const GLfloat *m) {
    glad_glMatrixLoad3x3fNV(GLenum matrixMode, const GLfloat *m);
    gl_check_error();
}
void glMatrixLoadTranspose3x3fNV(GLenum matrixMode, const GLfloat *m) {
    glad_glMatrixLoadTranspose3x3fNV(GLenum matrixMode, const GLfloat *m);
    gl_check_error();
}
void glMatrixMult3x2fNV(GLenum matrixMode, const GLfloat *m) {
    glad_glMatrixMult3x2fNV(GLenum matrixMode, const GLfloat *m);
    gl_check_error();
}
void glMatrixMult3x3fNV(GLenum matrixMode, const GLfloat *m) {
    glad_glMatrixMult3x3fNV(GLenum matrixMode, const GLfloat *m);
    gl_check_error();
}
void glMatrixMultTranspose3x3fNV(GLenum matrixMode, const GLfloat *m) {
    glad_glMatrixMultTranspose3x3fNV(GLenum matrixMode, const GLfloat *m);
    gl_check_error();
}
void glStencilThenCoverFillPathNV(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode) {
    glad_glStencilThenCoverFillPathNV(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode);
    gl_check_error();
}
void glStencilThenCoverStrokePathNV(GLuint path, GLint reference, GLuint mask, GLenum coverMode) {
    glad_glStencilThenCoverStrokePathNV(GLuint path, GLint reference, GLuint mask, GLenum coverMode);
    gl_check_error();
}
void glStencilThenCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) {
    glad_glStencilThenCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
    gl_check_error();
}
void glStencilThenCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) {
    glad_glStencilThenCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
    gl_check_error();
}
GLenum glPathGlyphIndexRangeNV(GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]) {
    auto val = glad_glPathGlyphIndexRangeNV(GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]);
    gl_check_error();
    return val;
}
GLenum glPathGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
    auto val = glad_glPathGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
    gl_check_error();
    return val;
}
GLenum glPathMemoryGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
    auto val = glad_glPathMemoryGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
    gl_check_error();
    return val;
}
void glProgramPathFragmentInputGenNV(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs) {
    glad_glProgramPathFragmentInputGenNV(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs);
    gl_check_error();
}
void glGetProgramResourcefvNV(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLfloat *params) {
    glad_glGetProgramResourcefvNV(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLfloat *params);
    gl_check_error();
}
void glPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs) {
    glad_glPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
    gl_check_error();
}
void glPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs) {
    glad_glPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
    gl_check_error();
}
void glPathFogGenNV(GLenum genMode) {
    glad_glPathFogGenNV(GLenum genMode);
    gl_check_error();
}
void glGetPathColorGenivNV(GLenum color, GLenum pname, GLint *value) {
    glad_glGetPathColorGenivNV(GLenum color, GLenum pname, GLint *value);
    gl_check_error();
}
void glGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat *value) {
    glad_glGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat *value);
    gl_check_error();
}
void glGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint *value) {
    glad_glGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint *value);
    gl_check_error();
}
void glGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat *value) {
    glad_glGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat *value);
    gl_check_error();
}
void glPixelDataRangeNV(GLenum target, GLsizei length, const void *pointer) {
    glad_glPixelDataRangeNV(GLenum target, GLsizei length, const void *pointer);
    gl_check_error();
}
void glFlushPixelDataRangeNV(GLenum target) {
    glad_glFlushPixelDataRangeNV(GLenum target);
    gl_check_error();
}
void glPointParameteriNV(GLenum pname, GLint param) {
    glad_glPointParameteriNV(GLenum pname, GLint param);
    gl_check_error();
}
void glPointParameterivNV(GLenum pname, const GLint *params) {
    glad_glPointParameterivNV(GLenum pname, const GLint *params);
    gl_check_error();
}
void glPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1) {
    glad_glPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
    gl_check_error();
}
void glPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3) {
    glad_glPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
    gl_check_error();
}
void glGetVideoivNV(GLuint video_slot, GLenum pname, GLint *params) {
    glad_glGetVideoivNV(GLuint video_slot, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetVideouivNV(GLuint video_slot, GLenum pname, GLuint *params) {
    glad_glGetVideouivNV(GLuint video_slot, GLenum pname, GLuint *params);
    gl_check_error();
}
void glGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT *params) {
    glad_glGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT *params);
    gl_check_error();
}
void glGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT *params) {
    glad_glGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT *params);
    gl_check_error();
}
void glPrimitiveRestartNV(void) {
    glad_glPrimitiveRestartNV(void);
    gl_check_error();
}
void glPrimitiveRestartIndexNV(GLuint index) {
    glad_glPrimitiveRestartIndexNV(GLuint index);
    gl_check_error();
}
GLint glQueryResourceNV(GLenum queryType, GLint tagId, GLuint count, GLint *buffer) {
    auto val = glad_glQueryResourceNV(GLenum queryType, GLint tagId, GLuint count, GLint *buffer);
    gl_check_error();
    return val;
}
void glGenQueryResourceTagNV(GLsizei n, GLint *tagIds) {
    glad_glGenQueryResourceTagNV(GLsizei n, GLint *tagIds);
    gl_check_error();
}
void glDeleteQueryResourceTagNV(GLsizei n, const GLint *tagIds) {
    glad_glDeleteQueryResourceTagNV(GLsizei n, const GLint *tagIds);
    gl_check_error();
}
void glQueryResourceTagNV(GLint tagId, const GLchar *tagString) {
    glad_glQueryResourceTagNV(GLint tagId, const GLchar *tagString);
    gl_check_error();
}
void glCombinerParameterfvNV(GLenum pname, const GLfloat *params) {
    glad_glCombinerParameterfvNV(GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glCombinerParameterfNV(GLenum pname, GLfloat param) {
    glad_glCombinerParameterfNV(GLenum pname, GLfloat param);
    gl_check_error();
}
void glCombinerParameterivNV(GLenum pname, const GLint *params) {
    glad_glCombinerParameterivNV(GLenum pname, const GLint *params);
    gl_check_error();
}
void glCombinerParameteriNV(GLenum pname, GLint param) {
    glad_glCombinerParameteriNV(GLenum pname, GLint param);
    gl_check_error();
}
void glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) {
    glad_glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
    gl_check_error();
}
void glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum) {
    glad_glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
    gl_check_error();
}
void glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) {
    glad_glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
    gl_check_error();
}
void glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params) {
    glad_glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params) {
    glad_glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat *params) {
    glad_glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint *params) {
    glad_glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat *params) {
    glad_glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint *params) {
    glad_glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint *params);
    gl_check_error();
}
void glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat *params) {
    glad_glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat *params) {
    glad_glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glFramebufferSampleLocationsfvNV(GLenum target, GLuint start, GLsizei count, const GLfloat *v) {
    glad_glFramebufferSampleLocationsfvNV(GLenum target, GLuint start, GLsizei count, const GLfloat *v);
    gl_check_error();
}
void glNamedFramebufferSampleLocationsfvNV(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v) {
    glad_glNamedFramebufferSampleLocationsfvNV(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
    gl_check_error();
}
void glResolveDepthValuesNV(void) {
    glad_glResolveDepthValuesNV(void);
    gl_check_error();
}
void glScissorExclusiveNV(GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glScissorExclusiveNV(GLint x, GLint y, GLsizei width, GLsizei height);
    gl_check_error();
}
void glScissorExclusiveArrayvNV(GLuint first, GLsizei count, const GLint *v) {
    glad_glScissorExclusiveArrayvNV(GLuint first, GLsizei count, const GLint *v);
    gl_check_error();
}
void glMakeBufferResidentNV(GLenum target, GLenum access) {
    glad_glMakeBufferResidentNV(GLenum target, GLenum access);
    gl_check_error();
}
void glMakeBufferNonResidentNV(GLenum target) {
    glad_glMakeBufferNonResidentNV(GLenum target);
    gl_check_error();
}
GLboolean glIsBufferResidentNV(GLenum target) {
    auto val = glad_glIsBufferResidentNV(GLenum target);
    gl_check_error();
    return val;
}
void glMakeNamedBufferResidentNV(GLuint buffer, GLenum access) {
    glad_glMakeNamedBufferResidentNV(GLuint buffer, GLenum access);
    gl_check_error();
}
void glMakeNamedBufferNonResidentNV(GLuint buffer) {
    glad_glMakeNamedBufferNonResidentNV(GLuint buffer);
    gl_check_error();
}
GLboolean glIsNamedBufferResidentNV(GLuint buffer) {
    auto val = glad_glIsNamedBufferResidentNV(GLuint buffer);
    gl_check_error();
    return val;
}
void glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT *params) {
    glad_glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT *params);
    gl_check_error();
}
void glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT *params) {
    glad_glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT *params);
    gl_check_error();
}
void glGetIntegerui64vNV(GLenum value, GLuint64EXT *result) {
    glad_glGetIntegerui64vNV(GLenum value, GLuint64EXT *result);
    gl_check_error();
}
void glUniformui64NV(GLint location, GLuint64EXT value) {
    glad_glUniformui64NV(GLint location, GLuint64EXT value);
    gl_check_error();
}
void glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) {
    glad_glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT *value);
    gl_check_error();
}
void glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT value) {
    glad_glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT value);
    gl_check_error();
}
void glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) {
    glad_glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
    gl_check_error();
}
void glBindShadingRateImageNV(GLuint texture) {
    glad_glBindShadingRateImageNV(GLuint texture);
    gl_check_error();
}
void glGetShadingRateImagePaletteNV(GLuint viewport, GLuint entry, GLenum *rate) {
    glad_glGetShadingRateImagePaletteNV(GLuint viewport, GLuint entry, GLenum *rate);
    gl_check_error();
}
void glGetShadingRateSampleLocationivNV(GLenum rate, GLuint samples, GLuint index, GLint *location) {
    glad_glGetShadingRateSampleLocationivNV(GLenum rate, GLuint samples, GLuint index, GLint *location);
    gl_check_error();
}
void glShadingRateImageBarrierNV(GLboolean synchronize) {
    glad_glShadingRateImageBarrierNV(GLboolean synchronize);
    gl_check_error();
}
void glShadingRateImagePaletteNV(GLuint viewport, GLuint first, GLsizei count, const GLenum *rates) {
    glad_glShadingRateImagePaletteNV(GLuint viewport, GLuint first, GLsizei count, const GLenum *rates);
    gl_check_error();
}
void glShadingRateSampleOrderNV(GLenum order) {
    glad_glShadingRateSampleOrderNV(GLenum order);
    gl_check_error();
}
void glShadingRateSampleOrderCustomNV(GLenum rate, GLuint samples, const GLint *locations) {
    glad_glShadingRateSampleOrderCustomNV(GLenum rate, GLuint samples, const GLint *locations);
    gl_check_error();
}
void glTextureBarrierNV(void) {
    glad_glTextureBarrierNV(void);
    gl_check_error();
}
void glTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {
    glad_glTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
    gl_check_error();
}
void glTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {
    glad_glTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
    gl_check_error();
}
void glTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {
    glad_glTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
    gl_check_error();
}
void glTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {
    glad_glTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
    gl_check_error();
}
void glTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {
    glad_glTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
    gl_check_error();
}
void glTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {
    glad_glTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
    gl_check_error();
}
void glBeginTransformFeedbackNV(GLenum primitiveMode) {
    glad_glBeginTransformFeedbackNV(GLenum primitiveMode);
    gl_check_error();
}
void glEndTransformFeedbackNV(void) {
    glad_glEndTransformFeedbackNV(void);
    gl_check_error();
}
void glTransformFeedbackAttribsNV(GLsizei count, const GLint *attribs, GLenum bufferMode) {
    glad_glTransformFeedbackAttribsNV(GLsizei count, const GLint *attribs, GLenum bufferMode);
    gl_check_error();
}
void glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
    glad_glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
    gl_check_error();
}
void glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset) {
    glad_glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
    gl_check_error();
}
void glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer) {
    glad_glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer);
    gl_check_error();
}
void glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode) {
    glad_glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode);
    gl_check_error();
}
void glActiveVaryingNV(GLuint program, const GLchar *name) {
    glad_glActiveVaryingNV(GLuint program, const GLchar *name);
    gl_check_error();
}
GLint glGetVaryingLocationNV(GLuint program, const GLchar *name) {
    auto val = glad_glGetVaryingLocationNV(GLuint program, const GLchar *name);
    gl_check_error();
    return val;
}
void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) {
    glad_glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
    gl_check_error();
}
void glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint *location) {
    glad_glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint *location);
    gl_check_error();
}
void glTransformFeedbackStreamAttribsNV(GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode) {
    glad_glTransformFeedbackStreamAttribsNV(GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode);
    gl_check_error();
}
void glBindTransformFeedbackNV(GLenum target, GLuint id) {
    glad_glBindTransformFeedbackNV(GLenum target, GLuint id);
    gl_check_error();
}
void glDeleteTransformFeedbacksNV(GLsizei n, const GLuint *ids) {
    glad_glDeleteTransformFeedbacksNV(GLsizei n, const GLuint *ids);
    gl_check_error();
}
void glGenTransformFeedbacksNV(GLsizei n, GLuint *ids) {
    glad_glGenTransformFeedbacksNV(GLsizei n, GLuint *ids);
    gl_check_error();
}
GLboolean glIsTransformFeedbackNV(GLuint id) {
    auto val = glad_glIsTransformFeedbackNV(GLuint id);
    gl_check_error();
    return val;
}
void glPauseTransformFeedbackNV(void) {
    glad_glPauseTransformFeedbackNV(void);
    gl_check_error();
}
void glResumeTransformFeedbackNV(void) {
    glad_glResumeTransformFeedbackNV(void);
    gl_check_error();
}
void glDrawTransformFeedbackNV(GLenum mode, GLuint id) {
    glad_glDrawTransformFeedbackNV(GLenum mode, GLuint id);
    gl_check_error();
}
void glVDPAUInitNV(const void *vdpDevice, const void *getProcAddress) {
    glad_glVDPAUInitNV(const void *vdpDevice, const void *getProcAddress);
    gl_check_error();
}
void glVDPAUFiniNV(void) {
    glad_glVDPAUFiniNV(void);
    gl_check_error();
}
GLvdpauSurfaceNV glVDPAURegisterVideoSurfaceNV(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames) {
    auto val = glad_glVDPAURegisterVideoSurfaceNV(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
    gl_check_error();
    return val;
}
GLvdpauSurfaceNV glVDPAURegisterOutputSurfaceNV(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames) {
    auto val = glad_glVDPAURegisterOutputSurfaceNV(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
    gl_check_error();
    return val;
}
GLboolean glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface) {
    auto val = glad_glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface);
    gl_check_error();
    return val;
}
void glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface) {
    glad_glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface);
    gl_check_error();
}
void glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei count, GLsizei *length, GLint *values) {
    glad_glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei count, GLsizei *length, GLint *values);
    gl_check_error();
}
void glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access) {
    glad_glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access);
    gl_check_error();
}
void glVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces) {
    glad_glVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces);
    gl_check_error();
}
void glVDPAUUnmapSurfacesNV(GLsizei numSurface, const GLvdpauSurfaceNV *surfaces) {
    glad_glVDPAUUnmapSurfacesNV(GLsizei numSurface, const GLvdpauSurfaceNV *surfaces);
    gl_check_error();
}
GLvdpauSurfaceNV glVDPAURegisterVideoSurfaceWithPictureStructureNV(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames, GLboolean isFrameStructure) {
    auto val = glad_glVDPAURegisterVideoSurfaceWithPictureStructureNV(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames, GLboolean isFrameStructure);
    gl_check_error();
    return val;
}
void glFlushVertexArrayRangeNV(void) {
    glad_glFlushVertexArrayRangeNV(void);
    gl_check_error();
}
void glVertexArrayRangeNV(GLsizei length, const void *pointer) {
    glad_glVertexArrayRangeNV(GLsizei length, const void *pointer);
    gl_check_error();
}
void glVertexAttribL1i64NV(GLuint index, GLint64EXT x) {
    glad_glVertexAttribL1i64NV(GLuint index, GLint64EXT x);
    gl_check_error();
}
void glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y) {
    glad_glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y);
    gl_check_error();
}
void glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
    glad_glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
    gl_check_error();
}
void glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
    glad_glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
    gl_check_error();
}
void glVertexAttribL1i64vNV(GLuint index, const GLint64EXT *v) {
    glad_glVertexAttribL1i64vNV(GLuint index, const GLint64EXT *v);
    gl_check_error();
}
void glVertexAttribL2i64vNV(GLuint index, const GLint64EXT *v) {
    glad_glVertexAttribL2i64vNV(GLuint index, const GLint64EXT *v);
    gl_check_error();
}
void glVertexAttribL3i64vNV(GLuint index, const GLint64EXT *v) {
    glad_glVertexAttribL3i64vNV(GLuint index, const GLint64EXT *v);
    gl_check_error();
}
void glVertexAttribL4i64vNV(GLuint index, const GLint64EXT *v) {
    glad_glVertexAttribL4i64vNV(GLuint index, const GLint64EXT *v);
    gl_check_error();
}
void glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x) {
    glad_glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x);
    gl_check_error();
}
void glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y) {
    glad_glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y);
    gl_check_error();
}
void glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
    glad_glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
    gl_check_error();
}
void glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
    glad_glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
    gl_check_error();
}
void glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT *v) {
    glad_glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT *v);
    gl_check_error();
}
void glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT *v) {
    glad_glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT *v);
    gl_check_error();
}
void glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT *v) {
    glad_glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT *v);
    gl_check_error();
}
void glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT *v) {
    glad_glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT *v);
    gl_check_error();
}
void glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT *params) {
    glad_glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT *params);
    gl_check_error();
}
void glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT *params) {
    glad_glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT *params);
    gl_check_error();
}
void glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) {
    glad_glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride);
    gl_check_error();
}
void glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length) {
    glad_glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
    gl_check_error();
}
void glVertexFormatNV(GLint size, GLenum type, GLsizei stride) {
    glad_glVertexFormatNV(GLint size, GLenum type, GLsizei stride);
    gl_check_error();
}
void glNormalFormatNV(GLenum type, GLsizei stride) {
    glad_glNormalFormatNV(GLenum type, GLsizei stride);
    gl_check_error();
}
void glColorFormatNV(GLint size, GLenum type, GLsizei stride) {
    glad_glColorFormatNV(GLint size, GLenum type, GLsizei stride);
    gl_check_error();
}
void glIndexFormatNV(GLenum type, GLsizei stride) {
    glad_glIndexFormatNV(GLenum type, GLsizei stride);
    gl_check_error();
}
void glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride) {
    glad_glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride);
    gl_check_error();
}
void glEdgeFlagFormatNV(GLsizei stride) {
    glad_glEdgeFlagFormatNV(GLsizei stride);
    gl_check_error();
}
void glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride) {
    glad_glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride);
    gl_check_error();
}
void glFogCoordFormatNV(GLenum type, GLsizei stride) {
    glad_glFogCoordFormatNV(GLenum type, GLsizei stride);
    gl_check_error();
}
void glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride) {
    glad_glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
    gl_check_error();
}
void glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) {
    glad_glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride);
    gl_check_error();
}
void glGetIntegerui64i_vNV(GLenum value, GLuint index, GLuint64EXT *result) {
    glad_glGetIntegerui64i_vNV(GLenum value, GLuint index, GLuint64EXT *result);
    gl_check_error();
}
GLboolean glAreProgramsResidentNV(GLsizei n, const GLuint *programs, GLboolean *residences) {
    auto val = glad_glAreProgramsResidentNV(GLsizei n, const GLuint *programs, GLboolean *residences);
    gl_check_error();
    return val;
}
void glBindProgramNV(GLenum target, GLuint id) {
    glad_glBindProgramNV(GLenum target, GLuint id);
    gl_check_error();
}
void glDeleteProgramsNV(GLsizei n, const GLuint *programs) {
    glad_glDeleteProgramsNV(GLsizei n, const GLuint *programs);
    gl_check_error();
}
void glExecuteProgramNV(GLenum target, GLuint id, const GLfloat *params) {
    glad_glExecuteProgramNV(GLenum target, GLuint id, const GLfloat *params);
    gl_check_error();
}
void glGenProgramsNV(GLsizei n, GLuint *programs) {
    glad_glGenProgramsNV(GLsizei n, GLuint *programs);
    gl_check_error();
}
void glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble *params) {
    glad_glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble *params);
    gl_check_error();
}
void glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params) {
    glad_glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetProgramivNV(GLuint id, GLenum pname, GLint *params) {
    glad_glGetProgramivNV(GLuint id, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetProgramStringNV(GLuint id, GLenum pname, GLubyte *program) {
    glad_glGetProgramStringNV(GLuint id, GLenum pname, GLubyte *program);
    gl_check_error();
}
void glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint *params) {
    glad_glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble *params) {
    glad_glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble *params);
    gl_check_error();
}
void glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat *params) {
    glad_glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetVertexAttribivNV(GLuint index, GLenum pname, GLint *params) {
    glad_glGetVertexAttribivNV(GLuint index, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetVertexAttribPointervNV(GLuint index, GLenum pname, void **pointer) {
    glad_glGetVertexAttribPointervNV(GLuint index, GLenum pname, void **pointer);
    gl_check_error();
}
GLboolean glIsProgramNV(GLuint id) {
    auto val = glad_glIsProgramNV(GLuint id);
    gl_check_error();
    return val;
}
void glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte *program) {
    glad_glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte *program);
    gl_check_error();
}
void glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    gl_check_error();
}
void glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble *v) {
    glad_glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble *v);
    gl_check_error();
}
void glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    gl_check_error();
}
void glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat *v) {
    glad_glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat *v);
    gl_check_error();
}
void glProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble *v) {
    glad_glProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble *v);
    gl_check_error();
}
void glProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat *v) {
    glad_glProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat *v);
    gl_check_error();
}
void glRequestResidentProgramsNV(GLsizei n, const GLuint *programs) {
    glad_glRequestResidentProgramsNV(GLsizei n, const GLuint *programs);
    gl_check_error();
}
void glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform) {
    glad_glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform);
    gl_check_error();
}
void glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer) {
    glad_glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer);
    gl_check_error();
}
void glVertexAttrib1dNV(GLuint index, GLdouble x) {
    glad_glVertexAttrib1dNV(GLuint index, GLdouble x);
    gl_check_error();
}
void glVertexAttrib1dvNV(GLuint index, const GLdouble *v) {
    glad_glVertexAttrib1dvNV(GLuint index, const GLdouble *v);
    gl_check_error();
}
void glVertexAttrib1fNV(GLuint index, GLfloat x) {
    glad_glVertexAttrib1fNV(GLuint index, GLfloat x);
    gl_check_error();
}
void glVertexAttrib1fvNV(GLuint index, const GLfloat *v) {
    glad_glVertexAttrib1fvNV(GLuint index, const GLfloat *v);
    gl_check_error();
}
void glVertexAttrib1sNV(GLuint index, GLshort x) {
    glad_glVertexAttrib1sNV(GLuint index, GLshort x);
    gl_check_error();
}
void glVertexAttrib1svNV(GLuint index, const GLshort *v) {
    glad_glVertexAttrib1svNV(GLuint index, const GLshort *v);
    gl_check_error();
}
void glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y) {
    glad_glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y);
    gl_check_error();
}
void glVertexAttrib2dvNV(GLuint index, const GLdouble *v) {
    glad_glVertexAttrib2dvNV(GLuint index, const GLdouble *v);
    gl_check_error();
}
void glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y) {
    glad_glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y);
    gl_check_error();
}
void glVertexAttrib2fvNV(GLuint index, const GLfloat *v) {
    glad_glVertexAttrib2fvNV(GLuint index, const GLfloat *v);
    gl_check_error();
}
void glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y) {
    glad_glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y);
    gl_check_error();
}
void glVertexAttrib2svNV(GLuint index, const GLshort *v) {
    glad_glVertexAttrib2svNV(GLuint index, const GLshort *v);
    gl_check_error();
}
void glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
    glad_glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z);
    gl_check_error();
}
void glVertexAttrib3dvNV(GLuint index, const GLdouble *v) {
    glad_glVertexAttrib3dvNV(GLuint index, const GLdouble *v);
    gl_check_error();
}
void glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
    glad_glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glVertexAttrib3fvNV(GLuint index, const GLfloat *v) {
    glad_glVertexAttrib3fvNV(GLuint index, const GLfloat *v);
    gl_check_error();
}
void glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z) {
    glad_glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z);
    gl_check_error();
}
void glVertexAttrib3svNV(GLuint index, const GLshort *v) {
    glad_glVertexAttrib3svNV(GLuint index, const GLshort *v);
    gl_check_error();
}
void glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    gl_check_error();
}
void glVertexAttrib4dvNV(GLuint index, const GLdouble *v) {
    glad_glVertexAttrib4dvNV(GLuint index, const GLdouble *v);
    gl_check_error();
}
void glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    gl_check_error();
}
void glVertexAttrib4fvNV(GLuint index, const GLfloat *v) {
    glad_glVertexAttrib4fvNV(GLuint index, const GLfloat *v);
    gl_check_error();
}
void glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
    glad_glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
    gl_check_error();
}
void glVertexAttrib4svNV(GLuint index, const GLshort *v) {
    glad_glVertexAttrib4svNV(GLuint index, const GLshort *v);
    gl_check_error();
}
void glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
    glad_glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
    gl_check_error();
}
void glVertexAttrib4ubvNV(GLuint index, const GLubyte *v) {
    glad_glVertexAttrib4ubvNV(GLuint index, const GLubyte *v);
    gl_check_error();
}
void glVertexAttribs1dvNV(GLuint index, GLsizei count, const GLdouble *v) {
    glad_glVertexAttribs1dvNV(GLuint index, GLsizei count, const GLdouble *v);
    gl_check_error();
}
void glVertexAttribs1fvNV(GLuint index, GLsizei count, const GLfloat *v) {
    glad_glVertexAttribs1fvNV(GLuint index, GLsizei count, const GLfloat *v);
    gl_check_error();
}
void glVertexAttribs1svNV(GLuint index, GLsizei count, const GLshort *v) {
    glad_glVertexAttribs1svNV(GLuint index, GLsizei count, const GLshort *v);
    gl_check_error();
}
void glVertexAttribs2dvNV(GLuint index, GLsizei count, const GLdouble *v) {
    glad_glVertexAttribs2dvNV(GLuint index, GLsizei count, const GLdouble *v);
    gl_check_error();
}
void glVertexAttribs2fvNV(GLuint index, GLsizei count, const GLfloat *v) {
    glad_glVertexAttribs2fvNV(GLuint index, GLsizei count, const GLfloat *v);
    gl_check_error();
}
void glVertexAttribs2svNV(GLuint index, GLsizei count, const GLshort *v) {
    glad_glVertexAttribs2svNV(GLuint index, GLsizei count, const GLshort *v);
    gl_check_error();
}
void glVertexAttribs3dvNV(GLuint index, GLsizei count, const GLdouble *v) {
    glad_glVertexAttribs3dvNV(GLuint index, GLsizei count, const GLdouble *v);
    gl_check_error();
}
void glVertexAttribs3fvNV(GLuint index, GLsizei count, const GLfloat *v) {
    glad_glVertexAttribs3fvNV(GLuint index, GLsizei count, const GLfloat *v);
    gl_check_error();
}
void glVertexAttribs3svNV(GLuint index, GLsizei count, const GLshort *v) {
    glad_glVertexAttribs3svNV(GLuint index, GLsizei count, const GLshort *v);
    gl_check_error();
}
void glVertexAttribs4dvNV(GLuint index, GLsizei count, const GLdouble *v) {
    glad_glVertexAttribs4dvNV(GLuint index, GLsizei count, const GLdouble *v);
    gl_check_error();
}
void glVertexAttribs4fvNV(GLuint index, GLsizei count, const GLfloat *v) {
    glad_glVertexAttribs4fvNV(GLuint index, GLsizei count, const GLfloat *v);
    gl_check_error();
}
void glVertexAttribs4svNV(GLuint index, GLsizei count, const GLshort *v) {
    glad_glVertexAttribs4svNV(GLuint index, GLsizei count, const GLshort *v);
    gl_check_error();
}
void glVertexAttribs4ubvNV(GLuint index, GLsizei count, const GLubyte *v) {
    glad_glVertexAttribs4ubvNV(GLuint index, GLsizei count, const GLubyte *v);
    gl_check_error();
}
void glVertexAttribI1iEXT(GLuint index, GLint x) {
    glad_glVertexAttribI1iEXT(GLuint index, GLint x);
    gl_check_error();
}
void glVertexAttribI2iEXT(GLuint index, GLint x, GLint y) {
    glad_glVertexAttribI2iEXT(GLuint index, GLint x, GLint y);
    gl_check_error();
}
void glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z) {
    glad_glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z);
    gl_check_error();
}
void glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w) {
    glad_glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w);
    gl_check_error();
}
void glVertexAttribI1uiEXT(GLuint index, GLuint x) {
    glad_glVertexAttribI1uiEXT(GLuint index, GLuint x);
    gl_check_error();
}
void glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y) {
    glad_glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y);
    gl_check_error();
}
void glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z) {
    glad_glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z);
    gl_check_error();
}
void glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
    glad_glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
    gl_check_error();
}
void glVertexAttribI1ivEXT(GLuint index, const GLint *v) {
    glad_glVertexAttribI1ivEXT(GLuint index, const GLint *v);
    gl_check_error();
}
void glVertexAttribI2ivEXT(GLuint index, const GLint *v) {
    glad_glVertexAttribI2ivEXT(GLuint index, const GLint *v);
    gl_check_error();
}
void glVertexAttribI3ivEXT(GLuint index, const GLint *v) {
    glad_glVertexAttribI3ivEXT(GLuint index, const GLint *v);
    gl_check_error();
}
void glVertexAttribI4ivEXT(GLuint index, const GLint *v) {
    glad_glVertexAttribI4ivEXT(GLuint index, const GLint *v);
    gl_check_error();
}
void glVertexAttribI1uivEXT(GLuint index, const GLuint *v) {
    glad_glVertexAttribI1uivEXT(GLuint index, const GLuint *v);
    gl_check_error();
}
void glVertexAttribI2uivEXT(GLuint index, const GLuint *v) {
    glad_glVertexAttribI2uivEXT(GLuint index, const GLuint *v);
    gl_check_error();
}
void glVertexAttribI3uivEXT(GLuint index, const GLuint *v) {
    glad_glVertexAttribI3uivEXT(GLuint index, const GLuint *v);
    gl_check_error();
}
void glVertexAttribI4uivEXT(GLuint index, const GLuint *v) {
    glad_glVertexAttribI4uivEXT(GLuint index, const GLuint *v);
    gl_check_error();
}
void glVertexAttribI4bvEXT(GLuint index, const GLbyte *v) {
    glad_glVertexAttribI4bvEXT(GLuint index, const GLbyte *v);
    gl_check_error();
}
void glVertexAttribI4svEXT(GLuint index, const GLshort *v) {
    glad_glVertexAttribI4svEXT(GLuint index, const GLshort *v);
    gl_check_error();
}
void glVertexAttribI4ubvEXT(GLuint index, const GLubyte *v) {
    glad_glVertexAttribI4ubvEXT(GLuint index, const GLubyte *v);
    gl_check_error();
}
void glVertexAttribI4usvEXT(GLuint index, const GLushort *v) {
    glad_glVertexAttribI4usvEXT(GLuint index, const GLushort *v);
    gl_check_error();
}
void glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) {
    glad_glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
    gl_check_error();
}
void glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params) {
    glad_glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params) {
    glad_glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params);
    gl_check_error();
}
void glBeginVideoCaptureNV(GLuint video_capture_slot) {
    glad_glBeginVideoCaptureNV(GLuint video_capture_slot);
    gl_check_error();
}
void glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset) {
    glad_glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
    gl_check_error();
}
void glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture) {
    glad_glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
    gl_check_error();
}
void glEndVideoCaptureNV(GLuint video_capture_slot) {
    glad_glEndVideoCaptureNV(GLuint video_capture_slot);
    gl_check_error();
}
void glGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint *params) {
    glad_glGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params) {
    glad_glGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params) {
    glad_glGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params) {
    glad_glGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params);
    gl_check_error();
}
GLenum glVideoCaptureNV(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time) {
    auto val = glad_glVideoCaptureNV(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time);
    gl_check_error();
    return val;
}
void glVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params) {
    glad_glVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params);
    gl_check_error();
}
void glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params) {
    glad_glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params) {
    glad_glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params);
    gl_check_error();
}
void glViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew) {
    glad_glViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew);
    gl_check_error();
}
void glMultiTexCoord1bOES(GLenum texture, GLbyte s) {
    glad_glMultiTexCoord1bOES(GLenum texture, GLbyte s);
    gl_check_error();
}
void glMultiTexCoord1bvOES(GLenum texture, const GLbyte *coords) {
    glad_glMultiTexCoord1bvOES(GLenum texture, const GLbyte *coords);
    gl_check_error();
}
void glMultiTexCoord2bOES(GLenum texture, GLbyte s, GLbyte t) {
    glad_glMultiTexCoord2bOES(GLenum texture, GLbyte s, GLbyte t);
    gl_check_error();
}
void glMultiTexCoord2bvOES(GLenum texture, const GLbyte *coords) {
    glad_glMultiTexCoord2bvOES(GLenum texture, const GLbyte *coords);
    gl_check_error();
}
void glMultiTexCoord3bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r) {
    glad_glMultiTexCoord3bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r);
    gl_check_error();
}
void glMultiTexCoord3bvOES(GLenum texture, const GLbyte *coords) {
    glad_glMultiTexCoord3bvOES(GLenum texture, const GLbyte *coords);
    gl_check_error();
}
void glMultiTexCoord4bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q) {
    glad_glMultiTexCoord4bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q);
    gl_check_error();
}
void glMultiTexCoord4bvOES(GLenum texture, const GLbyte *coords) {
    glad_glMultiTexCoord4bvOES(GLenum texture, const GLbyte *coords);
    gl_check_error();
}
void glTexCoord1bOES(GLbyte s) {
    glad_glTexCoord1bOES(GLbyte s);
    gl_check_error();
}
void glTexCoord1bvOES(const GLbyte *coords) {
    glad_glTexCoord1bvOES(const GLbyte *coords);
    gl_check_error();
}
void glTexCoord2bOES(GLbyte s, GLbyte t) {
    glad_glTexCoord2bOES(GLbyte s, GLbyte t);
    gl_check_error();
}
void glTexCoord2bvOES(const GLbyte *coords) {
    glad_glTexCoord2bvOES(const GLbyte *coords);
    gl_check_error();
}
void glTexCoord3bOES(GLbyte s, GLbyte t, GLbyte r) {
    glad_glTexCoord3bOES(GLbyte s, GLbyte t, GLbyte r);
    gl_check_error();
}
void glTexCoord3bvOES(const GLbyte *coords) {
    glad_glTexCoord3bvOES(const GLbyte *coords);
    gl_check_error();
}
void glTexCoord4bOES(GLbyte s, GLbyte t, GLbyte r, GLbyte q) {
    glad_glTexCoord4bOES(GLbyte s, GLbyte t, GLbyte r, GLbyte q);
    gl_check_error();
}
void glTexCoord4bvOES(const GLbyte *coords) {
    glad_glTexCoord4bvOES(const GLbyte *coords);
    gl_check_error();
}
void glVertex2bOES(GLbyte x, GLbyte y) {
    glad_glVertex2bOES(GLbyte x, GLbyte y);
    gl_check_error();
}
void glVertex2bvOES(const GLbyte *coords) {
    glad_glVertex2bvOES(const GLbyte *coords);
    gl_check_error();
}
void glVertex3bOES(GLbyte x, GLbyte y, GLbyte z) {
    glad_glVertex3bOES(GLbyte x, GLbyte y, GLbyte z);
    gl_check_error();
}
void glVertex3bvOES(const GLbyte *coords) {
    glad_glVertex3bvOES(const GLbyte *coords);
    gl_check_error();
}
void glVertex4bOES(GLbyte x, GLbyte y, GLbyte z, GLbyte w) {
    glad_glVertex4bOES(GLbyte x, GLbyte y, GLbyte z, GLbyte w);
    gl_check_error();
}
void glVertex4bvOES(const GLbyte *coords) {
    glad_glVertex4bvOES(const GLbyte *coords);
    gl_check_error();
}
void glAlphaFuncxOES(GLenum func, GLfixed ref) {
    glad_glAlphaFuncxOES(GLenum func, GLfixed ref);
    gl_check_error();
}
void glClearColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {
    glad_glClearColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
    gl_check_error();
}
void glClearDepthxOES(GLfixed depth) {
    glad_glClearDepthxOES(GLfixed depth);
    gl_check_error();
}
void glClipPlanexOES(GLenum plane, const GLfixed *equation) {
    glad_glClipPlanexOES(GLenum plane, const GLfixed *equation);
    gl_check_error();
}
void glColor4xOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {
    glad_glColor4xOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
    gl_check_error();
}
void glDepthRangexOES(GLfixed n, GLfixed f) {
    glad_glDepthRangexOES(GLfixed n, GLfixed f);
    gl_check_error();
}
void glFogxOES(GLenum pname, GLfixed param) {
    glad_glFogxOES(GLenum pname, GLfixed param);
    gl_check_error();
}
void glFogxvOES(GLenum pname, const GLfixed *param) {
    glad_glFogxvOES(GLenum pname, const GLfixed *param);
    gl_check_error();
}
void glFrustumxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) {
    glad_glFrustumxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
    gl_check_error();
}
void glGetClipPlanexOES(GLenum plane, GLfixed *equation) {
    glad_glGetClipPlanexOES(GLenum plane, GLfixed *equation);
    gl_check_error();
}
void glGetFixedvOES(GLenum pname, GLfixed *params) {
    glad_glGetFixedvOES(GLenum pname, GLfixed *params);
    gl_check_error();
}
void glGetTexEnvxvOES(GLenum target, GLenum pname, GLfixed *params) {
    glad_glGetTexEnvxvOES(GLenum target, GLenum pname, GLfixed *params);
    gl_check_error();
}
void glGetTexParameterxvOES(GLenum target, GLenum pname, GLfixed *params) {
    glad_glGetTexParameterxvOES(GLenum target, GLenum pname, GLfixed *params);
    gl_check_error();
}
void glLightModelxOES(GLenum pname, GLfixed param) {
    glad_glLightModelxOES(GLenum pname, GLfixed param);
    gl_check_error();
}
void glLightModelxvOES(GLenum pname, const GLfixed *param) {
    glad_glLightModelxvOES(GLenum pname, const GLfixed *param);
    gl_check_error();
}
void glLightxOES(GLenum light, GLenum pname, GLfixed param) {
    glad_glLightxOES(GLenum light, GLenum pname, GLfixed param);
    gl_check_error();
}
void glLightxvOES(GLenum light, GLenum pname, const GLfixed *params) {
    glad_glLightxvOES(GLenum light, GLenum pname, const GLfixed *params);
    gl_check_error();
}
void glLineWidthxOES(GLfixed width) {
    glad_glLineWidthxOES(GLfixed width);
    gl_check_error();
}
void glLoadMatrixxOES(const GLfixed *m) {
    glad_glLoadMatrixxOES(const GLfixed *m);
    gl_check_error();
}
void glMaterialxOES(GLenum face, GLenum pname, GLfixed param) {
    glad_glMaterialxOES(GLenum face, GLenum pname, GLfixed param);
    gl_check_error();
}
void glMaterialxvOES(GLenum face, GLenum pname, const GLfixed *param) {
    glad_glMaterialxvOES(GLenum face, GLenum pname, const GLfixed *param);
    gl_check_error();
}
void glMultMatrixxOES(const GLfixed *m) {
    glad_glMultMatrixxOES(const GLfixed *m);
    gl_check_error();
}
void glMultiTexCoord4xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) {
    glad_glMultiTexCoord4xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
    gl_check_error();
}
void glNormal3xOES(GLfixed nx, GLfixed ny, GLfixed nz) {
    glad_glNormal3xOES(GLfixed nx, GLfixed ny, GLfixed nz);
    gl_check_error();
}
void glOrthoxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) {
    glad_glOrthoxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
    gl_check_error();
}
void glPointParameterxvOES(GLenum pname, const GLfixed *params) {
    glad_glPointParameterxvOES(GLenum pname, const GLfixed *params);
    gl_check_error();
}
void glPointSizexOES(GLfixed size) {
    glad_glPointSizexOES(GLfixed size);
    gl_check_error();
}
void glPolygonOffsetxOES(GLfixed factor, GLfixed units) {
    glad_glPolygonOffsetxOES(GLfixed factor, GLfixed units);
    gl_check_error();
}
void glRotatexOES(GLfixed angle, GLfixed x, GLfixed y, GLfixed z) {
    glad_glRotatexOES(GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
    gl_check_error();
}
void glScalexOES(GLfixed x, GLfixed y, GLfixed z) {
    glad_glScalexOES(GLfixed x, GLfixed y, GLfixed z);
    gl_check_error();
}
void glTexEnvxOES(GLenum target, GLenum pname, GLfixed param) {
    glad_glTexEnvxOES(GLenum target, GLenum pname, GLfixed param);
    gl_check_error();
}
void glTexEnvxvOES(GLenum target, GLenum pname, const GLfixed *params) {
    glad_glTexEnvxvOES(GLenum target, GLenum pname, const GLfixed *params);
    gl_check_error();
}
void glTexParameterxOES(GLenum target, GLenum pname, GLfixed param) {
    glad_glTexParameterxOES(GLenum target, GLenum pname, GLfixed param);
    gl_check_error();
}
void glTexParameterxvOES(GLenum target, GLenum pname, const GLfixed *params) {
    glad_glTexParameterxvOES(GLenum target, GLenum pname, const GLfixed *params);
    gl_check_error();
}
void glTranslatexOES(GLfixed x, GLfixed y, GLfixed z) {
    glad_glTranslatexOES(GLfixed x, GLfixed y, GLfixed z);
    gl_check_error();
}
void glGetLightxvOES(GLenum light, GLenum pname, GLfixed *params) {
    glad_glGetLightxvOES(GLenum light, GLenum pname, GLfixed *params);
    gl_check_error();
}
void glGetMaterialxvOES(GLenum face, GLenum pname, GLfixed *params) {
    glad_glGetMaterialxvOES(GLenum face, GLenum pname, GLfixed *params);
    gl_check_error();
}
void glPointParameterxOES(GLenum pname, GLfixed param) {
    glad_glPointParameterxOES(GLenum pname, GLfixed param);
    gl_check_error();
}
void glSampleCoveragexOES(GLclampx value, GLboolean invert) {
    glad_glSampleCoveragexOES(GLclampx value, GLboolean invert);
    gl_check_error();
}
void glAccumxOES(GLenum op, GLfixed value) {
    glad_glAccumxOES(GLenum op, GLfixed value);
    gl_check_error();
}
void glBitmapxOES(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap) {
    glad_glBitmapxOES(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap);
    gl_check_error();
}
void glBlendColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {
    glad_glBlendColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
    gl_check_error();
}
void glClearAccumxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {
    glad_glClearAccumxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
    gl_check_error();
}
void glColor3xOES(GLfixed red, GLfixed green, GLfixed blue) {
    glad_glColor3xOES(GLfixed red, GLfixed green, GLfixed blue);
    gl_check_error();
}
void glColor3xvOES(const GLfixed *components) {
    glad_glColor3xvOES(const GLfixed *components);
    gl_check_error();
}
void glColor4xvOES(const GLfixed *components) {
    glad_glColor4xvOES(const GLfixed *components);
    gl_check_error();
}
void glConvolutionParameterxOES(GLenum target, GLenum pname, GLfixed param) {
    glad_glConvolutionParameterxOES(GLenum target, GLenum pname, GLfixed param);
    gl_check_error();
}
void glConvolutionParameterxvOES(GLenum target, GLenum pname, const GLfixed *params) {
    glad_glConvolutionParameterxvOES(GLenum target, GLenum pname, const GLfixed *params);
    gl_check_error();
}
void glEvalCoord1xOES(GLfixed u) {
    glad_glEvalCoord1xOES(GLfixed u);
    gl_check_error();
}
void glEvalCoord1xvOES(const GLfixed *coords) {
    glad_glEvalCoord1xvOES(const GLfixed *coords);
    gl_check_error();
}
void glEvalCoord2xOES(GLfixed u, GLfixed v) {
    glad_glEvalCoord2xOES(GLfixed u, GLfixed v);
    gl_check_error();
}
void glEvalCoord2xvOES(const GLfixed *coords) {
    glad_glEvalCoord2xvOES(const GLfixed *coords);
    gl_check_error();
}
void glFeedbackBufferxOES(GLsizei n, GLenum type, const GLfixed *buffer) {
    glad_glFeedbackBufferxOES(GLsizei n, GLenum type, const GLfixed *buffer);
    gl_check_error();
}
void glGetConvolutionParameterxvOES(GLenum target, GLenum pname, GLfixed *params) {
    glad_glGetConvolutionParameterxvOES(GLenum target, GLenum pname, GLfixed *params);
    gl_check_error();
}
void glGetHistogramParameterxvOES(GLenum target, GLenum pname, GLfixed *params) {
    glad_glGetHistogramParameterxvOES(GLenum target, GLenum pname, GLfixed *params);
    gl_check_error();
}
void glGetLightxOES(GLenum light, GLenum pname, GLfixed *params) {
    glad_glGetLightxOES(GLenum light, GLenum pname, GLfixed *params);
    gl_check_error();
}
void glGetMapxvOES(GLenum target, GLenum query, GLfixed *v) {
    glad_glGetMapxvOES(GLenum target, GLenum query, GLfixed *v);
    gl_check_error();
}
void glGetMaterialxOES(GLenum face, GLenum pname, GLfixed param) {
    glad_glGetMaterialxOES(GLenum face, GLenum pname, GLfixed param);
    gl_check_error();
}
void glGetPixelMapxv(GLenum map, GLint size, GLfixed *values) {
    glad_glGetPixelMapxv(GLenum map, GLint size, GLfixed *values);
    gl_check_error();
}
void glGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed *params) {
    glad_glGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed *params);
    gl_check_error();
}
void glGetTexLevelParameterxvOES(GLenum target, GLint level, GLenum pname, GLfixed *params) {
    glad_glGetTexLevelParameterxvOES(GLenum target, GLint level, GLenum pname, GLfixed *params);
    gl_check_error();
}
void glIndexxOES(GLfixed component) {
    glad_glIndexxOES(GLfixed component);
    gl_check_error();
}
void glIndexxvOES(const GLfixed *component) {
    glad_glIndexxvOES(const GLfixed *component);
    gl_check_error();
}
void glLoadTransposeMatrixxOES(const GLfixed *m) {
    glad_glLoadTransposeMatrixxOES(const GLfixed *m);
    gl_check_error();
}
void glMap1xOES(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points) {
    glad_glMap1xOES(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points);
    gl_check_error();
}
void glMap2xOES(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points) {
    glad_glMap2xOES(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points);
    gl_check_error();
}
void glMapGrid1xOES(GLint n, GLfixed u1, GLfixed u2) {
    glad_glMapGrid1xOES(GLint n, GLfixed u1, GLfixed u2);
    gl_check_error();
}
void glMapGrid2xOES(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2) {
    glad_glMapGrid2xOES(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2);
    gl_check_error();
}
void glMultTransposeMatrixxOES(const GLfixed *m) {
    glad_glMultTransposeMatrixxOES(const GLfixed *m);
    gl_check_error();
}
void glMultiTexCoord1xOES(GLenum texture, GLfixed s) {
    glad_glMultiTexCoord1xOES(GLenum texture, GLfixed s);
    gl_check_error();
}
void glMultiTexCoord1xvOES(GLenum texture, const GLfixed *coords) {
    glad_glMultiTexCoord1xvOES(GLenum texture, const GLfixed *coords);
    gl_check_error();
}
void glMultiTexCoord2xOES(GLenum texture, GLfixed s, GLfixed t) {
    glad_glMultiTexCoord2xOES(GLenum texture, GLfixed s, GLfixed t);
    gl_check_error();
}
void glMultiTexCoord2xvOES(GLenum texture, const GLfixed *coords) {
    glad_glMultiTexCoord2xvOES(GLenum texture, const GLfixed *coords);
    gl_check_error();
}
void glMultiTexCoord3xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r) {
    glad_glMultiTexCoord3xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r);
    gl_check_error();
}
void glMultiTexCoord3xvOES(GLenum texture, const GLfixed *coords) {
    glad_glMultiTexCoord3xvOES(GLenum texture, const GLfixed *coords);
    gl_check_error();
}
void glMultiTexCoord4xvOES(GLenum texture, const GLfixed *coords) {
    glad_glMultiTexCoord4xvOES(GLenum texture, const GLfixed *coords);
    gl_check_error();
}
void glNormal3xvOES(const GLfixed *coords) {
    glad_glNormal3xvOES(const GLfixed *coords);
    gl_check_error();
}
void glPassThroughxOES(GLfixed token) {
    glad_glPassThroughxOES(GLfixed token);
    gl_check_error();
}
void glPixelMapx(GLenum map, GLint size, const GLfixed *values) {
    glad_glPixelMapx(GLenum map, GLint size, const GLfixed *values);
    gl_check_error();
}
void glPixelStorex(GLenum pname, GLfixed param) {
    glad_glPixelStorex(GLenum pname, GLfixed param);
    gl_check_error();
}
void glPixelTransferxOES(GLenum pname, GLfixed param) {
    glad_glPixelTransferxOES(GLenum pname, GLfixed param);
    gl_check_error();
}
void glPixelZoomxOES(GLfixed xfactor, GLfixed yfactor) {
    glad_glPixelZoomxOES(GLfixed xfactor, GLfixed yfactor);
    gl_check_error();
}
void glPrioritizeTexturesxOES(GLsizei n, const GLuint *textures, const GLfixed *priorities) {
    glad_glPrioritizeTexturesxOES(GLsizei n, const GLuint *textures, const GLfixed *priorities);
    gl_check_error();
}
void glRasterPos2xOES(GLfixed x, GLfixed y) {
    glad_glRasterPos2xOES(GLfixed x, GLfixed y);
    gl_check_error();
}
void glRasterPos2xvOES(const GLfixed *coords) {
    glad_glRasterPos2xvOES(const GLfixed *coords);
    gl_check_error();
}
void glRasterPos3xOES(GLfixed x, GLfixed y, GLfixed z) {
    glad_glRasterPos3xOES(GLfixed x, GLfixed y, GLfixed z);
    gl_check_error();
}
void glRasterPos3xvOES(const GLfixed *coords) {
    glad_glRasterPos3xvOES(const GLfixed *coords);
    gl_check_error();
}
void glRasterPos4xOES(GLfixed x, GLfixed y, GLfixed z, GLfixed w) {
    glad_glRasterPos4xOES(GLfixed x, GLfixed y, GLfixed z, GLfixed w);
    gl_check_error();
}
void glRasterPos4xvOES(const GLfixed *coords) {
    glad_glRasterPos4xvOES(const GLfixed *coords);
    gl_check_error();
}
void glRectxOES(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2) {
    glad_glRectxOES(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2);
    gl_check_error();
}
void glRectxvOES(const GLfixed *v1, const GLfixed *v2) {
    glad_glRectxvOES(const GLfixed *v1, const GLfixed *v2);
    gl_check_error();
}
void glTexCoord1xOES(GLfixed s) {
    glad_glTexCoord1xOES(GLfixed s);
    gl_check_error();
}
void glTexCoord1xvOES(const GLfixed *coords) {
    glad_glTexCoord1xvOES(const GLfixed *coords);
    gl_check_error();
}
void glTexCoord2xOES(GLfixed s, GLfixed t) {
    glad_glTexCoord2xOES(GLfixed s, GLfixed t);
    gl_check_error();
}
void glTexCoord2xvOES(const GLfixed *coords) {
    glad_glTexCoord2xvOES(const GLfixed *coords);
    gl_check_error();
}
void glTexCoord3xOES(GLfixed s, GLfixed t, GLfixed r) {
    glad_glTexCoord3xOES(GLfixed s, GLfixed t, GLfixed r);
    gl_check_error();
}
void glTexCoord3xvOES(const GLfixed *coords) {
    glad_glTexCoord3xvOES(const GLfixed *coords);
    gl_check_error();
}
void glTexCoord4xOES(GLfixed s, GLfixed t, GLfixed r, GLfixed q) {
    glad_glTexCoord4xOES(GLfixed s, GLfixed t, GLfixed r, GLfixed q);
    gl_check_error();
}
void glTexCoord4xvOES(const GLfixed *coords) {
    glad_glTexCoord4xvOES(const GLfixed *coords);
    gl_check_error();
}
void glTexGenxOES(GLenum coord, GLenum pname, GLfixed param) {
    glad_glTexGenxOES(GLenum coord, GLenum pname, GLfixed param);
    gl_check_error();
}
void glTexGenxvOES(GLenum coord, GLenum pname, const GLfixed *params) {
    glad_glTexGenxvOES(GLenum coord, GLenum pname, const GLfixed *params);
    gl_check_error();
}
void glVertex2xOES(GLfixed x) {
    glad_glVertex2xOES(GLfixed x);
    gl_check_error();
}
void glVertex2xvOES(const GLfixed *coords) {
    glad_glVertex2xvOES(const GLfixed *coords);
    gl_check_error();
}
void glVertex3xOES(GLfixed x, GLfixed y) {
    glad_glVertex3xOES(GLfixed x, GLfixed y);
    gl_check_error();
}
void glVertex3xvOES(const GLfixed *coords) {
    glad_glVertex3xvOES(const GLfixed *coords);
    gl_check_error();
}
void glVertex4xOES(GLfixed x, GLfixed y, GLfixed z) {
    glad_glVertex4xOES(GLfixed x, GLfixed y, GLfixed z);
    gl_check_error();
}
void glVertex4xvOES(const GLfixed *coords) {
    glad_glVertex4xvOES(const GLfixed *coords);
    gl_check_error();
}
GLbitfield glQueryMatrixxOES(GLfixed *mantissa, GLint *exponent) {
    auto val = glad_glQueryMatrixxOES(GLfixed *mantissa, GLint *exponent);
    gl_check_error();
    return val;
}
void glClearDepthfOES(GLclampf depth) {
    glad_glClearDepthfOES(GLclampf depth);
    gl_check_error();
}
void glClipPlanefOES(GLenum plane, const GLfloat *equation) {
    glad_glClipPlanefOES(GLenum plane, const GLfloat *equation);
    gl_check_error();
}
void glDepthRangefOES(GLclampf n, GLclampf f) {
    glad_glDepthRangefOES(GLclampf n, GLclampf f);
    gl_check_error();
}
void glFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) {
    glad_glFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
    gl_check_error();
}
void glGetClipPlanefOES(GLenum plane, GLfloat *equation) {
    glad_glGetClipPlanefOES(GLenum plane, GLfloat *equation);
    gl_check_error();
}
void glOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) {
    glad_glOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
    gl_check_error();
}
void glFramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews) {
    glad_glFramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews);
    gl_check_error();
}
void glHintPGI(GLenum target, GLint mode) {
    glad_glHintPGI(GLenum target, GLint mode);
    gl_check_error();
}
void glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points) {
    glad_glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points);
    gl_check_error();
}
void glGetDetailTexFuncSGIS(GLenum target, GLfloat *points) {
    glad_glGetDetailTexFuncSGIS(GLenum target, GLfloat *points);
    gl_check_error();
}
void glFogFuncSGIS(GLsizei n, const GLfloat *points) {
    glad_glFogFuncSGIS(GLsizei n, const GLfloat *points);
    gl_check_error();
}
void glGetFogFuncSGIS(GLfloat *points) {
    glad_glGetFogFuncSGIS(GLfloat *points);
    gl_check_error();
}
void glSampleMaskSGIS(GLclampf value, GLboolean invert) {
    glad_glSampleMaskSGIS(GLclampf value, GLboolean invert);
    gl_check_error();
}
void glSamplePatternSGIS(GLenum pattern) {
    glad_glSamplePatternSGIS(GLenum pattern);
    gl_check_error();
}
void glPixelTexGenParameteriSGIS(GLenum pname, GLint param) {
    glad_glPixelTexGenParameteriSGIS(GLenum pname, GLint param);
    gl_check_error();
}
void glPixelTexGenParameterivSGIS(GLenum pname, const GLint *params) {
    glad_glPixelTexGenParameterivSGIS(GLenum pname, const GLint *params);
    gl_check_error();
}
void glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param) {
    glad_glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param);
    gl_check_error();
}
void glPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat *params) {
    glad_glPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glGetPixelTexGenParameterivSGIS(GLenum pname, GLint *params) {
    glad_glGetPixelTexGenParameterivSGIS(GLenum pname, GLint *params);
    gl_check_error();
}
void glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat *params) {
    glad_glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat *params);
    gl_check_error();
}
void glPointParameterfSGIS(GLenum pname, GLfloat param) {
    glad_glPointParameterfSGIS(GLenum pname, GLfloat param);
    gl_check_error();
}
void glPointParameterfvSGIS(GLenum pname, const GLfloat *params) {
    glad_glPointParameterfvSGIS(GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points) {
    glad_glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points);
    gl_check_error();
}
void glGetSharpenTexFuncSGIS(GLenum target, GLfloat *points) {
    glad_glGetSharpenTexFuncSGIS(GLenum target, GLfloat *points);
    gl_check_error();
}
void glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels) {
    glad_glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels) {
    glad_glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels);
    gl_check_error();
}
void glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
    glad_glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
    gl_check_error();
}
void glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat *weights) {
    glad_glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat *weights);
    gl_check_error();
}
void glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights) {
    glad_glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);
    gl_check_error();
}
void glAsyncMarkerSGIX(GLuint marker) {
    glad_glAsyncMarkerSGIX(GLuint marker);
    gl_check_error();
}
GLint glFinishAsyncSGIX(GLuint *markerp) {
    auto val = glad_glFinishAsyncSGIX(GLuint *markerp);
    gl_check_error();
    return val;
}
GLint glPollAsyncSGIX(GLuint *markerp) {
    auto val = glad_glPollAsyncSGIX(GLuint *markerp);
    gl_check_error();
    return val;
}
GLuint glGenAsyncMarkersSGIX(GLsizei range) {
    auto val = glad_glGenAsyncMarkersSGIX(GLsizei range);
    gl_check_error();
    return val;
}
void glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range) {
    glad_glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range);
    gl_check_error();
}
GLboolean glIsAsyncMarkerSGIX(GLuint marker) {
    auto val = glad_glIsAsyncMarkerSGIX(GLuint marker);
    gl_check_error();
    return val;
}
void glFlushRasterSGIX(void) {
    glad_glFlushRasterSGIX(void);
    gl_check_error();
}
void glFragmentColorMaterialSGIX(GLenum face, GLenum mode) {
    glad_glFragmentColorMaterialSGIX(GLenum face, GLenum mode);
    gl_check_error();
}
void glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param) {
    glad_glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param);
    gl_check_error();
}
void glFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat *params) {
    glad_glFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param) {
    glad_glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param);
    gl_check_error();
}
void glFragmentLightivSGIX(GLenum light, GLenum pname, const GLint *params) {
    glad_glFragmentLightivSGIX(GLenum light, GLenum pname, const GLint *params);
    gl_check_error();
}
void glFragmentLightModelfSGIX(GLenum pname, GLfloat param) {
    glad_glFragmentLightModelfSGIX(GLenum pname, GLfloat param);
    gl_check_error();
}
void glFragmentLightModelfvSGIX(GLenum pname, const GLfloat *params) {
    glad_glFragmentLightModelfvSGIX(GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glFragmentLightModeliSGIX(GLenum pname, GLint param) {
    glad_glFragmentLightModeliSGIX(GLenum pname, GLint param);
    gl_check_error();
}
void glFragmentLightModelivSGIX(GLenum pname, const GLint *params) {
    glad_glFragmentLightModelivSGIX(GLenum pname, const GLint *params);
    gl_check_error();
}
void glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param) {
    glad_glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param);
    gl_check_error();
}
void glFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat *params) {
    glad_glFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param) {
    glad_glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param);
    gl_check_error();
}
void glFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint *params) {
    glad_glFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint *params);
    gl_check_error();
}
void glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat *params) {
    glad_glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint *params) {
    glad_glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint *params);
    gl_check_error();
}
void glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat *params) {
    glad_glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint *params) {
    glad_glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint *params);
    gl_check_error();
}
void glLightEnviSGIX(GLenum pname, GLint param) {
    glad_glLightEnviSGIX(GLenum pname, GLint param);
    gl_check_error();
}
void glFrameZoomSGIX(GLint factor) {
    glad_glFrameZoomSGIX(GLint factor);
    gl_check_error();
}
void glIglooInterfaceSGIX(GLenum pname, const void *params) {
    glad_glIglooInterfaceSGIX(GLenum pname, const void *params);
    gl_check_error();
}
GLint glGetInstrumentsSGIX(void) {
    auto val = glad_glGetInstrumentsSGIX(void);
    gl_check_error();
    return val;
}
void glInstrumentsBufferSGIX(GLsizei size, GLint *buffer) {
    glad_glInstrumentsBufferSGIX(GLsizei size, GLint *buffer);
    gl_check_error();
}
GLint glPollInstrumentsSGIX(GLint *marker_p) {
    auto val = glad_glPollInstrumentsSGIX(GLint *marker_p);
    gl_check_error();
    return val;
}
void glReadInstrumentsSGIX(GLint marker) {
    glad_glReadInstrumentsSGIX(GLint marker);
    gl_check_error();
}
void glStartInstrumentsSGIX(void) {
    glad_glStartInstrumentsSGIX(void);
    gl_check_error();
}
void glStopInstrumentsSGIX(GLint marker) {
    glad_glStopInstrumentsSGIX(GLint marker);
    gl_check_error();
}
void glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat *params) {
    glad_glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetListParameterivSGIX(GLuint list, GLenum pname, GLint *params) {
    glad_glGetListParameterivSGIX(GLuint list, GLenum pname, GLint *params);
    gl_check_error();
}
void glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param) {
    glad_glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param);
    gl_check_error();
}
void glListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat *params) {
    glad_glListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glListParameteriSGIX(GLuint list, GLenum pname, GLint param) {
    glad_glListParameteriSGIX(GLuint list, GLenum pname, GLint param);
    gl_check_error();
}
void glListParameterivSGIX(GLuint list, GLenum pname, const GLint *params) {
    glad_glListParameterivSGIX(GLuint list, GLenum pname, const GLint *params);
    gl_check_error();
}
void glPixelTexGenSGIX(GLenum mode) {
    glad_glPixelTexGenSGIX(GLenum mode);
    gl_check_error();
}
void glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points) {
    glad_glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points);
    gl_check_error();
}
void glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points) {
    glad_glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points);
    gl_check_error();
}
void glDeformSGIX(GLbitfield mask) {
    glad_glDeformSGIX(GLbitfield mask);
    gl_check_error();
}
void glLoadIdentityDeformationMapSGIX(GLbitfield mask) {
    glad_glLoadIdentityDeformationMapSGIX(GLbitfield mask);
    gl_check_error();
}
void glReferencePlaneSGIX(const GLdouble *equation) {
    glad_glReferencePlaneSGIX(const GLdouble *equation);
    gl_check_error();
}
void glSpriteParameterfSGIX(GLenum pname, GLfloat param) {
    glad_glSpriteParameterfSGIX(GLenum pname, GLfloat param);
    gl_check_error();
}
void glSpriteParameterfvSGIX(GLenum pname, const GLfloat *params) {
    glad_glSpriteParameterfvSGIX(GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glSpriteParameteriSGIX(GLenum pname, GLint param) {
    glad_glSpriteParameteriSGIX(GLenum pname, GLint param);
    gl_check_error();
}
void glSpriteParameterivSGIX(GLenum pname, const GLint *params) {
    glad_glSpriteParameterivSGIX(GLenum pname, const GLint *params);
    gl_check_error();
}
void glTagSampleBufferSGIX(void) {
    glad_glTagSampleBufferSGIX(void);
    gl_check_error();
}
void glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table) {
    glad_glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table);
    gl_check_error();
}
void glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat *params) {
    glad_glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat *params);
    gl_check_error();
}
void glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint *params) {
    glad_glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint *params);
    gl_check_error();
}
void glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
    glad_glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
    gl_check_error();
}
void glGetColorTableSGI(GLenum target, GLenum format, GLenum type, void *table) {
    glad_glGetColorTableSGI(GLenum target, GLenum format, GLenum type, void *table);
    gl_check_error();
}
void glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat *params) {
    glad_glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat *params);
    gl_check_error();
}
void glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint *params) {
    glad_glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint *params);
    gl_check_error();
}
void glFinishTextureSUNX(void) {
    glad_glFinishTextureSUNX(void);
    gl_check_error();
}
void glGlobalAlphaFactorbSUN(GLbyte factor) {
    glad_glGlobalAlphaFactorbSUN(GLbyte factor);
    gl_check_error();
}
void glGlobalAlphaFactorsSUN(GLshort factor) {
    glad_glGlobalAlphaFactorsSUN(GLshort factor);
    gl_check_error();
}
void glGlobalAlphaFactoriSUN(GLint factor) {
    glad_glGlobalAlphaFactoriSUN(GLint factor);
    gl_check_error();
}
void glGlobalAlphaFactorfSUN(GLfloat factor) {
    glad_glGlobalAlphaFactorfSUN(GLfloat factor);
    gl_check_error();
}
void glGlobalAlphaFactordSUN(GLdouble factor) {
    glad_glGlobalAlphaFactordSUN(GLdouble factor);
    gl_check_error();
}
void glGlobalAlphaFactorubSUN(GLubyte factor) {
    glad_glGlobalAlphaFactorubSUN(GLubyte factor);
    gl_check_error();
}
void glGlobalAlphaFactorusSUN(GLushort factor) {
    glad_glGlobalAlphaFactorusSUN(GLushort factor);
    gl_check_error();
}
void glGlobalAlphaFactoruiSUN(GLuint factor) {
    glad_glGlobalAlphaFactoruiSUN(GLuint factor);
    gl_check_error();
}
void glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width) {
    glad_glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width);
    gl_check_error();
}
void glReplacementCodeuiSUN(GLuint code) {
    glad_glReplacementCodeuiSUN(GLuint code);
    gl_check_error();
}
void glReplacementCodeusSUN(GLushort code) {
    glad_glReplacementCodeusSUN(GLushort code);
    gl_check_error();
}
void glReplacementCodeubSUN(GLubyte code) {
    glad_glReplacementCodeubSUN(GLubyte code);
    gl_check_error();
}
void glReplacementCodeuivSUN(const GLuint *code) {
    glad_glReplacementCodeuivSUN(const GLuint *code);
    gl_check_error();
}
void glReplacementCodeusvSUN(const GLushort *code) {
    glad_glReplacementCodeusvSUN(const GLushort *code);
    gl_check_error();
}
void glReplacementCodeubvSUN(const GLubyte *code) {
    glad_glReplacementCodeubvSUN(const GLubyte *code);
    gl_check_error();
}
void glReplacementCodePointerSUN(GLenum type, GLsizei stride, const void **pointer) {
    glad_glReplacementCodePointerSUN(GLenum type, GLsizei stride, const void **pointer);
    gl_check_error();
}
void glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y) {
    glad_glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
    gl_check_error();
}
void glColor4ubVertex2fvSUN(const GLubyte *c, const GLfloat *v) {
    glad_glColor4ubVertex2fvSUN(const GLubyte *c, const GLfloat *v);
    gl_check_error();
}
void glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {
    glad_glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glColor4ubVertex3fvSUN(const GLubyte *c, const GLfloat *v) {
    glad_glColor4ubVertex3fvSUN(const GLubyte *c, const GLfloat *v);
    gl_check_error();
}
void glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {
    glad_glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glColor3fVertex3fvSUN(const GLfloat *c, const GLfloat *v) {
    glad_glColor3fVertex3fvSUN(const GLfloat *c, const GLfloat *v);
    gl_check_error();
}
void glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
    glad_glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glNormal3fVertex3fvSUN(const GLfloat *n, const GLfloat *v) {
    glad_glNormal3fVertex3fvSUN(const GLfloat *n, const GLfloat *v);
    gl_check_error();
}
void glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
    glad_glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glColor4fNormal3fVertex3fvSUN(const GLfloat *c, const GLfloat *n, const GLfloat *v) {
    glad_glColor4fNormal3fVertex3fvSUN(const GLfloat *c, const GLfloat *n, const GLfloat *v);
    gl_check_error();
}
void glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) {
    glad_glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glTexCoord2fVertex3fvSUN(const GLfloat *tc, const GLfloat *v) {
    glad_glTexCoord2fVertex3fvSUN(const GLfloat *tc, const GLfloat *v);
    gl_check_error();
}
void glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    gl_check_error();
}
void glTexCoord4fVertex4fvSUN(const GLfloat *tc, const GLfloat *v) {
    glad_glTexCoord4fVertex4fvSUN(const GLfloat *tc, const GLfloat *v);
    gl_check_error();
}
void glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {
    glad_glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glTexCoord2fColor4ubVertex3fvSUN(const GLfloat *tc, const GLubyte *c, const GLfloat *v) {
    glad_glTexCoord2fColor4ubVertex3fvSUN(const GLfloat *tc, const GLubyte *c, const GLfloat *v);
    gl_check_error();
}
void glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {
    glad_glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glTexCoord2fColor3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *v) {
    glad_glTexCoord2fColor3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *v);
    gl_check_error();
}
void glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
    glad_glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glTexCoord2fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *n, const GLfloat *v) {
    glad_glTexCoord2fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *n, const GLfloat *v);
    gl_check_error();
}
void glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
    glad_glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) {
    glad_glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
    gl_check_error();
}
void glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    gl_check_error();
}
void glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) {
    glad_glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
    gl_check_error();
}
void glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z) {
    glad_glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glReplacementCodeuiVertex3fvSUN(const GLuint *rc, const GLfloat *v) {
    glad_glReplacementCodeuiVertex3fvSUN(const GLuint *rc, const GLfloat *v);
    gl_check_error();
}
void glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {
    glad_glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint *rc, const GLubyte *c, const GLfloat *v) {
    glad_glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint *rc, const GLubyte *c, const GLfloat *v);
    gl_check_error();
}
void glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {
    glad_glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glReplacementCodeuiColor3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *v) {
    glad_glReplacementCodeuiColor3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *v);
    gl_check_error();
}
void glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
    glad_glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *n, const GLfloat *v) {
    glad_glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *n, const GLfloat *v);
    gl_check_error();
}
void glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
    glad_glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v) {
    glad_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
    gl_check_error();
}
void glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) {
    glad_glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *v) {
    glad_glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *v);
    gl_check_error();
}
void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
    glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v) {
    glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
    gl_check_error();
}
void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
    glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    gl_check_error();
}
void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) {
    glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
    gl_check_error();
}
