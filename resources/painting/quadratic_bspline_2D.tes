#version 420
layout (isolines, equal_spacing) in;

in TCS_OUT {
    vec2 position;
} tes_in[];

uniform samplerBuffer knots;

void main(void)
{
    float t = gl_TessCoord.x;

    float knot_window[4];
    knot_window[0] = texelFetch(knots, gl_PrimitiveID + 0).r;
    knot_window[1] = texelFetch(knots, gl_PrimitiveID + 1).r;
    knot_window[2] = texelFetch(knots, gl_PrimitiveID + 2).r;
    knot_window[3] = texelFetch(knots, gl_PrimitiveID + 3).r;
    float a[3];
    a[0] = knot_window[1] - knot_window[0];
    a[1] = knot_window[2] - knot_window[1];
    a[2] = knot_window[3] - knot_window[2];
    // a[0] = 1;
    // a[1] = 1;
    // a[2] = 1;

    float alpha = a[0] / a[1];
    float beta = a[2] / a[1];

    float tmp1 = 1.0 / (1 + alpha);
    float tmp2 = 1.0 / (1 + beta);
    float c1 = (1 - t)*(1 - (t + alpha)*tmp1);
    float c2 = (1 - t)*(t + alpha)*tmp1 + t*(1 - t*tmp2);
    float c3 = t * t * tmp2;

    vec2 p1 = tes_in[0].position;
    vec2 p2 = tes_in[1].position;
    vec2 p3 = tes_in[2].position;

    gl_Position = vec4(c1*p1 + c2*p2 + c3*p3, -1,1);

    // Bezier test.
    // gl_Position = vec4((1-t)*(1-t)*p1 + 2*t*(1-t)*p2 + t*t*p3, -1,1);

    // Uniform knot test.
    // gl_Position = vec4(0.5*(1-t)*(1-t)*p1 + (0.5*(1 - t)*(1 + t) + t*(1 - 0.5*t))*p2 + 0.5*t*t*p3, -1,1);
}
