Shading file specification
--------------------------------------------------------------------------------
This file defines the "shading file" syntax and that data structure that it describes.

--EXAMPLE-----------------------------------------------------------------------
// Geometric material for triangle meshes.
#type gmat
#primitive triangles

section vertex {
    // code such as struct definitions, functions to be inserted, etc., goes here.

    out vec3 f_normal(in vec3 v_normal) {
        return v_normal;
    }
    out vec3 f_position(in vec3 v_position) {
        return v_position;
    }
    out vec2 f_uv(in vec3 v_uv) {
        return v_uv;
    }
    out vec3 world_position(in vec3 v_position, uniform mat4x4 model_matrix) {
        return (model_matrix * vec4(v_position, 1)).xyz;
    }
}
--------------------------------------------------------------------------------

These shading files represent "shading dataflows", which are sets of shading outputs
(with type and name) and those outputs' requirements (inputs or uniforms, each with type and name),
and a glsl snippet which returns the output value.

This should be enough information for further processing to prepare for code generation.

Initial directives
------------------
There are three kinds of shading files,
    gmat (GeometricMaterial),
    sm   (ShadingModel),
and mat  (Material).
Each defines a largely similar dataflow structure, but they may be treated slightly differently.
This can be the concern of further processing. Just collect all directives without interpreting them, first.
(Ignoring directives in pseudogrammar.)

SOURCE -> SECTIONS
SECTIONS -> SECTIONS SECTIONS
SECTIONS -> SECTION SECTIONS
SECTION -> section IDENTIFIER { SECTIONS }
SECTION -> (OUTPUT | ...)*
OUTPUT -> out IDENTIFIER IDENTIFIER((INPUT | UNIFORM)?(, INPUT | UNIFORM)*) {
                glsl snippet here, lexer should context switch here somehow
          }
INPUT -> in IDENTIFIER IDENTIFIER
UNIFORM -> uniform IDENTIFIER IDENTIFIER

This is parsed into a data structure which is simply a tree of branching or leaf "sections",
with "output" leaf nodes which each contain a list of "inputs" and "uniforms", as well as a glsl snippet.
Directives are also leaf nodes in the tree.

Once this data structure is read, verify that the first directive is
#type [gmat | sm | mat]
Depending on the type, different verifications are done. For example, a mat file has no section structure.
An sm file has two sections, geom_post and frag_post. gmats have a vertex section, and will probably have multiple sections
for handling things that will later map to the tessellation and geometry stages.
